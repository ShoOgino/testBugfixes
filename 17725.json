{"path":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"/dev/null","sourceNew":"    public void setUp() throws Exception {\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(Field.Keyword(\"id\", \"d1\"));\n            d1.add(Field.Text(\"hed\", \"elephant\"));\n            d1.add(Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(Field.Keyword(\"id\", \"d2\"));\n            d2.add(Field.Text(\"hed\", \"elephant\"));\n            d2.add(Field.Text(\"dek\", \"albino\"));\n            d2.add(Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(Field.Keyword(\"id\", \"d3\"));\n            d3.add(Field.Text(\"hed\", \"albino\"));\n            d3.add(Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(Field.Keyword(\"id\", \"d4\"));\n            d4.add(Field.Text(\"hed\", \"albino\"));\n            d4.add(Field.Text(\"hed\", \"elephant\"));\n            d4.add(Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(Field.Keyword(\"id\", \"d1\"));\n            d1.add(Field.Text(\"hed\", \"elephant\"));\n            d1.add(Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(Field.Keyword(\"id\", \"d2\"));\n            d2.add(Field.Text(\"hed\", \"elephant\"));\n            d2.add(Field.Text(\"dek\", \"albino\"));\n            d2.add(Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(Field.Keyword(\"id\", \"d3\"));\n            d3.add(Field.Text(\"hed\", \"albino\"));\n            d3.add(Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(Field.Keyword(\"id\", \"d4\"));\n            d4.add(Field.Text(\"hed\", \"albino\"));\n            d4.add(Field.Text(\"hed\", \"elephant\"));\n            d4.add(Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.UN_TOKENIZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.TOKENIZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58db9ee7d88a7b7c23d77436675c11bcb755c8f9","date":1249451023,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setSimilarity(sim);\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#setUp().mjava","sourceNew":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","sourceOld":"    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setSimilarity(sim));\n\n        // hed is the most important field, dek is secondary\n\n        // d1 is an \"ok\" match for:  albino elephant\n        {\n            Document d1 = new Document();\n            d1.add(new Field(\"id\", \"d1\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d1\"));\n            d1.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d1.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d1);\n        }\n\n        // d2 is a \"good\" match for:  albino elephant\n        {\n            Document d2 = new Document();\n            d2.add(new Field(\"id\", \"d2\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d2\"));\n            d2.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d2.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            d2.add(new Field(\"dek\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"elephant\"));\n            writer.addDocument(d2);\n        }\n\n        // d3 is a \"better\" match for:  albino elephant\n        {\n            Document d3 = new Document();\n            d3.add(new Field(\"id\", \"d3\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d3\"));\n            d3.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d3.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            writer.addDocument(d3);\n        }\n\n        // d4 is the \"best\" match for:  albino elephant\n        {\n            Document d4 = new Document();\n            d4.add(new Field(\"id\", \"d4\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\", \"d4\"));\n            d4.add(new Field(\"hed\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"albino\"));\n            d4.add(new Field(\"hed\", \"elephant\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"hed\", \"elephant\"));\n            d4.add(new Field(\"dek\", \"albino\", Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"dek\", \"albino\"));\n            writer.addDocument(d4);\n        }\n\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n        s.setSimilarity(sim);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["58db9ee7d88a7b7c23d77436675c11bcb755c8f9"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"58db9ee7d88a7b7c23d77436675c11bcb755c8f9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}