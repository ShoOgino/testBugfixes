{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(Req).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(Req).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        ++numServersTried;\n        ex = doRequest(serverStr, req, rsp, isNonRetryable, false);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBSolrClient.url\", wrapper.getBaseUrl());\n          ++numServersTried;\n          ex = doRequest(wrapper.baseUrl, req, rsp, isNonRetryable, true);\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(Req).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBSolrClient#request(Req).mjava","sourceNew":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    ServerIterator serverIterator = new ServerIterator(req, zombieServers);\n    String serverStr;\n    while ((serverStr = serverIterator.nextOrError(ex)) != null) {\n      try {\n        MDC.put(\"LBSolrClient.url\", serverStr);\n        ex = doRequest(serverStr, req, rsp, isNonRetryable, serverIterator.isServingZombieServer());\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBSolrClient.url\");\n      }\n    }\n    throw new SolrServerException(\"No live SolrServers available to handle this request:\" + zombieServers.keySet(), ex);\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.\n   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of\n   * time, or until a test request on that server succeeds.\n   *\n   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).\n   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.\n   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.\n   *\n   * If no live servers are found a SolrServerException is thrown.\n   *\n   * @param req contains both the request as well as the list of servers to query\n   *\n   * @return the result of the request\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Rsp request(Req req) throws SolrServerException, IOException {\n    Rsp rsp = new Rsp();\n    Exception ex = null;\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    List<ServerWrapper> skipped = null;\n\n    final Integer numServersToTry = req.getNumServersToTry();\n    int numServersTried = 0;\n\n    boolean timeAllowedExceeded = false;\n    long timeAllowedNano = getTimeAllowedInNanos(req.getRequest());\n    long timeOutTime = System.nanoTime() + timeAllowedNano;\n    for (String serverStr : req.getServers()) {\n      if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n        break;\n      }\n\n      serverStr = normalize(serverStr);\n      // if the server is currently a zombie, just skip to the next one\n      ServerWrapper wrapper = zombieServers.get(serverStr);\n      if (wrapper != null) {\n        // System.out.println(\"ZOMBIE SERVER QUERIED: \" + serverStr);\n        final int numDeadServersToTry = req.getNumDeadServersToTry();\n        if (numDeadServersToTry > 0) {\n          if (skipped == null) {\n            skipped = new ArrayList<>(numDeadServersToTry);\n            skipped.add(wrapper);\n          }\n          else if (skipped.size() < numDeadServersToTry) {\n            skipped.add(wrapper);\n          }\n        }\n        continue;\n      }\n      try {\n        MDC.put(\"LBSolrClient.url\", serverStr);\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        ++numServersTried;\n        ex = doRequest(serverStr, req, rsp, isNonRetryable, false);\n        if (ex == null) {\n          return rsp; // SUCCESS\n        }\n      } finally {\n        MDC.remove(\"LBSolrClient.url\");\n      }\n    }\n\n    // try the servers we previously skipped\n    if (skipped != null) {\n      for (ServerWrapper wrapper : skipped) {\n        if (timeAllowedExceeded = isTimeExceeded(timeAllowedNano, timeOutTime)) {\n          break;\n        }\n\n        if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n          break;\n        }\n\n        try {\n          MDC.put(\"LBSolrClient.url\", wrapper.getBaseUrl());\n          ++numServersTried;\n          ex = doRequest(wrapper.baseUrl, req, rsp, isNonRetryable, true);\n          if (ex == null) {\n            return rsp; // SUCCESS\n          }\n        } finally {\n          MDC.remove(\"LBSolrClient.url\");\n        }\n      }\n    }\n\n\n    final String solrServerExceptionMessage;\n    if (timeAllowedExceeded) {\n      solrServerExceptionMessage = \"Time allowed to handle this request exceeded\";\n    } else {\n      if (numServersToTry != null && numServersTried > numServersToTry.intValue()) {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request:\"\n            + \" numServersTried=\"+numServersTried\n            + \" numServersToTry=\"+numServersToTry.intValue();\n      } else {\n        solrServerExceptionMessage = \"No live SolrServers available to handle this request\";\n      }\n    }\n    if (ex == null) {\n      throw new SolrServerException(solrServerExceptionMessage);\n    } else {\n      throw new SolrServerException(solrServerExceptionMessage+\":\" + zombieServers.keySet(), ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}