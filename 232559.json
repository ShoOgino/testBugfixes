{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":null,"sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}