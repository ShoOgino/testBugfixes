{"path":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","commits":[{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"/dev/null","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, vs.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(vs.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return vs.needsScores();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"/dev/null","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, vs.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(vs.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return vs.needsScores();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a38488a55cc52553c9792da5044dd31b15128cd8","date":1510755769,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return rewritten.needsScores();\n      }\n    });\n  }\n\n","sourceOld":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = vs.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, vs.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(vs.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return vs.needsScores();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return vs.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    });\n  }\n\n","sourceOld":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return rewritten.needsScores();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return vs.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    });\n  }\n\n","sourceOld":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public boolean needsScores() {\n        return rewritten.needsScores();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDoubleValuesSource#testExplanations(Query,DoubleValuesSource).mjava","sourceNew":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return vs.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    });\n  }\n\n","sourceOld":"  private void testExplanations(Query q, DoubleValuesSource vs) throws IOException {\n    DoubleValuesSource rewritten = vs.rewrite(searcher);\n    searcher.search(q, new SimpleCollector() {\n\n      DoubleValues v;\n      LeafReaderContext ctx;\n\n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        this.ctx = context;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.v = rewritten.getValues(this.ctx, DoubleValuesSource.fromScorer(scorer));\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        Explanation scoreExpl = searcher.explain(q, ctx.docBase + doc);\n        if (this.v.advanceExact(doc)) {\n          CheckHits.verifyExplanation(\"\", doc, (float) v.doubleValue(), true, rewritten.explain(ctx, doc, scoreExpl));\n        }\n        else {\n          assertFalse(rewritten.explain(ctx, doc, scoreExpl).isMatch());\n        }\n      }\n\n      @Override\n      public ScoreMode scoreMode() {\n        return vs.needsScores() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a38488a55cc52553c9792da5044dd31b15128cd8"],"a38488a55cc52553c9792da5044dd31b15128cd8":["501fdb8d708778ae5368dd5c44879e1d46487e43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a38488a55cc52553c9792da5044dd31b15128cd8","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","a38488a55cc52553c9792da5044dd31b15128cd8"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a38488a55cc52553c9792da5044dd31b15128cd8":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}