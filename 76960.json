{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/Lucene3xFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/PreFlexFields.PreTermsEnum#setNewSuffixStart(BytesRef,BytesRef).mjava","sourceNew":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","sourceOld":"    private void setNewSuffixStart(BytesRef br1, BytesRef br2) {\n      final int limit = Math.min(br1.length, br2.length);\n      int lastStart = 0;\n      for(int i=0;i<limit;i++) {\n        if ((br1.bytes[br1.offset+i] & 0xc0) == 0xc0 || (br1.bytes[br1.offset+i] & 0x80) == 0) {\n          lastStart = i;\n        }\n        if (br1.bytes[br1.offset+i] != br2.bytes[br2.offset+i]) {\n          newSuffixStart = lastStart;\n          if (DEBUG_SURROGATES) {\n            System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n          }\n          return;\n        }\n      }\n      newSuffixStart = limit;\n      if (DEBUG_SURROGATES) {\n        System.out.println(\"    set newSuffixStart=\" + newSuffixStart);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["7b91922b55d15444d554721b352861d028eb8278","3242a09f703274d3b9283f2064a1a33064b53a1b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}