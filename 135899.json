{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/LargeInputFST#main(String[]).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/LargeInputFST#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    File input = new File(\"/home/dweiss/tmp/shuffled.dict\");\n\n    int buckets = 20;\n    int shareMaxTail = 10;\n\n    ExternalRefSorter sorter = new ExternalRefSorter(new Sort());\n    FSTCompletionBuilder builder = new FSTCompletionBuilder(buckets, sorter, shareMaxTail);\n\n    BufferedReader reader = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(input), \"UTF-8\"));\n    \n    BytesRef scratch = new BytesRef();\n    String line;\n    int count = 0;\n    while ((line = reader.readLine()) != null) {\n      scratch.copyChars(line);\n      builder.add(scratch, count % buckets);\n      if ((count++ % 100000) == 0) {\n        System.err.println(\"Line: \" + count);\n      }\n    }\n\n    System.out.println(\"Building FSTCompletion.\");\n    FSTCompletion completion = builder.build();\n\n    File fstFile = new File(\"completion.fst\");\n    System.out.println(\"Done. Writing automaton: \" + fstFile.getAbsolutePath());\n    completion.getFST().save(fstFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/LargeInputFST#main(String[]).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/LargeInputFST#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    File input = new File(\"/home/dweiss/tmp/shuffled.dict\");\n\n    int buckets = 20;\n    int shareMaxTail = 10;\n\n    ExternalRefSorter sorter = new ExternalRefSorter(new Sort());\n    FSTCompletionBuilder builder = new FSTCompletionBuilder(buckets, sorter, shareMaxTail);\n\n    BufferedReader reader = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(input), \"UTF-8\"));\n    \n    BytesRef scratch = new BytesRef();\n    String line;\n    int count = 0;\n    while ((line = reader.readLine()) != null) {\n      scratch.copyChars(line);\n      builder.add(scratch, count % buckets);\n      if ((count++ % 100000) == 0) {\n        System.err.println(\"Line: \" + count);\n      }\n    }\n\n    System.out.println(\"Building FSTCompletion.\");\n    FSTCompletion completion = builder.build();\n\n    File fstFile = new File(\"completion.fst\");\n    System.out.println(\"Done. Writing automaton: \" + fstFile.getAbsolutePath());\n    completion.getFST().save(fstFile);\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    File input = new File(\"/home/dweiss/tmp/shuffled.dict\");\n\n    int buckets = 20;\n    int shareMaxTail = 10;\n\n    ExternalRefSorter sorter = new ExternalRefSorter(new Sort());\n    FSTCompletionBuilder builder = new FSTCompletionBuilder(buckets, sorter, shareMaxTail);\n\n    BufferedReader reader = new BufferedReader(\n        new InputStreamReader(\n            new FileInputStream(input), \"UTF-8\"));\n    \n    BytesRef scratch = new BytesRef();\n    String line;\n    int count = 0;\n    while ((line = reader.readLine()) != null) {\n      scratch.copyChars(line);\n      builder.add(scratch, count % buckets);\n      if ((count++ % 100000) == 0) {\n        System.err.println(\"Line: \" + count);\n      }\n    }\n\n    System.out.println(\"Building FSTCompletion.\");\n    FSTCompletion completion = builder.build();\n\n    File fstFile = new File(\"completion.fst\");\n    System.out.println(\"Done. Writing automaton: \" + fstFile.getAbsolutePath());\n    completion.getFST().save(fstFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}