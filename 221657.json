{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"/dev/null","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      Thread.sleep(500);\n    }\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1105a708782bf9bb60cc8107bab4d182a7ea87","date":1346759847,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 40000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 15000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 40000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":["de1105a708782bf9bb60cc8107bab4d182a7ea87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n      server.setDefaultCollection(DEFAULT_COLLECTION);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n      cloudClient = server;\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d334938e866757266d62025305edd378ac505a06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n      server.setDefaultCollection(DEFAULT_COLLECTION);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n      cloudClient = server;\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader != null) {\n          return;\n        }\n        zkStateReader = new ZkStateReader(zkServer.getZkAddress(), 10000,\n            AbstractZkTestCase.TIMEOUT);\n        \n        zkStateReader.createClusterStateWatchersAndUpdate();\n      }\n      \n      chaosMonkey = new ChaosMonkey(zkServer, zkStateReader,\n          DEFAULT_COLLECTION, shardToJetty,\n          shardToLeaderJetty);\n    }\n    \n    // wait until shards have started registering...\n    int cnt = 30;\n    while (!zkStateReader.getClusterState().getCollections()\n        .contains(DEFAULT_COLLECTION)) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection1 in cluster state\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    cnt = 30;\n    while (zkStateReader.getClusterState().getSlices(DEFAULT_COLLECTION).size() != sliceCount) {\n      if (cnt == 0) {\n        throw new RuntimeException(\"timeout waiting for collection shards to come up\");\n      }\n      cnt--;\n      Thread.sleep(500);\n    }\n    \n    // use the distributed solrj client\n    if (cloudClient == null) {\n      synchronized (this) {\n        if (cloudClient != null) {\n          return;\n        }\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n          server.getLbServer().getHttpClient().getParams()\n              .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n          cloudClient = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334938e866757266d62025305edd378ac505a06","date":1355368871,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      cloudClient = createCloudClient(DEFAULT_COLLECTION);\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n      server.setDefaultCollection(DEFAULT_COLLECTION);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n      cloudClient = server;\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      cloudClient = createCloudClient(DEFAULT_COLLECTION);\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n      server.setDefaultCollection(DEFAULT_COLLECTION);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);\n      server.getLbServer().getHttpClient().getParams()\n          .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);\n      cloudClient = server;\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52209f74dc33b64e2e3576fe15b8c2d312809d7","date":1408896505,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    cloudClient = createCloudClient(DEFAULT_COLLECTION);\n    cloudClient.connect();\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    try {\n      cloudClient = createCloudClient(DEFAULT_COLLECTION);\n      \n      cloudClient.connect();\n    } catch (MalformedURLException e) {\n      throw new RuntimeException(e);\n    }\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#initCloud().mjava","sourceNew":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    cloudClient = createCloudClient(DEFAULT_COLLECTION);\n    cloudClient.connect();\n\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n\n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","sourceOld":"  protected void initCloud() throws Exception {\n    assert(cloudInit == false);\n    cloudInit = true;\n    cloudClient = createCloudClient(DEFAULT_COLLECTION);\n    cloudClient.connect();\n    \n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    \n    chaosMonkey = new ChaosMonkey(zkServer, zkStateReader, DEFAULT_COLLECTION,\n        shardToJetty, shardToLeaderJetty);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","d334938e866757266d62025305edd378ac505a06"],"abb23fcc2461782ab204e61213240feb77d355aa":["e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["d334938e866757266d62025305edd378ac505a06"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a6378064655e76cd7b908b1cab4ce425b384b508"],"d334938e866757266d62025305edd378ac505a06":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a6378064655e76cd7b908b1cab4ce425b384b508":["de1105a708782bf9bb60cc8107bab4d182a7ea87"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"de1105a708782bf9bb60cc8107bab4d182a7ea87":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a6378064655e76cd7b908b1cab4ce425b384b508","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e52209f74dc33b64e2e3576fe15b8c2d312809d7":["abb23fcc2461782ab204e61213240feb77d355aa"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d334938e866757266d62025305edd378ac505a06","f2126b84bd093fa3d921582a109a0ee578c28126"],"d334938e866757266d62025305edd378ac505a06":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e52209f74dc33b64e2e3576fe15b8c2d312809d7"],"a6378064655e76cd7b908b1cab4ce425b384b508":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"de1105a708782bf9bb60cc8107bab4d182a7ea87":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","de1105a708782bf9bb60cc8107bab4d182a7ea87","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}