{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","commits":[{"id":"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","date":1464965423,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the shardId of a core on a specific node\n   */\n  public String getShardId(String nodeName, String coreName) {\n    for (Slice slice : this) {\n      for (Replica replica : slice) {\n        if (Objects.equals(replica.getNodeName(), nodeName) && Objects.equals(replica.getCoreName(), coreName))\n          return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650d17e953fb1d54e644f9928e3202e68b88eeb1","date":1465215234,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the shardId of a core on a specific node\n   */\n  public String getShardId(String nodeName, String coreName) {\n    for (Slice slice : this) {\n      for (Replica replica : slice) {\n        if (Objects.equals(replica.getNodeName(), nodeName) && Objects.equals(replica.getCoreName(), coreName))\n          return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the shardId of a core on a specific node\n   */\n  public String getShardId(String nodeName, String coreName) {\n    for (Slice slice : this) {\n      for (Replica replica : slice) {\n        if (Objects.equals(replica.getNodeName(), nodeName) && Objects.equals(replica.getCoreName(), coreName))\n          return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the shardId of a core on a specific node\n   */\n  public String getShardId(String nodeName, String coreName) {\n    for (Slice slice : this) {\n      for (Replica replica : slice) {\n        if (Objects.equals(replica.getNodeName(), nodeName) && Objects.equals(replica.getCoreName(), coreName))\n          return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/DocCollection#getShardId(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the shardId of a core on a specific node\n   */\n  public String getShardId(String nodeName, String coreName) {\n    for (Slice slice : this) {\n      for (Replica replica : slice) {\n        if (Objects.equals(replica.getNodeName(), nodeName) && Objects.equals(replica.getCoreName(), coreName))\n          return slice.getName();\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e"],"191128ac5b85671b1671e2c857437694283b6ebf":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","650d17e953fb1d54e644f9928e3202e68b88eeb1"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["191128ac5b85671b1671e2c857437694283b6ebf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"]},"commit2Childs":{"20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e":["650d17e953fb1d54e644f9928e3202e68b88eeb1","191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c56b78a24b25c89b1deb0a1331f7ee7af8ac7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"650d17e953fb1d54e644f9928e3202e68b88eeb1":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}