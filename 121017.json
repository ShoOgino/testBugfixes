{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/OriginalSyntaxParser#Query(CharSequence).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/OriginalSyntaxParser#Query(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"// These changes were made to introduce operator precedence:\n// - Clause() now returns a QueryNode. \n// - The modifiers are consumed by Clause() and returned as part of the QueryNode Object\n// - Query does not consume conjunctions (AND, OR) anymore. \n// - This is now done by two new non-terminals: ConjClause and DisjClause\n// The parse tree looks similar to this:\n//       Query ::= DisjQuery ( DisjQuery )*\n//   DisjQuery ::= ConjQuery ( OR ConjQuery )* \n//   ConjQuery ::= Clause ( AND Clause )*\n//      Clause ::= [ Modifier ] ... \n  final public QueryNode Query(CharSequence field) throws ParseException {\n  Vector clauses = null;\n  QueryNode c, first=null;\n    first = DisjQuery(field);\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      c = DisjQuery(field);\n             if (clauses == null) {\n                 clauses = new Vector();\n                 clauses.addElement(first);\n             }\n         clauses.addElement(c);\n    }\n        if (clauses != null) {\n                {if (true) return new BooleanQueryNode(clauses);}\n        } else {\n                {if (true) return first;}\n        }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Query(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/OriginalSyntaxParser#Query(CharSequence).mjava","sourceNew":"// These changes were made to introduce operator precedence:\n// - Clause() now returns a QueryNode. \n// - The modifiers are consumed by Clause() and returned as part of the QueryNode Object\n// - Query does not consume conjunctions (AND, OR) anymore. \n// - This is now done by two new non-terminals: ConjClause and DisjClause\n// The parse tree looks similar to this:\n//       Query ::= DisjQuery ( DisjQuery )*\n//   DisjQuery ::= ConjQuery ( OR ConjQuery )* \n//   ConjQuery ::= Clause ( AND Clause )*\n//      Clause ::= [ Modifier ] ... \n  final public QueryNode Query(CharSequence field) throws ParseException {\n  Vector clauses = null;\n  QueryNode c, first=null;\n    first = DisjQuery(field);\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      c = DisjQuery(field);\n             if (clauses == null) {\n                 clauses = new Vector();\n                 clauses.addElement(first);\n             }\n         clauses.addElement(c);\n    }\n        if (clauses != null) {\n                {if (true) return new BooleanQueryNode(clauses);}\n        } else {\n                {if (true) return first;}\n        }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"// These changes were made to introduce operator precedence:\n// - Clause() now returns a QueryNode. \n// - The modifiers are consumed by Clause() and returned as part of the QueryNode Object\n// - Query does not consume conjunctions (AND, OR) anymore. \n// - This is now done by two new non-terminals: ConjClause and DisjClause\n// The parse tree looks similar to this:\n//       Query ::= DisjQuery ( DisjQuery )*\n//   DisjQuery ::= ConjQuery ( OR ConjQuery )* \n//   ConjQuery ::= Clause ( AND Clause )*\n//      Clause ::= [ Modifier ] ... \n  final public QueryNode Query(CharSequence field) throws ParseException {\n  Vector clauses = null;\n  QueryNode c, first=null;\n    first = DisjQuery(field);\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      c = DisjQuery(field);\n             if (clauses == null) {\n                 clauses = new Vector();\n                 clauses.addElement(first);\n             }\n         clauses.addElement(c);\n    }\n        if (clauses != null) {\n                {if (true) return new BooleanQueryNode(clauses);}\n        } else {\n                {if (true) return first;}\n        }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}