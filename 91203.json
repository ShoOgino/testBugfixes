{"path":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#add(AtomicReader,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#add(AtomicReader,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#add(AtomicReader,boolean).mjava","sourceNew":" /** Add an AtomicIndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link AtomicReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(AtomicReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = MultiFields.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, reader.terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","sourceOld":" /** Add an AtomicIndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link AtomicReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(AtomicReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = MultiFields.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, reader.terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ParallelReader#add(AtomicReader,boolean).mjava","sourceNew":null,"sourceOld":" /** Add an AtomicIndexReader whose stored fields will not be returned.  This can\n  * accelerate search when stored fields are only needed from a subset of\n  * the IndexReaders.\n  *\n  * @throws IllegalArgumentException if not all indexes contain the same number\n  *     of documents\n  * @throws IllegalArgumentException if not all indexes have the same value\n  *     of {@link AtomicReader#maxDoc()}\n  * @throws IOException if there is a low-level IO error\n  */\n  public void add(AtomicReader reader, boolean ignoreStoredFields)\n    throws IOException {\n\n    ensureOpen();\n    if (readers.size() == 0) {\n      this.maxDoc = reader.maxDoc();\n      this.numDocs = reader.numDocs();\n      this.hasDeletions = reader.hasDeletions();\n    }\n\n    if (reader.maxDoc() != maxDoc)                // check compatibility\n      throw new IllegalArgumentException\n        (\"All readers must have same maxDoc: \"+maxDoc+\"!=\"+reader.maxDoc());\n    if (reader.numDocs() != numDocs)\n      throw new IllegalArgumentException\n        (\"All readers must have same numDocs: \"+numDocs+\"!=\"+reader.numDocs());\n\n    final FieldInfos readerFieldInfos = MultiFields.getMergedFieldInfos(reader);\n    for(FieldInfo fieldInfo : readerFieldInfos) {   // update fieldToReader map\n      // NOTE: first reader having a given field \"wins\":\n      if (fieldToReader.get(fieldInfo.name) == null) {\n        fieldInfos.add(fieldInfo);\n        fieldToReader.put(fieldInfo.name, reader);\n        this.fields.addField(fieldInfo.name, reader.terms(fieldInfo.name));\n      }\n    }\n\n    if (!ignoreStoredFields)\n      storedFieldReaders.add(reader);             // add to storedFieldReaders\n    readers.add(reader);\n    \n    if (incRefReaders) {\n      reader.incRef();\n    }\n    decrefOnClose.add(Boolean.valueOf(incRefReaders));\n    synchronized(normsCache) {\n      normsCache.clear(); // TODO: don't need to clear this for all fields really?\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e09a3a223be07d75777515a717312813221fe58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e09a3a223be07d75777515a717312813221fe58"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e09a3a223be07d75777515a717312813221fe58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e09a3a223be07d75777515a717312813221fe58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}