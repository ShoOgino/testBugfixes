{"path":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","commits":[{"id":"bca807fcb2fa11c40a0c929d869a16376c24932b","date":1476974181,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Map[String,Resolved]).mjava","sourceNew":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","sourceOld":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Map<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Map[String,Resolved]).mjava","sourceNew":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","sourceOld":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Map<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed1b270b5ea6e1859f4b77233891fbb991898dba","date":1497429460,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved],Pattern).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","sourceNew":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache, Pattern pattern) {\n    Resolved r = getResolved(template, cache, pattern );\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","sourceOld":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved],Pattern).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","sourceNew":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache, Pattern pattern) {\n    Resolved r = getResolved(template, cache, pattern );\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","sourceOld":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TemplateUpdateProcessorFactory#getVariables(String,Cache[String,Resolved]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get a list of variables embedded in the template string.\n   */\n  public static List<String> getVariables(String template, Cache<String, Resolved> cache) {\n    Resolved r = getResolved(template, cache);\n    if (r == null) {\n      return Collections.emptyList();\n    }\n    return new ArrayList<>(r.variables);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ed1b270b5ea6e1859f4b77233891fbb991898dba":["bca807fcb2fa11c40a0c929d869a16376c24932b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bca807fcb2fa11c40a0c929d869a16376c24932b"],"bca807fcb2fa11c40a0c929d869a16376c24932b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["bca807fcb2fa11c40a0c929d869a16376c24932b","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["bca807fcb2fa11c40a0c929d869a16376c24932b","ed1b270b5ea6e1859f4b77233891fbb991898dba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"ed1b270b5ea6e1859f4b77233891fbb991898dba":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","bca807fcb2fa11c40a0c929d869a16376c24932b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bca807fcb2fa11c40a0c929d869a16376c24932b":["ed1b270b5ea6e1859f4b77233891fbb991898dba","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}