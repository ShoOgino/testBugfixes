{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    boolean first = true;\n    float val = 0.0f;\n    for (FunctionValues vals : valsArr) {\n      if (first) {\n        first = false;\n        val = vals.floatVal(doc);\n      } else {\n        val = Math.min(vals.floatVal(doc),val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    boolean first = true;\n    float val = 0.0f;\n    for (FunctionValues vals : valsArr) {\n      if (first) {\n        first = false;\n        val = vals.floatVal(doc);\n      } else {\n        val = Math.min(vals.floatVal(doc),val);\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e404f5edf84274caf4e6b04091acc397a97b6c","date":1370872541,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if (valsArr.length == 0) return 0.0f;\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      val = Math.min(vals.floatVal(doc), val);\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    boolean first = true;\n    float val = 0.0f;\n    for (FunctionValues vals : valsArr) {\n      if (first) {\n        first = false;\n        val = vals.floatVal(doc);\n      } else {\n        val = Math.min(vals.floatVal(doc),val);\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if (valsArr.length == 0) return 0.0f;\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      val = Math.min(vals.floatVal(doc), val);\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if (valsArr.length == 0) return 0.0f;\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      val = Math.min(vals.floatVal(doc), val);\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MinFloatFunction#func(int,FunctionValues[]).mjava","sourceNew":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) throws IOException {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","sourceOld":"  @Override\n  protected float func(int doc, FunctionValues[] valsArr) {\n    if ( ! exists(doc, valsArr) ) return 0.0f;\n\n    float val = Float.POSITIVE_INFINITY;\n    for (FunctionValues vals : valsArr) {\n      if (vals.exists(doc)) {\n        val = Math.min(vals.floatVal(doc), val);\n      }\n    }\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["60e404f5edf84274caf4e6b04091acc397a97b6c","a701a7aab388afa1412a3dc23b4115c321f478c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a701a7aab388afa1412a3dc23b4115c321f478c4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a701a7aab388afa1412a3dc23b4115c321f478c4"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["60e404f5edf84274caf4e6b04091acc397a97b6c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a701a7aab388afa1412a3dc23b4115c321f478c4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"60e404f5edf84274caf4e6b04091acc397a97b6c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["60e404f5edf84274caf4e6b04091acc397a97b6c"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"60e404f5edf84274caf4e6b04091acc397a97b6c":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}