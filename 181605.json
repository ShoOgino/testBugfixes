{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#sort(AtomicReader,Sorter).mjava","sourceNew":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    final Sorter.DocMap docMap = sorter.sort(reader);\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    assert Sorter.isConsistent(docMap, reader.maxDoc());\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","sourceOld":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader sort(AtomicReader reader, Sorter sorter) throws IOException {\n    final Sorter.DocMap docMap = sorter.sort(reader);\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    assert Sorter.isConsistent(docMap, reader.maxDoc());\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","sourceNew":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    return wrap(reader, sorter.sort(reader));\n  }\n\n","sourceOld":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    final Sorter.DocMap docMap = sorter.sort(reader);\n    if (docMap == null) {\n      // the reader is already sorter\n      return reader;\n    }\n    assert Sorter.isConsistent(docMap, reader.maxDoc());\n    return new SortingAtomicReader(reader, docMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","sourceNew":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sort sort) throws IOException {\n    return wrap(reader, new SortSorter(sort).sort(reader));\n  }\n\n","sourceOld":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    return wrap(reader, sorter.sort(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","sourceNew":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sort</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sort sort) throws IOException {\n    return wrap(reader, new Sorter(sort).sort(reader));\n  }\n\n","sourceOld":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    return wrap(reader, sorter.sort(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sort).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingAtomicReader#wrap(AtomicReader,Sorter).mjava","sourceNew":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sort</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sort sort) throws IOException {\n    return wrap(reader, new Sorter(sort).sort(reader));\n  }\n\n","sourceOld":"  /** Return a sorted view of <code>reader</code> according to the order\n   *  defined by <code>sorter</code>. If the reader is already sorted, this\n   *  method might return the reader as-is. */\n  public static AtomicReader wrap(AtomicReader reader, Sorter sorter) throws IOException {\n    return wrap(reader, sorter.sort(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4637747f71df783fc2014ef1f1e0418466e3bed6":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4637747f71df783fc2014ef1f1e0418466e3bed6"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}