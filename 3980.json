{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanOrQuery that = (SpanOrQuery) o;\n\n    if (!clauses.equals(that.clauses)) return false;\n    if (!clauses.isEmpty() && !field.equals(that.field)) return false;\n\n    return getBoost() == that.getBoost();\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanOrQuery that = (SpanOrQuery) o;\n\n    if (!clauses.equals(that.clauses)) return false;\n    if (!clauses.isEmpty() && !field.equals(that.field)) return false;\n\n    return getBoost() == that.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15b2c0b1d50ad54ea367036e4bd9376be42c2805","date":1392752466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanOrQuery that = (SpanOrQuery) o;\n\n    if (!clauses.equals(that.clauses)) return false;\n\n    return getBoost() == that.getBoost();\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanOrQuery that = (SpanOrQuery) o;\n\n    if (!clauses.equals(that.clauses)) return false;\n    if (!clauses.isEmpty() && !field.equals(that.field)) return false;\n\n    return getBoost() == that.getBoost();\n  }\n\n","bugFix":["403276476fcb5face94d280a9d9a54cd9e5771c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanOrQuery that = (SpanOrQuery) o;\n    return clauses.equals(that.clauses);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanOrQuery that = (SpanOrQuery) o;\n\n    if (!clauses.equals(that.clauses)) return false;\n\n    return getBoost() == that.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           clauses.equals(((SpanOrQuery) other).clauses);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanOrQuery that = (SpanOrQuery) o;\n    return clauses.equals(that.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           clauses.equals(((SpanOrQuery) other).clauses);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    final SpanOrQuery that = (SpanOrQuery) o;\n    return clauses.equals(that.clauses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15b2c0b1d50ad54ea367036e4bd9376be42c2805":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}