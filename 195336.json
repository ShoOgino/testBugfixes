{"path":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    ValueSource shapes = null;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      // we don't really need the qparser... just so we can reuse valueSource\n      QParser parser = new QParser(null,null,params, req) {\n        @Override\n        public Query parse() throws SyntaxError {\n          return new MatchAllDocsQuery();\n        }\n      }; \n\n      return new ValueSourceAugmenter(display, parser, shapes) {\n        @Override\n        protected void setValue(SolrDocument doc, Object val) {\n          updater.setValue(doc, val);\n        }\n      };\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    ValueSource shapes = null;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      // we don't really need the qparser... just so we can reuse valueSource\n      QParser parser = new QParser(null,null,params, req) {\n        @Override\n        public Query parse() throws SyntaxError {\n          return new MatchAllDocsQuery();\n        }\n      }; \n\n      return new ValueSourceAugmenter(display, parser, shapes) {\n        @Override\n        protected void setValue(SolrDocument doc, Object val) {\n          updater.setValue(doc, val);\n        }\n      };\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    ValueSource shapes = null;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      // we don't really need the qparser... just so we can reuse valueSource\n      QParser parser = new QParser(null,null,params, req) {\n        @Override\n        public Query parse() throws SyntaxError {\n          return new MatchAllDocsQuery();\n        }\n      }; \n\n      return new ValueSourceAugmenter(display, parser, shapes) {\n        @Override\n        protected void setValue(SolrDocument doc, Object val) {\n          updater.setValue(doc, val);\n        }\n      };\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    ValueSource shapes = null;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      // we don't really need the qparser... just so we can reuse valueSource\n      QParser parser = new QParser(null,null,params, req) {\n        @Override\n        public Query parse() throws SyntaxError {\n          return new MatchAllDocsQuery();\n        }\n      }; \n\n      return new ValueSourceAugmenter(display, parser, shapes) {\n        @Override\n        protected void setValue(SolrDocument doc, Object val) {\n          updater.setValue(doc, val);\n        }\n      };\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/GeoTransformerFactory#create(String,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {\n\n    String fname = params.get(\"f\", display);\n    if(fname.startsWith(\"[\") && fname.endsWith(\"]\")) {\n      fname = display.substring(1,display.length()-1);\n    }\n    SchemaField sf = req.getSchema().getFieldOrNull(fname);\n    if(sf==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          this.getClass().getSimpleName() +\" using unknown field: \"+fname);\n    }\n    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoTransformer requested non-spatial field: \"+fname + \" (\"+sf.getType().getClass().getSimpleName()+\")\");\n    }\n\n    final GeoFieldUpdater updater = new GeoFieldUpdater();\n    updater.field = fname;\n    updater.display = display;\n    updater.display_error = display+\"_error\"; \n        \n    final ShapeValuesSource shapes;\n    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();\n    SpatialStrategy strategy = sdv.getStrategy(fname);\n    if(strategy instanceof CompositeSpatialStrategy) {\n      shapes = ((CompositeSpatialStrategy)strategy)\n          .getGeometryStrategy().makeShapeValueSource();\n    }\n    else if(strategy instanceof SerializedDVStrategy) {\n      shapes = ((SerializedDVStrategy)strategy)\n          .makeShapeValueSource();\n    }\n    else\n      shapes = null;\n    \n    \n    String writerName = params.get(\"w\", \"GeoJSON\");\n    updater.formats = strategy.getSpatialContext().getFormats();\n    updater.writer = updater.formats.getWriter(writerName);\n    if(updater.writer==null) {\n      StringBuilder str = new StringBuilder();\n      str.append( \"Unknown Spatial Writer: \" ).append(writerName);\n      str.append(\" [\");\n      for(ShapeWriter w : updater.formats.getWriters()) {\n        str.append(w.getFormatName()).append(' ');\n      }\n      str.append(\"]\");\n      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());\n    }\n    \n    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);\n    updater.isJSON =\n        (qw.getClass() == JSONResponseWriter.class) &&\n        (updater.writer instanceof GeoJSONWriter);\n\n\n    // Using ValueSource\n    if(shapes!=null) {\n      return new DocTransformer() {\n        @Override\n        public String getName() {\n          return display;\n        }\n\n        @Override\n        public void transform(SolrDocument doc, int docid, float score) throws IOException {\n          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());\n          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);\n          ShapeValues values = shapes.getValues(ctx);\n          int segmentDoc = docid - ctx.docBase;\n          if (values.advanceExact(segmentDoc)) {\n            updater.setValue(doc, values.value());\n          }\n        }\n      };\n\n    }\n    \n    // Using the raw stored values\n    return new DocTransformer() {\n      \n      @Override\n      public void transform(SolrDocument doc, int docid, float score) throws IOException {\n        Object val = doc.remove(updater.field);\n        if(val!=null) {\n          updater.setValue(doc, val);\n        }\n      }\n      \n      @Override\n      public String getName() {\n        return updater.display;\n      }\n\n      @Override\n      public String[] getExtraRequestFields() {\n        return new String[] {updater.field};\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["98f11c416d30e556e0004a9a84960702d12d35b1","182384b20c064aa16998ddebe9f36e649279c5a6"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["28288370235ed02234a64753cdbf0c6ec096304a","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["ba1c938737d199113ec96f0d8ce2c8791b61cd18","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["ba1c938737d199113ec96f0d8ce2c8791b61cd18","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"]},"commit2Childs":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"28288370235ed02234a64753cdbf0c6ec096304a":["320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}