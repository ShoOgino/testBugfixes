{"path":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39","date":1161023282,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        writer.close();\n\n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        writer.close();\n\n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cf040795587947011604327cf9538e12d298d8b","date":1195159374,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            fail(\"writer2.close() should have hit LockReleaseFailedException\");\n          } catch (LockReleaseFailedException e) {\n            // expected\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n            writer2.close();\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ede03d537cd6c85c921eb49cdd7fbc49daa602d0","date":1200589243,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            fail(\"writer2.close() should have hit LockReleaseFailedException\");\n          } catch (LockReleaseFailedException e) {\n            // expected\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":["2cf040795587947011604327cf9538e12d298d8b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7faff7550034759516ce7f4898cd16c1816cde","date":1245778901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory2\");\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        String indexDirName = \"index.TestLockFactory2\";\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8","date":1254593002,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryTwoCreates().mjava","sourceNew":null,"sourceOld":"    // Verify: FSDirectory's default lockFactory clears all locks correctly\n    public void testFSDirectoryTwoCreates() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory2\");\n\n        IndexWriter writer = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                             IndexWriter.MaxFieldLength.LIMITED);\n\n        assertTrue(\"FSDirectory did not use correct LockFactory: got \" + writer.getDirectory().getLockFactory(),\n                   SimpleFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()) ||\n                   NativeFSLockFactory.class.isInstance(writer.getDirectory().getLockFactory()));\n\n        // Intentionally do not close the first writer here.\n        // The goal is to \"simulate\" a crashed writer and\n        // ensure the second writer, with create=true, is\n        // able to remove the lock files.  This works OK\n        // with SimpleFSLockFactory as the locking\n        // implementation.  Note, however, that this test\n        // will not work on WIN32 when we switch to\n        // NativeFSLockFactory as the default locking for\n        // FSDirectory because the second IndexWriter cannot\n        // remove those lock files since they are held open\n        // by the first writer.  This is because leaving the\n        // first IndexWriter open is not really a good way\n        // to simulate a crashed writer.\n        \n        // Create a 2nd IndexWriter.  This should not fail:\n        IndexWriter writer2 = null;\n        try {\n            writer2 = new IndexWriter(indexDirName, new WhitespaceAnalyzer(), true,\n                                      IndexWriter.MaxFieldLength.LIMITED);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException with two IndexWriters with create=true, on default SimpleFSLockFactory\");\n        }\n\n        writer.close();\n        if (writer2 != null) {\n          try {\n            writer2.close();\n            // expected\n          } catch (LockReleaseFailedException e) {\n            fail(\"writer2.close() should not have hit LockReleaseFailedException\");\n          }\n        }\n\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"2cf040795587947011604327cf9538e12d298d8b":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["8f7faff7550034759516ce7f4898cd16c1816cde"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"8f7faff7550034759516ce7f4898cd16c1816cde":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["2cf040795587947011604327cf9538e12d298d8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["f118a5ec962b5e2658d313e6f4e6f28faa3bcb39"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8f7faff7550034759516ce7f4898cd16c1816cde"],"2cf040795587947011604327cf9538e12d298d8b":["ede03d537cd6c85c921eb49cdd7fbc49daa602d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f118a5ec962b5e2658d313e6f4e6f28faa3bcb39":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"ede03d537cd6c85c921eb49cdd7fbc49daa602d0":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"8f7faff7550034759516ce7f4898cd16c1816cde":["8ebf3b77e5581d3b403ec1799f461a9b46fc6bf8"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["2cf040795587947011604327cf9538e12d298d8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}