{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"/dev/null","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = termsEnum1.docs(null, dEnum1);\n          dEnum2 = termsEnum2.docs(null, dEnum2);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = termsEnum1.docs(null, dEnum1);\n          dEnum2 = termsEnum2.docs(null, dEnum2);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = termsEnum1.docs(null, dEnum1);\n          dEnum2 = termsEnum2.docs(null, dEnum2);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}