{"path":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","commits":[{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(new BinaryField(\"field\", term));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(new BinaryField(\"field\", term));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(new BinaryField(\"field\", term));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.count(q));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.count(q));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.search(q, 1).totalHits);\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixQuery#testRandomBinaryPrefix().mjava","sourceNew":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(1000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.count(q));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomBinaryPrefix() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    int numTerms = atLeast(10000);\n    Set<BytesRef> terms = new HashSet<>();\n    while (terms.size() < numTerms) {\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 10)];\n      random().nextBytes(bytes);\n      terms.add(new BytesRef(bytes));\n    }\n\n    List<BytesRef> termsList = new ArrayList<>(terms);  \n    Collections.shuffle(termsList, random());\n    for(BytesRef term : termsList) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(100);   \n    for(int iter=0;iter<iters;iter++) {\n      byte[] bytes = new byte[random().nextInt(3)];\n      random().nextBytes(bytes);\n      BytesRef prefix = new BytesRef(bytes);\n      PrefixQuery q = new PrefixQuery(new Term(\"field\", prefix));\n      int count = 0;\n      for(BytesRef term : termsList) {\n        if (StringHelper.startsWith(term, prefix)) {\n          count++;\n        }\n      }\n      assertEquals(count, s.count(q));\n    }\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["804b857d1066ab5185b3b9101bde41b0b71426ec","470eaac3a77cf637b62126a5408b178d7be93eb1"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["804b857d1066ab5185b3b9101bde41b0b71426ec","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}