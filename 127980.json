{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedDeletes).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private deletes=\" + segmentDeletes);  \n      }\n      \n      if (segmentDeletes != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private deletes: \" + segmentDeletes);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      //System.out.println(\"FLUSH: \" + newSegment.segmentInfo.info.name);\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n          indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      SegmentCommitInfo segmentInfo = newSegment.segmentInfo;\n      assert segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(segmentInfo, newSegment.fieldInfos, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      assert newSegment.segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","bugFix":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","7af110b00ea8df9429309d83e38e0533d82e144f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushQueue.FlushTicket#publishFlushedSegment(IndexWriter,FlushedSegment,FrozenBufferedUpdates).mjava","sourceNew":null,"sourceOld":"    /**\n     * Publishes the flushed segment, segment private deletes (if any) and its\n     * associated global delete (if present) to IndexWriter.  The actual\n     * publishing operation is synced on {@code IW -> BDS} so that the {@link SegmentInfo}'s\n     * delete generation is always GlobalPacket_deleteGeneration + 1\n     */\n    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedUpdates globalPacket)\n        throws IOException {\n      assert newSegment != null;\n      SegmentCommitInfo segmentInfo = newSegment.segmentInfo;\n      assert segmentInfo != null;\n      final FrozenBufferedUpdates segmentUpdates = newSegment.segmentUpdates;\n      if (indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"publishFlushedSegment seg-private updates=\" + segmentUpdates);  \n      }\n      \n      if (segmentUpdates != null && indexWriter.infoStream.isEnabled(\"DW\")) {\n        indexWriter.infoStream.message(\"DW\", \"flush: push buffered seg private updates: \" + segmentUpdates);\n      }\n      // now publish!\n      indexWriter.publishFlushedSegment(segmentInfo, newSegment.fieldInfos, segmentUpdates, globalPacket, newSegment.sortMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b8498afacfc8322268ca0d659d274fcce08d557":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15e716649e2bd79a98b5e68c464154ea4c44677a":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b1eb427f2c6beed80d1724555fc1db003ccf3030","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b1eb427f2c6beed80d1724555fc1db003ccf3030","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b8498afacfc8322268ca0d659d274fcce08d557"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"6b8498afacfc8322268ca0d659d274fcce08d557":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["6b8498afacfc8322268ca0d659d274fcce08d557"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}