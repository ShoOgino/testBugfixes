{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context, null);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context, null);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context, null);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c951ef5686e1465970365860afe906395d5ec","date":1335268044,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        return;\n      } catch (Throwable e) {\n        // e.printStackTrace();\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      \n        LeaderElector elector = new LeaderElector(ClientThread.this.zkClient);\n        \n        ElectionContext context = new ShardLeaderElectionContextBase(elector, \"shard1\",\n            \"collection1\", Integer.toString(nodeNumber), props, this.zkStateReader);\n        \n        try {\n          elector.setup(context);\n          seq = elector.joinElection(context);\n          electionDone = true;\n          seqToThread.put(seq, this);\n        } catch (InterruptedException e) {\n          return;\n        } catch (Throwable e) {\n          //e.printStackTrace();\n        }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n        \n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        return;\n      } catch (Throwable e) {\n        // e.printStackTrace();\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n        \n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        return;\n      } catch (Throwable e) {\n        // e.printStackTrace();\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n        \n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        return;\n      } catch (Throwable e) {\n        // e.printStackTrace();\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        \n        if (this.zkClient != null) {\n          this.zkClient.close();\n        }\n        \n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (InterruptedException e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest.ClientThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      }\n\n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        setupOnConnect();\n      } catch (Throwable e) {\n        log.error(\"setup failed\", e);\n        es.close();\n        return;\n      }\n        \n      while (!stop) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"fe3c951ef5686e1465970365860afe906395d5ec":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","9813dd0748537c429b7c0a9b4723ea1ba496c047"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["fe3c951ef5686e1465970365860afe906395d5ec","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["fe3c951ef5686e1465970365860afe906395d5ec","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["fe3c951ef5686e1465970365860afe906395d5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["fe3c951ef5686e1465970365860afe906395d5ec","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"fe3c951ef5686e1465970365860afe906395d5ec":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","3a80994db3380cd78c6f65b84515e2e931b6b3da"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9813dd0748537c429b7c0a9b4723ea1ba496c047","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b05c56a41b733e02a189c48895922b5bd8c7f3d1","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}