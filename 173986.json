{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","commits":[{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9d13460921f3c71f3cb803ee4568f4e0d6b6984","date":1417363521,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          // nocommit need the rest\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45bfb4d30b7e62ec7d645a5e0113362636ac4981","date":1462660573,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          // nocommit need the rest\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          // nocommit need the rest\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e03940e6e9044943de4b7ac08f8581da37a9534","date":1462870173,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          // nocommit need the rest\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics), id, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        sortField[i] = new SortField(field, type, reverse);\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = Arrays.copyOfRange(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68ba24d6f9380e2463dbe5130d27502647f64904","date":1554881362,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, attributes, indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, Collections.unmodifiableMap(diagnostics),\n                                         id, Collections.unmodifiableMap(attributes), indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_NAME);\n        final String provider = readString(SI_SORT_NAME.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_BYTES);\n        BytesRef serializedSort = SimpleTextUtil.fromBytesRefString(readString(SI_SORT_BYTES.length, scratch));\n        final ByteArrayDataInput bytes = new ByteArrayDataInput(serializedSort.bytes, serializedSort.offset, serializedSort.length);\n        sortField[i] = SortFieldProvider.forName(provider).readSortField(bytes);\n        assert bytes.eof();\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, attributes, indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, byte[] segmentID, IOContext context) throws IOException {\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = directory.openChecksumInput(segFileName, context)) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_VERSION);\n      final Version version;\n      try {\n        version = Version.parse(readString(SI_VERSION.length, scratch));\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_MIN_VERSION);\n      Version minVersion;\n      try {\n        String versionString = readString(SI_MIN_VERSION.length, scratch);\n        if (versionString.equals(\"null\")) {\n          minVersion = null;\n        } else {\n          minVersion = Version.parse(versionString);\n        }\n      } catch (ParseException pe) {\n        throw new CorruptIndexException(\"unable to parse version string: \" + pe.getMessage(), input, pe);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_ATT);\n      int numAtt = Integer.parseInt(readString(SI_NUM_ATT.length, scratch));\n      Map<String,String> attributes = new HashMap<>(numAtt);\n\n      for (int i = 0; i < numAtt; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_ID);\n      final byte[] id = ArrayUtil.copyOfSubArray(scratch.bytes(), SI_ID.length, scratch.length());\n      \n      if (!Arrays.equals(segmentID, id)) {\n        throw new CorruptIndexException(\"file mismatch, expected: \" + StringHelper.idToString(segmentID)\n                                                        + \", got: \" + StringHelper.idToString(id), input);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), SI_SORT);\n      final int numSortFields = Integer.parseInt(readString(SI_SORT.length, scratch));\n      SortField[] sortField = new SortField[numSortFields];\n      for (int i = 0; i < numSortFields; ++i) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_FIELD);\n        final String field = readString(SI_SORT_FIELD.length, scratch);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_TYPE);\n        final String typeAsString = readString(SI_SORT_TYPE.length, scratch);\n\n        final SortField.Type type;\n        SortedSetSelector.Type selectorSet = null;\n        SortedNumericSelector.Type selectorNumeric = null;\n        switch (typeAsString) {\n          case \"string\":\n            type = SortField.Type.STRING;\n            break;\n          case \"long\":\n            type = SortField.Type.LONG;\n            break;\n          case \"int\":\n            type = SortField.Type.INT;\n            break;\n          case \"double\":\n            type = SortField.Type.DOUBLE;\n            break;\n          case \"float\":\n            type = SortField.Type.FLOAT;\n            break;\n          case \"multi_valued_string\":\n            type = SortField.Type.STRING;\n            selectorSet = readSetSelector(input, scratch);\n            break;\n          case \"multi_valued_long\":\n            type = SortField.Type.LONG;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_int\":\n            type = SortField.Type.INT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_double\":\n            type = SortField.Type.DOUBLE;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          case \"multi_valued_float\":\n            type = SortField.Type.FLOAT;\n            selectorNumeric = readNumericSelector(input, scratch);\n            break;\n          default:\n            throw new CorruptIndexException(\"unable to parse sort type string: \" + typeAsString, input);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_REVERSE);\n        final boolean reverse = Boolean.parseBoolean(readString(SI_SORT_REVERSE.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SI_SORT_MISSING);\n        final String missingLastAsString = readString(SI_SORT_MISSING.length, scratch);\n        final Object missingValue;\n        switch (type) {\n          case STRING:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              case \"first\":\n                missingValue = SortField.STRING_FIRST;\n                break;\n              case \"last\":\n                missingValue = SortField.STRING_LAST;\n                break;\n              default:\n                throw new CorruptIndexException(\"unable to parse missing string: \" + typeAsString, input);\n            }\n            break;\n          case LONG:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Long.parseLong(missingLastAsString);\n                break;\n            }\n            break;\n          case INT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Integer.parseInt(missingLastAsString);\n                break;\n            }\n            break;\n          case DOUBLE:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Double.parseDouble(missingLastAsString);\n                break;\n            }\n            break;\n          case FLOAT:\n            switch (missingLastAsString) {\n              case \"null\":\n                missingValue = null;\n                break;\n              default:\n                missingValue = Float.parseFloat(missingLastAsString);\n                break;\n            }\n            break;\n          default:\n            throw new AssertionError();\n        }\n        if (selectorSet != null) {\n          sortField[i] = new SortedSetSortField(field, reverse);\n        } else if (selectorNumeric != null) {\n          sortField[i] = new SortedNumericSortField(field, type, reverse);\n        } else {\n          sortField[i] = new SortField(field, type, reverse);\n        }\n        if (missingValue != null) {\n          sortField[i].setMissingValue(missingValue);\n        }\n      }\n      Sort indexSort = sortField.length == 0 ? null : new Sort(sortField);\n\n      SimpleTextUtil.checkFooter(input);\n\n      SegmentInfo info = new SegmentInfo(directory, version, minVersion, segmentName, docCount,\n                                         isCompoundFile, null, diagnostics, id, attributes, indexSort);\n      info.setFiles(files);\n      return info;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad30c6a479e764150a3316e57263319775f1df2":["79700663e164dece87bed4adfd3e28bab6cb1385","3d33e731a93d4b57e662ff094f64f94a745422d4"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["79700663e164dece87bed4adfd3e28bab6cb1385","0ad30c6a479e764150a3316e57263319775f1df2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"68ba24d6f9380e2463dbe5130d27502647f64904":["9798d0818e7a880546802b509792d3f3d57babd2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["68ba24d6f9380e2463dbe5130d27502647f64904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["31741cf1390044e38a2ec3127cf302ba841bfd75","9798d0818e7a880546802b509792d3f3d57babd2"],"79700663e164dece87bed4adfd3e28bab6cb1385":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"299a2348fa24151d150182211b6208a38e5e3450":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["31741cf1390044e38a2ec3127cf302ba841bfd75","9798d0818e7a880546802b509792d3f3d57babd2"],"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["79700663e164dece87bed4adfd3e28bab6cb1385","d470c8182e92b264680e34081b75e70a9f2b3c89"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["e9d13460921f3c71f3cb803ee4568f4e0d6b6984"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["79700663e164dece87bed4adfd3e28bab6cb1385"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3384e6013a93e4d11b7d75388693f8d0388602bf"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["45bfb4d30b7e62ec7d645a5e0113362636ac4981"],"9798d0818e7a880546802b509792d3f3d57babd2":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["79700663e164dece87bed4adfd3e28bab6cb1385","5e03940e6e9044943de4b7ac08f8581da37a9534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"],"e9d13460921f3c71f3cb803ee4568f4e0d6b6984":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","9798d0818e7a880546802b509792d3f3d57babd2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"68ba24d6f9380e2463dbe5130d27502647f64904":["773bf150032d3ef6c95997a154fb914b82875cb8"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["0ad30c6a479e764150a3316e57263319775f1df2","d470c8182e92b264680e34081b75e70a9f2b3c89","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"299a2348fa24151d150182211b6208a38e5e3450":[],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["45bfb4d30b7e62ec7d645a5e0113362636ac4981"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"45bfb4d30b7e62ec7d645a5e0113362636ac4981":["5e03940e6e9044943de4b7ac08f8581da37a9534"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e9d13460921f3c71f3cb803ee4568f4e0d6b6984"],"5e03940e6e9044943de4b7ac08f8581da37a9534":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"9798d0818e7a880546802b509792d3f3d57babd2":["68ba24d6f9380e2463dbe5130d27502647f64904","b70042a8a492f7054d480ccdd2be9796510d4327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e9d13460921f3c71f3cb803ee4568f4e0d6b6984":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","92212fd254551a0b1156aafc3a1a6ed1a43932ad","299a2348fa24151d150182211b6208a38e5e3450","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}