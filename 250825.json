{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap,int).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap, int docIDBase) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      this.docIDBase = docIDBase;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"/dev/null","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null);\n      this.docMap = docMap;\n      long minFP = Long.MAX_VALUE;\n      //System.out.println(\"MR.init \" + this + \" bkdreader=\" + bkd + \" leafBlockFPs.length=\" + bkd.leafBlockFPs.length);\n      for(long fp : bkd.leafBlockFPs) {\n        minFP = Math.min(minFP, fp);\n        //System.out.println(\"  leaf fp=\" + fp);\n      }\n      state.in.seek(minFP);\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDataDims,\n                                           bkd.packedBytesLength,\n                                           bkd.packedIndexBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDims,\n                                           bkd.packedBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#MergeReader(BKDReader,MergeState.DocMap).mjava","sourceNew":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.config,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.config.maxPointsInLeafNode * bkd.config.packedBytesLength];\n    }\n\n","sourceOld":"    public MergeReader(BKDReader bkd, MergeState.DocMap docMap) throws IOException {\n      this.bkd = bkd;\n      state = new BKDReader.IntersectState(bkd.in.clone(),\n                                           bkd.numDataDims,\n                                           bkd.packedBytesLength,\n                                           bkd.packedIndexBytesLength,\n                                           bkd.maxPointsInLeafNode,\n                                           null,\n                                           null);\n      this.docMap = docMap;\n      state.in.seek(bkd.getMinLeafBlockFP());\n      this.packedValues = new byte[bkd.maxPointsInLeafNode * bkd.packedBytesLength];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}