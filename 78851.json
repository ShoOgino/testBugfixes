{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(searcher.getIndexReader(), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e00f80591de714c6975f454e33e0fa5218b5902","date":1294514405,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(Searcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    final Similarity oldSim = searcher.getSimilarity();\n    Scorer spanScorer;\n    try {\n      searcher.setSimilarity(sim);\n      SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered);\n\n      spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n    } finally {\n      searcher.setSimilarity(oldSim);\n    }\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    final Similarity oldSim = searcher.getSimilarity();\n    Scorer spanScorer;\n    try {\n      searcher.setSimilarity(sim);\n      SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered);\n\n      spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n    } finally {\n      searcher.setSimilarity(oldSim);\n    }\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n      };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final Similarity sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final Similarity oldSim = searcher.getSimilarity();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarity(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarity(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    final Similarity oldSim = searcher.getSimilarity();\n    Scorer spanScorer;\n    try {\n      searcher.setSimilarity(sim);\n      SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered);\n\n      spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n    } finally {\n      searcher.setSimilarity(oldSim);\n    }\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":["b9ac0388844fde04af210a292c96559b0f849850"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final Similarity sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final Similarity oldSim = searcher.getSimilarity();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarity(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarity(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    final Similarity oldSim = searcher.getSimilarity();\n    Scorer spanScorer;\n    try {\n      searcher.setSimilarity(sim);\n      SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered);\n\n      spanScorer = snq.weight(searcher).scorer(new AtomicReaderContext(new SlowMultiReaderWrapper(searcher.getIndexReader())), ScorerContext.def());\n    } finally {\n      searcher.setSimilarity(oldSim);\n    }\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n\n    final Similarity sim = new DefaultSimilarity() {\n      @Override\n      public float sloppyFreq(int distance) {\n        return 0.0f;\n      }\n    };\n\n    SpanNearQuery snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"t1\"),\n                                makeSpanTermQuery(\"t2\") },\n                              slop,\n                              ordered) {\n      @Override\n      public Similarity getSimilarity(IndexSearcher s) {\n        return sim;\n      }\n    };\n\n    Scorer spanScorer = snq.weight(searcher).scorer(new SlowMultiReaderWrapper(searcher.getIndexReader()), true, false);\n\n    assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(\"first doc number\", spanScorer.docID(), 11);\n    float score = spanScorer.score();\n    assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n    assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160d004a0e8f5361a446f9d01456aee1c1af20dc","date":1301061642,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = snq.weight(searcher).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader.getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], ScorerContext.def());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader.getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader.getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final Similarity sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final Similarity oldSim = searcher.getSimilarity();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarity(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarity(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final SimilarityProvider sim = new DefaultSimilarityProvider() {\n        public Similarity get(String field) {\n          return new DefaultSimilarity() {\n            @Override\n            public float sloppyFreq(int distance) {\n              return 0.0f;\n            }\n          };\n        }\n      };\n  \n      final SimilarityProvider oldSim = searcher.getSimilarityProvider();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarityProvider(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarityProvider(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanScorerZeroSloppyFreq().mjava","sourceNew":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final Similarity sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final Similarity oldSim = searcher.getSimilarity();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarity(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarity(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSpanScorerZeroSloppyFreq() throws Exception {\n    boolean ordered = true;\n    int slop = 1;\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    int subIndex = ReaderUtil.subIndex(11, leaves);\n    for (int i = 0; i < leaves.length; i++) {\n      \n     \n      final Similarity sim = new DefaultSimilarity() {\n        @Override\n        public float sloppyFreq(int distance) {\n          return 0.0f;\n        }\n      };\n  \n      final Similarity oldSim = searcher.getSimilarity();\n      Scorer spanScorer;\n      try {\n        searcher.setSimilarity(sim);\n        SpanNearQuery snq = new SpanNearQuery(\n                                new SpanQuery[] {\n                                  makeSpanTermQuery(\"t1\"),\n                                  makeSpanTermQuery(\"t2\") },\n                                slop,\n                                ordered);\n  \n        spanScorer = searcher.createNormalizedWeight(snq).scorer(leaves[i], true, false, leaves[i].reader().getLiveDocs());\n      } finally {\n        searcher.setSimilarity(oldSim);\n      }\n      if (i == subIndex) {\n        assertTrue(\"first doc\", spanScorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n        assertEquals(\"first doc number\", spanScorer.docID() + leaves[i].docBase, 11);\n        float score = spanScorer.score();\n        assertTrue(\"first doc score should be zero, \" + score, score == 0.0f);\n      }  else {\n        assertTrue(\"no second doc\", spanScorer.nextDoc() == DocIdSetIterator.NO_MORE_DOCS);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6f7fee42303a18cc146043c96f66491311b345d9"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","51c34a3639838887e7997850b6be80f838a4d6f7"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["3e00f80591de714c6975f454e33e0fa5218b5902"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["160d004a0e8f5361a446f9d01456aee1c1af20dc","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["160d004a0e8f5361a446f9d01456aee1c1af20dc"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c8323d210478d76a02372693d254b69aac614689"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"3e00f80591de714c6975f454e33e0fa5218b5902":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8493985e6883b3fa8231d172694d2aa3a85cb182":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"51c34a3639838887e7997850b6be80f838a4d6f7":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","8493985e6883b3fa8231d172694d2aa3a85cb182"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["51c34a3639838887e7997850b6be80f838a4d6f7"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a2ec9a9068164200de82395f0e8537a9d9302f3f","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d","160d004a0e8f5361a446f9d01456aee1c1af20dc"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"3e00f80591de714c6975f454e33e0fa5218b5902":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["3e00f80591de714c6975f454e33e0fa5218b5902"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","3bb13258feba31ab676502787ab2e1779f129b7a"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["c8323d210478d76a02372693d254b69aac614689","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"160d004a0e8f5361a446f9d01456aee1c1af20dc":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","70ad682703b8585f5d0a637efec044d57ec05efb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}