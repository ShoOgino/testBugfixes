{"path":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.Method#parseJoin(QParser).mjava","commits":[{"id":"83b987bcc75aaccfc3495fcc98472a4402cae7d1","date":1580487661,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin.Method#parseJoin(QParser).mjava","pathOld":"/dev/null","sourceNew":"    JoinParams parseJoin(QParser qparser) throws SyntaxError {\n      final String fromField = qparser.getParam(\"from\");\n      final String fromIndex = qparser.getParam(\"fromIndex\");\n      final String toField = qparser.getParam(\"to\");\n      final String v = qparser.localParams.get(QueryParsing.V);\n      final String coreName;\n\n      Query fromQuery;\n      long fromCoreOpenTime = 0;\n\n      if (fromIndex != null && !fromIndex.equals(qparser.req.getCore().getCoreDescriptor().getName()) ) {\n        CoreContainer container = qparser.req.getCore().getCoreContainer();\n\n        // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n        coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n        final SolrCore fromCore = container.getCore(coreName);\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Cross-core join: no such core \" + coreName);\n        }\n\n        RefCounted<SolrIndexSearcher> fromHolder = null;\n        LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, qparser.params);\n        try {\n          QParser parser = QParser.getParser(v, otherReq);\n          fromQuery = parser.getQuery();\n          fromHolder = fromCore.getRegisteredSearcher();\n          if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n        } finally {\n          otherReq.close();\n          fromCore.close();\n          if (fromHolder != null) fromHolder.decref();\n        }\n      } else {\n        coreName = null;\n        QParser fromQueryParser = qparser.subQuery(v, null);\n        fromQueryParser.setIsFilter(true);\n        fromQuery = fromQueryParser.getQuery();\n      }\n\n      final String indexToUse = coreName == null ? fromIndex : coreName;\n      return new JoinParams(fromField, indexToUse, fromQuery, fromCoreOpenTime, toField);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}