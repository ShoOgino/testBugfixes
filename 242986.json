{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","commits":[{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    Map<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(CP_B.components[0], OrdinalPolicy.ALL_PARENTS);\n    policies.put(CP_C.components[0], OrdinalPolicy.NO_PARENTS);\n    policies.put(CP_D.components[0], OrdinalPolicy.NO_PARENTS);\n    CategoryListParams clp = new PerDimensionOrdinalPolicy(policies);\n    fip = new FacetIndexingParams(clp);\n    \n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts2#beforeClassCountingFacetsAggregatorTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassCountingFacetsAggregatorTest() throws Exception {\n    indexDir = newDirectory();\n    taxoDir = newDirectory();\n    \n    // create an index which has:\n    // 1. Segment with no categories, but matching results\n    // 2. Segment w/ categories, but no results\n    // 3. Segment w/ categories and results\n    // 4. Segment w/ categories, but only some results\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMergePolicy(NoMergePolicy.COMPOUND_FILES); // prevent merges, so we can control the index segments\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n\n    allExpectedCounts = newCounts();\n    termExpectedCounts = newCounts();\n    \n    // segment w/ no categories\n    indexDocsNoFacets(indexWriter);\n\n    // segment w/ categories, no content\n    indexDocsWithFacetsNoTerms(indexWriter, taxoWriter, allExpectedCounts);\n\n    // segment w/ categories and content\n    indexDocsWithFacetsAndTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    // segment w/ categories and some content\n    indexDocsWithFacetsAndSomeTerms(indexWriter, taxoWriter, allExpectedCounts);\n    \n    IOUtils.close(indexWriter, taxoWriter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}