{"path":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","commits":[{"id":"5ec885674566fc1fa7869f52f030c3a4f8d80ab6","date":1247590576,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"/dev/null","sourceNew":"    public void testBoostFactor() throws Throwable {\n\tMap originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = (BooleanClause) clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = (Float) originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"    public void testBoostFactor() throws Throwable {\n\tMap<String,Float> originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause =  clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = (Float) originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","sourceOld":"    public void testBoostFactor() throws Throwable {\n\tMap originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause = (BooleanClause) clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = (Float) originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"    public void testBoostFactor() throws Throwable {\n\tMap<String,Float> originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause =  clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","sourceOld":"    public void testBoostFactor() throws Throwable {\n\tMap<String,Float> originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause =  clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = (Float) originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/similar/TestMoreLikeThis#testBoostFactor().mjava","sourceNew":"    public void testBoostFactor() throws Throwable {\n\tMap<String,Float> originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause =  clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","sourceOld":"    public void testBoostFactor() throws Throwable {\n\tMap<String,Float> originalValues = getOriginalValues();\n\n\tMoreLikeThis mlt = new MoreLikeThis(\n\t\treader);\n\tmlt.setMinDocFreq(1);\n\tmlt.setMinTermFreq(1);\n\tmlt.setMinWordLen(1);\n\tmlt.setFieldNames(new String[] { \"text\" });\n\tmlt.setBoost(true);\n\n\t// this mean that every term boost factor will be multiplied by this\n\t// number\n\tfloat boostFactor = 5;\n\tmlt.setBoostFactor(boostFactor);\n\n\tBooleanQuery query = (BooleanQuery) mlt.like(new StringReader(\n\t\t\"lucene release\"));\n\tList<BooleanClause> clauses = query.clauses();\n\n\tassertEquals(\"Expected \" + originalValues.size() + \" clauses.\",\n\t\toriginalValues.size(), clauses.size());\n\n\tfor (int i = 0; i < clauses.size(); i++) {\n\t    BooleanClause clause =  clauses.get(i);\n\t    TermQuery tq = (TermQuery) clause.getQuery();\n\t    Float termBoost = originalValues.get(tq.getTerm().text());\n\t    assertNotNull(\"Expected term \" + tq.getTerm().text(), termBoost);\n\n\t    float totalBoost = termBoost.floatValue() * boostFactor;\n\t    assertEquals(\"Expected boost of \" + totalBoost + \" for term '\"\n                         + tq.getTerm().text() + \"' got \" + tq.getBoost(),\n                         totalBoost, tq.getBoost(), 0.0001);\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ec885674566fc1fa7869f52f030c3a4f8d80ab6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["5ec885674566fc1fa7869f52f030c3a4f8d80ab6"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ec885674566fc1fa7869f52f030c3a4f8d80ab6"],"5ec885674566fc1fa7869f52f030c3a4f8d80ab6":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}