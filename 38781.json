{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","commits":[{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","sourceNew":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      BytesRef newMatchTerms[] = new BytesRef[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c4afdffb7d4d205fdfe74efe460188a6197f19","date":1366654186,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      BytesRef newMatchTerms[] = new BytesRef[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a","4831dd345148fcd7c33877b449ade21fc45459d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,BytesRef).mjava","sourceNew":null,"sourceOld":"  void addMatch(int startOffset, int endOffset, BytesRef term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      int newLength = ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n      int newMatchStarts[] = new int[newLength];\n      int newMatchEnds[] = new int[newLength];\n      BytesRef newMatchTerms[] = new BytesRef[newLength];\n      System.arraycopy(matchStarts, 0, newMatchStarts, 0, numMatches);\n      System.arraycopy(matchEnds, 0, newMatchEnds, 0, numMatches);\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchStarts = newMatchStarts;\n      matchEnds = newMatchEnds;\n      matchTerms = newMatchTerms;\n    }\n    assert matchStarts.length == matchEnds.length && matchEnds.length == matchTerms.length;\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["56c4afdffb7d4d205fdfe74efe460188a6197f19"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["56c4afdffb7d4d205fdfe74efe460188a6197f19","381618eac2691bb34ab9a3fca76ad55c6274517e"],"56c4afdffb7d4d205fdfe74efe460188a6197f19":["4831dd345148fcd7c33877b449ade21fc45459d8"],"4831dd345148fcd7c33877b449ade21fc45459d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"56c4afdffb7d4d205fdfe74efe460188a6197f19":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4831dd345148fcd7c33877b449ade21fc45459d8":["56c4afdffb7d4d205fdfe74efe460188a6197f19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}