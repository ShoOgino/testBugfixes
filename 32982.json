{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a48f7cd0244240f18c36f7c896eef3855b714195","date":1498549683,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"face217c60f59b356129804dd0f7508779078fe3","date":1498692025,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = (Map) eventContextRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7427c059f8ca782712a1bb2e67ff3a56c6d20162","date":1499216619,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69","date":1499219089,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d8e6696ad139aa0f0bfe30fb4e933b38530f214","date":1507644775,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getDataProviderState(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":["101645ef3f7b3be12940241226f9e1636541aadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101645ef3f7b3be12940241226f9e1636541aadc","date":1507815822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getDataProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getDataProviderState(), operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getDataProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2).setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeAdded().mjava","sourceNew":null,"sourceOld":"  @Test\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testNodeAdded() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    JettySolrRunner runner = cluster.startJettySolrRunner();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation\", 1, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", runner.getNodeName(), nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["face217c60f59b356129804dd0f7508779078fe3"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["101645ef3f7b3be12940241226f9e1636541aadc"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["89948af0461fead48f44ba8fb7866f107ce83f22"],"face217c60f59b356129804dd0f7508779078fe3":["a48f7cd0244240f18c36f7c896eef3855b714195"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["e0d9c88546c1a130d50b56981790d87a308daffd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d9c88546c1a130d50b56981790d87a308daffd":["face217c60f59b356129804dd0f7508779078fe3","dedb25ff3e9aec15179700ba9e9d2d7b2e70af69"],"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69":["7427c059f8ca782712a1bb2e67ff3a56c6d20162"],"89948af0461fead48f44ba8fb7866f107ce83f22":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"101645ef3f7b3be12940241226f9e1636541aadc":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a48f7cd0244240f18c36f7c896eef3855b714195":["1f6b20dc453cee198956989b90aa24bef0232bcf"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["89948af0461fead48f44ba8fb7866f107ce83f22"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["101645ef3f7b3be12940241226f9e1636541aadc"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["dedb25ff3e9aec15179700ba9e9d2d7b2e70af69"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"face217c60f59b356129804dd0f7508779078fe3":["7427c059f8ca782712a1bb2e67ff3a56c6d20162","e0d9c88546c1a130d50b56981790d87a308daffd"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"e0d9c88546c1a130d50b56981790d87a308daffd":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a48f7cd0244240f18c36f7c896eef3855b714195"],"dedb25ff3e9aec15179700ba9e9d2d7b2e70af69":["e0d9c88546c1a130d50b56981790d87a308daffd"],"101645ef3f7b3be12940241226f9e1636541aadc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a48f7cd0244240f18c36f7c896eef3855b714195":["face217c60f59b356129804dd0f7508779078fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}