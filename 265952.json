{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,LeafReader,SortedSetDocValues,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,LeafReader,SortedSetDocValues,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, LeafReader reader, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          if (dv instanceof RandomAccessOrds) {\n            long ord2 = ((RandomAccessOrds)dv).ordAt(ordCount);\n            if (ord != ord2) {\n              throw new RuntimeException(\"ordAt(\" + ordCount + \") inconsistent, expected=\" + ord + \",got=\" + ord2 + \" for doc: \" + i);\n            }\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n          ordCount++;\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount != ordCount2) {\n            throw new RuntimeException(\"cardinality inconsistent, expected=\" + ordCount + \",got=\" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount2 != 0) {\n            throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has cardinality \" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,LeafReader,SortedSetDocValues,Bits).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < maxDoc; i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          if (dv instanceof RandomAccessOrds) {\n            long ord2 = ((RandomAccessOrds)dv).ordAt(ordCount);\n            if (ord != ord2) {\n              throw new RuntimeException(\"ordAt(\" + ordCount + \") inconsistent, expected=\" + ord + \",got=\" + ord2 + \" for doc: \" + i);\n            }\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n          ordCount++;\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount != ordCount2) {\n            throw new RuntimeException(\"cardinality inconsistent, expected=\" + ordCount + \",got=\" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount2 != 0) {\n            throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has cardinality \" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, LeafReader reader, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          if (dv instanceof RandomAccessOrds) {\n            long ord2 = ((RandomAccessOrds)dv).ordAt(ordCount);\n            if (ord != ord2) {\n              throw new RuntimeException(\"ordAt(\" + ordCount + \") inconsistent, expected=\" + ord + \",got=\" + ord2 + \" for doc: \" + i);\n            }\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n          ordCount++;\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount != ordCount2) {\n            throw new RuntimeException(\"cardinality inconsistent, expected=\" + ordCount + \",got=\" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount2 != 0) {\n            throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has cardinality \" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,LeafReader,SortedSetDocValues,Bits).mjava","sourceNew":null,"sourceOld":"  private static void checkSortedSetDocValues(String fieldName, LeafReader reader, SortedSetDocValues dv, Bits docsWithField) {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.setDocument(i);\n      long lastOrd = -1;\n      long ord;\n      if (docsWithField.get(i)) {\n        int ordCount = 0;\n        while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          if (ord <= lastOrd) {\n            throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + i);\n          }\n          if (ord < 0 || ord > maxOrd) {\n            throw new RuntimeException(\"ord out of bounds: \" + ord);\n          }\n          if (dv instanceof RandomAccessOrds) {\n            long ord2 = ((RandomAccessOrds)dv).ordAt(ordCount);\n            if (ord != ord2) {\n              throw new RuntimeException(\"ordAt(\" + ordCount + \") inconsistent, expected=\" + ord + \",got=\" + ord2 + \" for doc: \" + i);\n            }\n          }\n          lastOrd = ord;\n          maxOrd2 = Math.max(maxOrd2, ord);\n          seenOrds.set(ord);\n          ordCount++;\n        }\n        if (ordCount == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has no ordinals but is not marked missing for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount != ordCount2) {\n            throw new RuntimeException(\"cardinality inconsistent, expected=\" + ordCount + \",got=\" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      } else {\n        long o = dv.nextOrd();\n        if (o != SortedSetDocValues.NO_MORE_ORDS) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has ord=\" + o + \" for doc: \" + i);\n        }\n        if (dv instanceof RandomAccessOrds) {\n          long ordCount2 = ((RandomAccessOrds)dv).cardinality();\n          if (ordCount2 != 0) {\n            throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has cardinality \" + ordCount2 + \" for doc: \" + i);\n          }\n        }\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"]},"commit2Childs":{"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}