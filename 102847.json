{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiIndexDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          if (direct) {\n            current = docValuesIdx[idx].docValues.getDirectSource();\n          } else {\n            current = docValuesIdx[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          if (direct) {\n            current = docValuesIdx[idx].docValues.getDirectSource();\n          } else {\n            current = docValuesIdx[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          if (direct) {\n            current = docValuesIdx[idx].docValues.getDirectSource();\n          } else {\n            current = docValuesIdx[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/MultiIndexDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < docValuesIdx.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert docValuesIdx[idx] != null;\n        try {\n          if (direct) {\n            current = docValuesIdx[idx].docValues.getDirectSource();\n          } else {\n            current = docValuesIdx[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = docValuesIdx[idx].start;\n        numDocs = docValuesIdx[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues.MultiSource#ensureSource(int).mjava","sourceNew":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","sourceOld":"    private final int ensureSource(int docID) {\n      if (docID >= start && docID < start+numDocs) {\n        return docID - start;\n      } else {\n        final int idx = ReaderUtil.subIndex(docID, starts);\n        assert idx >= 0 && idx < slices.length : \"idx was \" + idx\n            + \" for doc id: \" + docID + \" slices : \" + Arrays.toString(starts);\n        assert slices[idx] != null;\n        try {\n          if (direct) {\n            current = slices[idx].docValues.getDirectSource();\n          } else {\n            current = slices[idx].docValues.getSource();\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\"load failed\", e); // TODO how should we\n          // handle this\n        }\n\n        start = slices[idx].start;\n        numDocs = slices[idx].length;\n        return docID - start;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cac4d5fa6c305b94f6232a70bda07f096ad0348c"]},"commit2Childs":{"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}