{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<String,TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(fieldsToFlush, state, sortMap);\n\n    // Gather all fields that saw any postings:\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<>();\n\n    for (TermsHashPerField f : fieldsToFlush.values()) {\n      final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n      if (perField.bytesHash.size() > 0) {\n        perField.sortPostings();\n        assert perField.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    CollectionUtil.introSort(allFields);\n\n    Fields fields = new FreqProxFields(allFields);\n    applyDeletes(state, fields);\n    if (sortMap != null) {\n      fields = new SortingLeafReader.SortingFields(fields, state.fieldInfos, sortMap);\n    }\n\n    FieldsConsumer consumer = state.segmentInfo.getCodec().postingsFormat().fieldsConsumer(state);\n    boolean success = false;\n    try {\n      consumer.write(fields);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<String,TermsHashPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    super.flush(fieldsToFlush, state);\n\n    // Gather all fields that saw any postings:\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<>();\n\n    for (TermsHashPerField f : fieldsToFlush.values()) {\n      final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n      if (perField.bytesHash.size() > 0) {\n        perField.sortPostings();\n        assert perField.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    CollectionUtil.introSort(allFields);\n\n    Fields fields = new FreqProxFields(allFields);\n\n    applyDeletes(state, fields);\n\n    FieldsConsumer consumer = state.segmentInfo.getCodec().postingsFormat().fieldsConsumer(state);\n    boolean success = false;\n    try {\n      consumer.write(fields);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(Map<String,TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(fieldsToFlush, state, sortMap);\n\n    // Gather all fields that saw any postings:\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<>();\n\n    for (TermsHashPerField f : fieldsToFlush.values()) {\n      final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n      if (perField.bytesHash.size() > 0) {\n        perField.sortPostings();\n        assert perField.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    CollectionUtil.introSort(allFields);\n\n    Fields fields = new FreqProxFields(allFields);\n    applyDeletes(state, fields);\n    if (sortMap != null) {\n      fields = new SortingLeafReader.SortingFields(fields, state.fieldInfos, sortMap);\n    }\n\n    FieldsConsumer consumer = state.segmentInfo.getCodec().postingsFormat().fieldsConsumer(state);\n    boolean success = false;\n    try {\n      consumer.write(fields);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  public void flush(Map<String,TermsHashPerField> fieldsToFlush, final SegmentWriteState state,\n      Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    super.flush(fieldsToFlush, state, sortMap, norms);\n\n    // Gather all fields that saw any postings:\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<>();\n\n    for (TermsHashPerField f : fieldsToFlush.values()) {\n      final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n      if (perField.bytesHash.size() > 0) {\n        perField.sortPostings();\n        assert perField.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    CollectionUtil.introSort(allFields);\n\n    Fields fields = new FreqProxFields(allFields);\n    applyDeletes(state, fields);\n    if (sortMap != null) {\n      fields = new SortingLeafReader.SortingFields(fields, state.fieldInfos, sortMap);\n    }\n\n    FieldsConsumer consumer = state.segmentInfo.getCodec().postingsFormat().fieldsConsumer(state);\n    boolean success = false;\n    try {\n      consumer.write(fields, norms);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<String,TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    super.flush(fieldsToFlush, state, sortMap);\n\n    // Gather all fields that saw any postings:\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<>();\n\n    for (TermsHashPerField f : fieldsToFlush.values()) {\n      final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n      if (perField.bytesHash.size() > 0) {\n        perField.sortPostings();\n        assert perField.fieldInfo.getIndexOptions() != IndexOptions.NONE;\n        allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    CollectionUtil.introSort(allFields);\n\n    Fields fields = new FreqProxFields(allFields);\n    applyDeletes(state, fields);\n    if (sortMap != null) {\n      fields = new SortingLeafReader.SortingFields(fields, state.fieldInfos, sortMap);\n    }\n\n    FieldsConsumer consumer = state.segmentInfo.getCodec().postingsFormat().fieldsConsumer(state);\n    boolean success = false;\n    try {\n      consumer.write(fields);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}