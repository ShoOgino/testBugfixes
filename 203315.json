{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#splitOn(String,char).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#splitOn(String,char).mjava","pathOld":"/dev/null","sourceNew":"  /* Returns a list of the tokens found. Assumed to be of the form\n   * 'foo bar baz' and not of the for '(foo bar baz)'\n   * 'foo bar (baz jaz)' is ok and will return three tokens of\n   * 'foo', 'bar', and '(baz jaz)'\n   */\n  private static List<String> splitOn(String clause, char splitOnThis){\n    String working = clause.trim();\n    \n    List<String> parts = new ArrayList<String>();\n    \n    while(true){ // will break when next splitOnThis isn't found\n      int nextIdx = findNextClear(working, 0, splitOnThis);\n      \n      if(nextIdx < 0){\n        parts.add(working);\n        break;\n      }\n      \n      parts.add(working.substring(0, nextIdx));\n      \n      // handle ending splitOnThis\n      if(nextIdx+1 == working.length()){\n        break;\n      }\n      \n      working = working.substring(nextIdx + 1).trim();      \n    }\n    \n    return parts;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#splitOn(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamExpressionParser#splitOn(String,char).mjava","sourceNew":"  /* Returns a list of the tokens found. Assumed to be of the form\n   * 'foo bar baz' and not of the for '(foo bar baz)'\n   * 'foo bar (baz jaz)' is ok and will return three tokens of\n   * 'foo', 'bar', and '(baz jaz)'\n   */\n  private static List<String> splitOn(String clause, char splitOnThis){\n    String working = clause.trim();\n\n    List<String> parts = new ArrayList<String>();\n\n    while(true){ // will break when next splitOnThis isn't found\n      int nextIdx = findNextClear(working, 0, splitOnThis);\n\n      if(nextIdx < 0){\n        parts.add(working);\n        break;\n      }\n\n      parts.add(working.substring(0, nextIdx));\n\n      // handle ending splitOnThis\n      if(nextIdx+1 == working.length()){\n        break;\n      }\n\n      working = working.substring(nextIdx + 1).trim();\n    }\n\n    return parts;\n  }\n\n","sourceOld":"  /* Returns a list of the tokens found. Assumed to be of the form\n   * 'foo bar baz' and not of the for '(foo bar baz)'\n   * 'foo bar (baz jaz)' is ok and will return three tokens of\n   * 'foo', 'bar', and '(baz jaz)'\n   */\n  private static List<String> splitOn(String clause, char splitOnThis){\n    String working = clause.trim();\n    \n    List<String> parts = new ArrayList<String>();\n    \n    while(true){ // will break when next splitOnThis isn't found\n      int nextIdx = findNextClear(working, 0, splitOnThis);\n      \n      if(nextIdx < 0){\n        parts.add(working);\n        break;\n      }\n      \n      parts.add(working.substring(0, nextIdx));\n      \n      // handle ending splitOnThis\n      if(nextIdx+1 == working.length()){\n        break;\n      }\n      \n      working = working.substring(nextIdx + 1).trim();      \n    }\n    \n    return parts;\n  }\n\n","bugFix":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0370d6fb5289875090a50a9d0887ee584fed440"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0370d6fb5289875090a50a9d0887ee584fed440"],"a0370d6fb5289875090a50a9d0887ee584fed440":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}