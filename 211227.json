{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,boolean,DocIdSet).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,boolean,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.FilterStrategy#filteredBulkScorer(LeafReaderContext,Weight,boolean,DocIdSet).mjava","sourceNew":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","sourceOld":"    /**\n     * Returns a filtered {@link BulkScorer} based on this\n     * strategy.  This is an optional method: the default\n     * implementation just calls {@link #filteredScorer} and\n     * wraps that into a BulkScorer.\n     *\n     * @param context\n     *          the {@link org.apache.lucene.index.LeafReaderContext} for which to return the {@link Scorer}.\n     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.\n     * @param docIdSet the filter {@link DocIdSet} to apply\n     * @return a filtered top scorer\n     */\n    public BulkScorer filteredBulkScorer(LeafReaderContext context,\n        Weight weight, boolean scoreDocsInOrder, DocIdSet docIdSet) throws IOException {\n      Scorer scorer = filteredScorer(context, weight, docIdSet);\n      if (scorer == null) {\n        return null;\n      }\n      // This impl always scores docs in order, so we can\n      // ignore scoreDocsInOrder:\n      return new Weight.DefaultBulkScorer(scorer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}