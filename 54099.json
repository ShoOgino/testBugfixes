{"path":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      StoredDocument document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      StoredDocument document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      StoredDocument document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, null, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      StoredDocument document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDateSort#testReverseDateSort().mjava","sourceNew":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      Document document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","sourceOld":"  public void testReverseDateSort() throws Exception {\n    IndexSearcher searcher = newSearcher(reader);\n\n    Sort sort = new Sort(new SortField(DATE_TIME_FIELD, SortField.Type.STRING, true));\n    Query query = new TermQuery(new Term(TEXT_FIELD, \"document\"));\n\n    // Execute the search and process the search results.\n    String[] actualOrder = new String[5];\n    ScoreDoc[] hits = searcher.search(query, 1000, sort).scoreDocs;\n    for (int i = 0; i < hits.length; i++) {\n      StoredDocument document = searcher.doc(hits[i].doc);\n      String text = document.get(TEXT_FIELD);\n      actualOrder[i] = text;\n    }\n\n    // Set up the expected order (i.e. Document 5, 4, 3, 2, 1).\n    String[] expectedOrder = new String[5];\n    expectedOrder[0] = \"Document 5\";\n    expectedOrder[1] = \"Document 4\";\n    expectedOrder[2] = \"Document 3\";\n    expectedOrder[3] = \"Document 2\";\n    expectedOrder[4] = \"Document 1\";\n\n    assertEquals(Arrays.asList(expectedOrder), Arrays.asList(actualOrder));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}