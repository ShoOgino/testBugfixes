{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#setupCluster().mjava","commits":[{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    } else {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9da56b84a0d4f06aef33a535c0259963bac367","date":1521469010,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    } else {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    } else {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#setupCluster().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    if (random().nextBoolean()) {\n      cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n      solrClient = cluster.getSolrClient();\n    } else {\n      cloudManager = SimCloudManager.createCluster(1, TimeSource.get(\"simTime:50\"));\n      // wait for defaults to be applied - due to accelerated time sometimes we may miss this\n      cloudManager.getTimeSource().sleep(10000);\n      AutoScalingConfig cfg = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      assertFalse(\"autoscaling config is empty\", cfg.isEmpty());\n      solrClient = ((SimCloudManager)cloudManager).simGetSolrClient();\n    }\n    timeSource = cloudManager.getTimeSource();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c6c0dad4932399aec99b4818086cb1772773916":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["8b9da56b84a0d4f06aef33a535c0259963bac367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b9da56b84a0d4f06aef33a535c0259963bac367":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9c6c0dad4932399aec99b4818086cb1772773916":["8b9da56b84a0d4f06aef33a535c0259963bac367"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c6c0dad4932399aec99b4818086cb1772773916"],"8b9da56b84a0d4f06aef33a535c0259963bac367":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}