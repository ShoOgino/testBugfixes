{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","commits":[{"id":"8735477f53284dd67c6335828378cadf20cddabc","date":1365956061,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    indexr(\"id\", id);\n\n    // todo - hook in custom hashing\n    byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n    int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a210f1d2b92061ebb3aa94c7b28c0c171e3c7430","date":1366004361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","sourceNew":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    boolean success = true;\n    try {\n      indexr(\"id\", id);\n    } catch (SolrServerException e) {\n      if (!e.getMessage().startsWith(\"No live SolrServers available to handle this request\"))  {\n        success = false;\n        log.error(\"Exception while adding doc\", e);\n      } else  {\n        // Error is recoverable because the proxy node will store the request in its log and\n        // it will be retried later and sent to the leader\n        log.warn(\"Counting doc: \" + id + \" because error is recoverable\", e);\n      }\n    } finally {\n      if (success)  {\n        // todo - hook in custom hashing\n        byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n        int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n        for (int i = 0; i < ranges.size(); i++) {\n          DocRouter.Range range = ranges.get(i);\n          if (range.includes(hash))\n            docCounts[i]++;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    indexr(\"id\", id);\n\n    // todo - hook in custom hashing\n    byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n    int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ea000aa404bb989af8d789d499c0f6c5ddc73a","date":1366115210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","sourceNew":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    indexr(\"id\", id);\n\n    // todo - hook in custom hashing\n    byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n    int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","sourceOld":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    boolean success = true;\n    try {\n      indexr(\"id\", id);\n    } catch (SolrServerException e) {\n      if (!e.getMessage().startsWith(\"No live SolrServers available to handle this request\"))  {\n        success = false;\n        log.error(\"Exception while adding doc\", e);\n      } else  {\n        // Error is recoverable because the proxy node will store the request in its log and\n        // it will be retried later and sent to the leader\n        log.warn(\"Counting doc: \" + id + \" because error is recoverable\", e);\n      }\n    } finally {\n      if (success)  {\n        // todo - hook in custom hashing\n        byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n        int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n        for (int i = 0; i < ranges.size(); i++) {\n          DocRouter.Range range = ranges.get(i);\n          if (range.includes(hash))\n            docCounts[i]++;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dbed1dd58810b079506c1e4cd13ce80e646faed","date":1368050251,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(DocRouter,List[DocRouter.Range],int[],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#indexAndUpdateCount(List[DocRouter.Range],int[],int).mjava","sourceNew":"  protected void indexAndUpdateCount(DocRouter router, List<DocRouter.Range> ranges, int[] docCounts, String id) throws Exception {\n    index(\"id\", id);\n\n    int hash = 0;\n    if (router instanceof HashBasedRouter) {\n      HashBasedRouter hashBasedRouter = (HashBasedRouter) router;\n      hash = hashBasedRouter.sliceHash(id, null, null);\n    }\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","sourceOld":"  protected void indexAndUpdateCount(List<DocRouter.Range> ranges, int[] docCounts, int id) throws Exception {\n    indexr(\"id\", id);\n\n    // todo - hook in custom hashing\n    byte[] bytes = String.valueOf(id).getBytes(\"UTF-8\");\n    int hash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    for (int i = 0; i < ranges.size(); i++) {\n      DocRouter.Range range = ranges.get(i);\n      if (range.includes(hash))\n        docCounts[i]++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dbed1dd58810b079506c1e4cd13ce80e646faed":["f5ea000aa404bb989af8d789d499c0f6c5ddc73a"],"f5ea000aa404bb989af8d789d499c0f6c5ddc73a":["a210f1d2b92061ebb3aa94c7b28c0c171e3c7430"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a210f1d2b92061ebb3aa94c7b28c0c171e3c7430":["8735477f53284dd67c6335828378cadf20cddabc"],"8735477f53284dd67c6335828378cadf20cddabc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dbed1dd58810b079506c1e4cd13ce80e646faed"]},"commit2Childs":{"2dbed1dd58810b079506c1e4cd13ce80e646faed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5ea000aa404bb989af8d789d499c0f6c5ddc73a":["2dbed1dd58810b079506c1e4cd13ce80e646faed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8735477f53284dd67c6335828378cadf20cddabc"],"a210f1d2b92061ebb3aa94c7b28c0c171e3c7430":["f5ea000aa404bb989af8d789d499c0f6c5ddc73a"],"8735477f53284dd67c6335828378cadf20cddabc":["a210f1d2b92061ebb3aa94c7b28c0c171e3c7430"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}