{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","commits":[{"id":"28bce66b0b769a7827b1f4df30b3f50a2ed6c355","date":1347720564,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"/dev/null","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#checkValueSource(ValueSource,float[],float).mjava","sourceNew":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","sourceOld":"  /** scores[] are in docId order */\n  protected void checkValueSource(ValueSource vs, float scores[], float delta) throws IOException {\n    FunctionQuery q = new FunctionQuery(vs);\n\n//    //TODO is there any point to this check?\n//    int expectedDocs[] = new int[scores.length];//fill with ascending 0....length-1\n//    for (int i = 0; i < expectedDocs.length; i++) {\n//      expectedDocs[i] = i;\n//    }\n//    CheckHits.checkHits(random(), q, \"\", indexSearcher, expectedDocs);\n\n    //TopDocs is sorted but we actually don't care about the order\n    TopDocs docs = indexSearcher.search(q, 1000);//calculates the score\n    for (int i = 0; i < docs.scoreDocs.length; i++) {\n      ScoreDoc gotSD = docs.scoreDocs[i];\n      float expectedScore = scores[gotSD.doc];\n      assertEquals(\"Not equal for doc \"+gotSD.doc, expectedScore, gotSD.score, delta);\n    }\n\n    CheckHits.checkExplanations(q, \"\", indexSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["0521546db127e358ced1772a9d696dbdd255b203","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["0521546db127e358ced1772a9d696dbdd255b203"],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0521546db127e358ced1772a9d696dbdd255b203":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28bce66b0b769a7827b1f4df30b3f50a2ed6c355"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"28bce66b0b769a7827b1f4df30b3f50a2ed6c355":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}