{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","commits":[{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","sourceNew":"  @Override @Slow\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","sourceOld":"  @Override\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","sourceNew":"  @Override @Nightly\n  // TODO: this test has bugs that prevent you from lowering the number of docs in the test!\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","sourceOld":"  @Override @Slow\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cddcfccab27b3211b29120b51033ab04e569ff9","date":1580914291,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testSimulateUpdates().mjava","sourceNew":"  @Override\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    int numDocs = TEST_NIGHTLY ? atLeast(10_000_000) : atLeast(1_000_000);\n    doTestSimulateUpdates(mergePolicy, numDocs, 2500);\n  }\n\n","sourceOld":"  @Override @Nightly\n  // TODO: this test has bugs that prevent you from lowering the number of docs in the test!\n  public void testSimulateUpdates() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    // Avoid low values of the max merged segment size which prevent this merge policy from scaling well\n    mergePolicy.setMaxMergedSegmentMB(TestUtil.nextInt(random(), 1024, 10 * 1024));\n    doTestSimulateUpdates(mergePolicy, 10_000_000, 2500);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"da0d58b6bf72ebfd4d6722289ea725809c20c987":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"1cddcfccab27b3211b29120b51033ab04e569ff9":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1cddcfccab27b3211b29120b51033ab04e569ff9"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"da0d58b6bf72ebfd4d6722289ea725809c20c987":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da0d58b6bf72ebfd4d6722289ea725809c20c987","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["1cddcfccab27b3211b29120b51033ab04e569ff9"],"1cddcfccab27b3211b29120b51033ab04e569ff9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}