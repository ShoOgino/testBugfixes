{"path":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","commits":[{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,IndexSearcher,String,TermContext).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, IndexSearcher searcher,\n      String fieldName, TermContext termContext) throws IOException {\n    IndexReader reader = searcher.getIndexReader();\n    int numberOfDocuments = reader.maxDoc();\n    \n    int docFreq = termContext.docFreq();\n    long totalTermFreq = termContext.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n    \n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), fieldName);\n    if (terms == null) {\n      // field does not exist;\n      numberOfFieldTokens = 0;\n      avgFieldLength = 1;\n    } else {\n      long sumTotalTermFreq = terms.getSumTotalTermFreq();\n\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      if (sumTotalTermFreq == -1) {\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1;\n      } else {\n        numberOfFieldTokens = sumTotalTermFreq;\n        avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n      }\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e03f44b45336edd453b051c625896b1efd1036","date":1327499968,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    assert termStats.totalTermFreq() >= -1;\n    assert termStats.totalTermFreq() == -1 || termStats.totalTermFreq() >= termStats.docFreq();\n    assert collectionStats.sumTotalTermFreq() >= -1;\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c546021ffb4e623a6242cd68ee234c17d3ba6646","date":1327501518,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    assert termStats.totalTermFreq() >= -1;\n    assert termStats.totalTermFreq() == -1 || termStats.totalTermFreq() >= termStats.docFreq();\n    assert collectionStats.sumTotalTermFreq() >= -1;\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64aaeb7d6606aeec15dd381453d66caedda7888b","date":1327669445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    // #positions(field) must be >= #positions(term)\n    assert collectionStats.sumTotalTermFreq() == -1 || collectionStats.sumTotalTermFreq() >= termStats.totalTermFreq();\n    long numberOfDocuments = collectionStats.maxDoc();\n    \n    long docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c546021ffb4e623a6242cd68ee234c17d3ba6646":["97e03f44b45336edd453b051c625896b1efd1036"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","64aaeb7d6606aeec15dd381453d66caedda7888b"],"64aaeb7d6606aeec15dd381453d66caedda7888b":["c546021ffb4e623a6242cd68ee234c17d3ba6646"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","c546021ffb4e623a6242cd68ee234c17d3ba6646"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["64aaeb7d6606aeec15dd381453d66caedda7888b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","64aaeb7d6606aeec15dd381453d66caedda7888b"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","c546021ffb4e623a6242cd68ee234c17d3ba6646"],"97e03f44b45336edd453b051c625896b1efd1036":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c546021ffb4e623a6242cd68ee234c17d3ba6646":["64aaeb7d6606aeec15dd381453d66caedda7888b","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"64aaeb7d6606aeec15dd381453d66caedda7888b":["78a55f24d9b493c2a1cecf79f1d78279062b545b","3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","97e03f44b45336edd453b051c625896b1efd1036"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"97e03f44b45336edd453b051c625896b1efd1036":["c546021ffb4e623a6242cd68ee234c17d3ba6646"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}