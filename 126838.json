{"path":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Long> intDate = (ArrayList<Long>)xmlToList(intDateFacet, \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(intDate,intDateTest);\n    //Int String\n    String intStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");      \n    Collection<Long> intString = (ArrayList<Long>)xmlToList(intStringFacet, \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(intString,intStringTest);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");      \n    Collection<Long> longDate = (ArrayList<Long>)xmlToList(longDateFacet, \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(longDate,longDateTest);\n    //Long String\n    String longStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> longString = (ArrayList<Long>)xmlToList(longStringFacet, \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(longString,longStringTest);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> floatDate = (ArrayList<Long>)xmlToList(floatDateFacet, \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(floatDate,floatDateTest);\n    //Float String\n    String floatStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> floatString = (ArrayList<Long>)xmlToList(floatStringFacet, \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(floatString,floatStringTest);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> doubleDate = (ArrayList<Long>)xmlToList(doubleDateFacet, \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(doubleDate,doubleDateTest);\n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> doubleString = (ArrayList<Long>)xmlToList(doubleStringFacet, \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(doubleString,doubleStringTest);\n\n    //Date Int\n    String dateIntFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"int_id\");    \n    Collection<Long> dateInt = (ArrayList<Long>)xmlToList(dateIntFacet, \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(dateInt,dateIntTest);\n    //Date Long\n    String dateStringFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"long_ld\");     \n    Collection<Long> dateString = (ArrayList<Long>)xmlToList(dateStringFacet, \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(dateString,dateLongTest);\n\n    //String Int\n    String stringIntFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"int_id\");   \n    Collection<Long> stringInt = (ArrayList<Long>)xmlToList(stringIntFacet, \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(stringInt,stringIntTest);\n    //String Long\n    String stringLongFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"long_ld\");    \n    Collection<Long> stringLong = (ArrayList<Long>)xmlToList(stringLongFacet, \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(stringLong,stringLongTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c0586e0570de2261142e339891d57c0f36f45c6","date":1385565864,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Long> intString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Long> floatString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Long> doubleString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<Long> dateString = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<Long> stringLong = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    String intDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");    \n    Collection<Long> intDate = (ArrayList<Long>)xmlToList(intDateFacet, \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(intDate,intDateTest);\n    //Int String\n    String intStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");      \n    Collection<Long> intString = (ArrayList<Long>)xmlToList(intStringFacet, \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(intString,intStringTest);\n\n    //Long Date\n    String longDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");      \n    Collection<Long> longDate = (ArrayList<Long>)xmlToList(longDateFacet, \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(longDate,longDateTest);\n    //Long String\n    String longStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> longString = (ArrayList<Long>)xmlToList(longStringFacet, \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(longString,longStringTest);\n\n    //Float Date\n    String floatDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> floatDate = (ArrayList<Long>)xmlToList(floatDateFacet, \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(floatDate,floatDateTest);\n    //Float String\n    String floatStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> floatString = (ArrayList<Long>)xmlToList(floatStringFacet, \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(floatString,floatStringTest);\n\n    //Double Date\n    String doubleDateFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"date_dtd\");   \n    Collection<Long> doubleDate = (ArrayList<Long>)xmlToList(doubleDateFacet, \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(doubleDate,doubleDateTest);\n    //Double String\n    String doubleStringFacet = getFacetXML(response, \"uniquen\", \"fieldFacets\", \"string_sd\");   \n    Collection<Long> doubleString = (ArrayList<Long>)xmlToList(doubleStringFacet, \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(doubleString,doubleStringTest);\n\n    //Date Int\n    String dateIntFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"int_id\");    \n    Collection<Long> dateInt = (ArrayList<Long>)xmlToList(dateIntFacet, \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(dateInt,dateIntTest);\n    //Date Long\n    String dateStringFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"long_ld\");     \n    Collection<Long> dateString = (ArrayList<Long>)xmlToList(dateStringFacet, \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(dateString,dateLongTest);\n\n    //String Int\n    String stringIntFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"int_id\");   \n    Collection<Long> stringInt = (ArrayList<Long>)xmlToList(stringIntFacet, \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(stringInt,stringIntTest);\n    //String Long\n    String stringLongFacet = getFacetXML(response, \"unique\", \"fieldFacets\", \"long_ld\");    \n    Collection<Long> stringLong = (ArrayList<Long>)xmlToList(stringLongFacet, \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Long> intString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Long> floatString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Long> doubleString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<Long> dateString = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<Long> stringLong = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#uniqueTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Long> intString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Long> floatString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Long> doubleString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<Long> dateString = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<Long> stringLong = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void uniqueTest() throws Exception { \n    //Int Date\n    Collection<Long> intDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"int\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(intDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Long> intString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"int\");\n    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateStat(intStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Long> floatDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"float\");\n    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateStat(floatDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Long> floatString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"float\");\n    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateStat(floatStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Long> doubleDate = getLongList(\"uniquen\", \"fieldFacets\", \"date_dtd\", \"long\", \"double\");\n    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateStat(doubleDateTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Long> doubleString = getLongList(\"uniquen\", \"fieldFacets\", \"string_sd\", \"long\", \"double\");\n    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateStat(doubleStringTestStart, \"unique\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<Long> dateInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"date\");\n    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateStat(dateIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<Long> dateString = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"date\");\n    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateStat(dateLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<Long> stringInt = getLongList(\"unique\", \"fieldFacets\", \"int_id\", \"long\", \"str\");\n    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateStat(stringIntTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<Long> stringLong = getLongList(\"unique\", \"fieldFacets\", \"long_ld\", \"long\", \"str\");\n    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateStat(stringLongTestStart, \"unique\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c0586e0570de2261142e339891d57c0f36f45c6"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["1c0586e0570de2261142e339891d57c0f36f45c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"1c0586e0570de2261142e339891d57c0f36f45c6":["ff403346522eaa9de75403763e297e83a3ea585c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["1c0586e0570de2261142e339891d57c0f36f45c6"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c0586e0570de2261142e339891d57c0f36f45c6":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}