{"path":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","commits":[{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermContext}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermContext context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = new Term(term.field(), BytesRef.deepCopyOf(term.bytes()));\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","sourceNew":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermContext}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermContext context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = term;\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermContext}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermContext context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = new Term(term.field(), BytesRef.deepCopyOf(term.bytes()));\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermStates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","sourceNew":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermStates}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermStates context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = term;\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermContext}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermContext context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = term;\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery.Builder#add(Term,float,TermContext).mjava","sourceNew":null,"sourceOld":"    /**\n     * Expert: Add a {@link Term} with the provided boost and context.\n     * This method is useful if you already have a {@link TermContext}\n     * object constructed for the given term.\n     */\n    public Builder add(Term term, float boost, TermContext context) {\n      if (numTerms >= BooleanQuery.getMaxClauseCount()) {\n        throw new BooleanQuery.TooManyClauses();\n      }\n      terms = ArrayUtil.grow(terms, numTerms + 1);\n      boosts = ArrayUtil.grow(boosts, numTerms + 1);\n      contexts = ArrayUtil.grow(contexts, numTerms + 1);\n      terms[numTerms] = term;\n      boosts[numTerms] = boost;\n      contexts[numTerms] = context;\n      numTerms += 1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["38b5bd3ae837751f57f363e9a41b833794222814","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["38b5bd3ae837751f57f363e9a41b833794222814"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"38b5bd3ae837751f57f363e9a41b833794222814":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["38b5bd3ae837751f57f363e9a41b833794222814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}