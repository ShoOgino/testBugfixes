{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd6e4f3858ad2e8364a1030a341d3d6910a18d7","date":1533061790,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 30 && sample2.doubleValue() < 251);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 50 && sample2.doubleValue() < 250);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":["9fd6e4f3858ad2e8364a1030a341d3d6910a18d7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 30 && sample2.doubleValue() < 251);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 30 && sample2.doubleValue() < 251);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMultiVariateNormalDistribution().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 30 && sample2.doubleValue() < 251);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testMultiVariateNormalDistribution() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"     a=array(1,2,3,4,5,6,7),\" +\n        \"     b=array(100, 110, 120, 130,140,150,180),\" +\n        \"     c=transpose(matrix(a, b)),\" +\n        \"     d=array(mean(a), mean(b)),\" +\n        \"     e=cov(c),\" +\n        \"     f=multiVariateNormalDistribution(d, e),\" +\n        \"     g=sample(f, 10000),\" +\n        \"     h=cov(g),\" +\n        \"     i=sample(f),\" +\n        \"     j=density(f, array(4.016093243274465, 138.7283428008585)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> cov = (List<List<Number>>)tuples.get(0).get(\"h\");\n    assertEquals(cov.size(), 2);\n    List<Number> row1 = cov.get(0);\n    assertEquals(row1.size(), 2);\n\n    double a = row1.get(0).doubleValue();\n    double b = row1.get(1).doubleValue();\n    assertEquals(a, 4.666666666666667, 2.5);\n    assertEquals(b, 56.66666666666667, 7);\n\n    List<Number> row2 = cov.get(1);\n\n    double c = row2.get(0).doubleValue();\n    double d = row2.get(1).doubleValue();\n    assertEquals(c, 56.66666666666667, 7);\n    assertEquals(d, 723.8095238095239, 50);\n\n    List<Number> sample = (List<Number>)tuples.get(0).get(\"i\");\n    assertEquals(sample.size(), 2);\n    Number sample1 = sample.get(0);\n    Number sample2 = sample.get(1);\n    assertTrue(sample.toString(), sample1.doubleValue() > -30 && sample1.doubleValue() < 30);\n    assertTrue(sample.toString(), sample2.doubleValue() > 30 && sample2.doubleValue() < 251);\n\n    Number density = (Number)tuples.get(0).get(\"j\");\n    assertEquals(density.doubleValue(), 0.007852638121596995, .00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4cba13865da71de3b9b0937fcbc66d726089356d":["9fd6e4f3858ad2e8364a1030a341d3d6910a18d7"],"9fd6e4f3858ad2e8364a1030a341d3d6910a18d7":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["9ba1b632c041956c93c41aa1143d16a567014891"],"4cba13865da71de3b9b0937fcbc66d726089356d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9fd6e4f3858ad2e8364a1030a341d3d6910a18d7":["4cba13865da71de3b9b0937fcbc66d726089356d"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9fd6e4f3858ad2e8364a1030a341d3d6910a18d7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}