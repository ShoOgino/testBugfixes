{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionAnalyzer#toAutomaton(String,CharSequence).mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionAnalyzer#toAutomaton(String,CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts <code>key</code> to an automaton using\n   * {@link #preservePositionIncrements}, {@link #preserveSep}\n   * and {@link #maxGraphExpansions}\n   */\n  public Automaton toAutomaton(String field, CharSequence key) throws IOException {\n    for (int i = 0; i < key.length(); i++) {\n      switch (key.charAt(i)) {\n        case HOLE_CHARACTER:\n          throw new IllegalArgumentException(\"lookup key cannot contain HOLE character U+001E; this character is reserved\");\n        case SEP_LABEL:\n          throw new IllegalArgumentException(\"lookup key cannot contain unit separator character U+001F; this character is reserved\");\n        default:\n          break;\n      }\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(field, key.toString())) {\n      try(CompletionTokenStream stream = new CompletionTokenStream(tokenStream,\n          preserveSep, preservePositionIncrements, SEP_LABEL, maxGraphExpansions)) {\n        return stream.toAutomaton(tokenStream);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionAnalyzer#toAutomaton(String,CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts <code>key</code> to an automaton using\n   * {@link #preservePositionIncrements}, {@link #preserveSep}\n   * and {@link #maxGraphExpansions}\n   */\n  public Automaton toAutomaton(String field, CharSequence key) throws IOException {\n    for (int i = 0; i < key.length(); i++) {\n      switch (key.charAt(i)) {\n        case HOLE_CHARACTER:\n          throw new IllegalArgumentException(\"lookup key cannot contain HOLE character U+001E; this character is reserved\");\n        case SEP_LABEL:\n          throw new IllegalArgumentException(\"lookup key cannot contain unit separator character U+001F; this character is reserved\");\n        default:\n          break;\n      }\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(field, key.toString())) {\n      try(CompletionTokenStream stream = new CompletionTokenStream(tokenStream,\n          preserveSep, preservePositionIncrements, SEP_LABEL, maxGraphExpansions)) {\n        return stream.toAutomaton(tokenStream);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionAnalyzer#toAutomaton(String,CharSequence).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts <code>key</code> to an automaton using\n   * {@link #preservePositionIncrements}, {@link #preserveSep}\n   * and {@link #maxGraphExpansions}\n   */\n  public Automaton toAutomaton(String field, CharSequence key) throws IOException {\n    for (int i = 0; i < key.length(); i++) {\n      switch (key.charAt(i)) {\n        case HOLE_CHARACTER:\n          throw new IllegalArgumentException(\"lookup key cannot contain HOLE character U+001E; this character is reserved\");\n        case SEP_LABEL:\n          throw new IllegalArgumentException(\"lookup key cannot contain unit separator character U+001F; this character is reserved\");\n        default:\n          break;\n      }\n    }\n\n    try (TokenStream tokenStream = analyzer.tokenStream(field, key.toString())) {\n      try(CompletionTokenStream stream = new CompletionTokenStream(tokenStream,\n          preserveSep, preservePositionIncrements, SEP_LABEL, maxGraphExpansions)) {\n        return stream.toAutomaton(tokenStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}