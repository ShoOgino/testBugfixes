{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"     MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.ReaderIterator docBaseDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (docBaseDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + docBaseDeltas.size());\n      }\n      final PackedInts.Mutable docBases = PackedInts.getMutable(numChunks, PackedInts.bitsRequired(Math.max(0, si.getDocCount() - 1)), PackedInts.COMPACT);\n\n      int docBase = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        docBases.set(i, docBase);\n        docBase += docBaseDeltas.next();\n      }\n      if (docBase != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docBase);\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(numChunks, bitsPerStartPointer, PackedInts.COMPACT);\n      int startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        startPointers.set(i, startPointer);\n      }\n\n      this.docBases = docBases;\n      this.startPointers = startPointers;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34fef60de41ee52d172dbbc4e1df32d47e74f31c","date":1349799180,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"     MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.ReaderIterator docBaseDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (docBaseDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + docBaseDeltas.size());\n      }\n      final PackedInts.Mutable docBases = PackedInts.getMutable(numChunks, PackedInts.bitsRequired(Math.max(0, si.getDocCount() - 1)), PackedInts.COMPACT);\n\n      int docBase = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        docBases.set(i, docBase);\n        docBase += docBaseDeltas.next();\n      }\n      if (docBase != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docBase);\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(numChunks, bitsPerStartPointer, PackedInts.COMPACT);\n      long startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        startPointers.set(i, startPointer);\n      }\n\n      this.docBases = docBases;\n      this.startPointers = startPointers;\n    }\n\n","sourceOld":"     MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.ReaderIterator docBaseDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (docBaseDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + docBaseDeltas.size());\n      }\n      final PackedInts.Mutable docBases = PackedInts.getMutable(numChunks, PackedInts.bitsRequired(Math.max(0, si.getDocCount() - 1)), PackedInts.COMPACT);\n\n      int docBase = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        docBases.set(i, docBase);\n        docBase += docBaseDeltas.next();\n      }\n      if (docBase != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docBase);\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(numChunks, bitsPerStartPointer, PackedInts.COMPACT);\n      int startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        startPointers.set(i, startPointer);\n      }\n\n      this.docBases = docBases;\n      this.startPointers = startPointers;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccd8ff5675189c84a504cdee7da185e2c3ca3164","date":1351698863,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"    MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      maxDoc = si.getDocCount();\n      int[] docBases = new int[16];\n      long[] startPointers = new long[16];\n      int[] avgChunkDocs = new int[16];\n      long[] avgChunkSizes = new long[16];\n      PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n      PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n      final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n      int blockCount = 0;\n\n      for (;;) {\n        final int numChunks = fieldsIndexIn.readVInt();\n        if (numChunks == 0) {\n          break;\n        }\n        if (blockCount == docBases.length) {\n          final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n          docBases = Arrays.copyOf(docBases, newSize);\n          startPointers = Arrays.copyOf(startPointers, newSize);\n          avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n          avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n          docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n          startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n        }\n\n        // doc bases\n        docBases[blockCount] = fieldsIndexIn.readVInt();\n        avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n        final int bitsPerDocBase = fieldsIndexIn.readVInt();\n        if (bitsPerDocBase > 32) {\n          throw new CorruptIndexException(\"Corrupted\");\n        }\n        docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n        // start pointers\n        startPointers[blockCount] = fieldsIndexIn.readVLong();\n        avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n        final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n        if (bitsPerStartPointer > 64) {\n          throw new CorruptIndexException(\"Corrupted\");\n        }\n        startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n        ++blockCount;\n      }\n\n      this.docBases = Arrays.copyOf(docBases, blockCount);\n      this.startPointers = Arrays.copyOf(startPointers, blockCount);\n      this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n      this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n      this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n      this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n    }\n\n","sourceOld":"     MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      final int numChunks = fieldsIndexIn.readVInt();\n      final int bitsPerStartPointer = fieldsIndexIn.readByte() & 0xFF;\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted\");\n      }\n\n      final PackedInts.ReaderIterator docBaseDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (docBaseDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + docBaseDeltas.size());\n      }\n      final PackedInts.Mutable docBases = PackedInts.getMutable(numChunks, PackedInts.bitsRequired(Math.max(0, si.getDocCount() - 1)), PackedInts.COMPACT);\n\n      int docBase = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        docBases.set(i, docBase);\n        docBase += docBaseDeltas.next();\n      }\n      if (docBase != si.getDocCount()) {\n        throw new CorruptIndexException(\"Expected \" + si.getDocCount() + \" docs, got \" + docBase);\n      }\n\n      final PackedInts.ReaderIterator startPointerDeltas = PackedInts.getReaderIterator(fieldsIndexIn, PackedInts.DEFAULT_BUFFER_SIZE);\n      if (startPointerDeltas.size() != numChunks) {\n        throw new CorruptIndexException(\"Expected \" + numChunks + \" chunks, but got \" + startPointerDeltas.size());\n      }\n      final PackedInts.Mutable startPointers = PackedInts.getMutable(numChunks, bitsPerStartPointer, PackedInts.COMPACT);\n      long startPointer = 0;\n      for (int i = 0; i < numChunks; ++i) {\n        startPointer += startPointerDeltas.next();\n        startPointers.set(i, startPointer);\n      }\n\n      this.docBases = docBases;\n      this.startPointers = startPointers;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndex.MemoryChunkFieldsIndexReader#MemoryChunkFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":null,"sourceOld":"    MemoryChunkFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n      super(fieldsIndexIn);\n      maxDoc = si.getDocCount();\n      int[] docBases = new int[16];\n      long[] startPointers = new long[16];\n      int[] avgChunkDocs = new int[16];\n      long[] avgChunkSizes = new long[16];\n      PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n      PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n      final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n      int blockCount = 0;\n\n      for (;;) {\n        final int numChunks = fieldsIndexIn.readVInt();\n        if (numChunks == 0) {\n          break;\n        }\n        if (blockCount == docBases.length) {\n          final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n          docBases = Arrays.copyOf(docBases, newSize);\n          startPointers = Arrays.copyOf(startPointers, newSize);\n          avgChunkDocs = Arrays.copyOf(avgChunkDocs, newSize);\n          avgChunkSizes = Arrays.copyOf(avgChunkSizes, newSize);\n          docBasesDeltas = Arrays.copyOf(docBasesDeltas, newSize);\n          startPointersDeltas = Arrays.copyOf(startPointersDeltas, newSize);\n        }\n\n        // doc bases\n        docBases[blockCount] = fieldsIndexIn.readVInt();\n        avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n        final int bitsPerDocBase = fieldsIndexIn.readVInt();\n        if (bitsPerDocBase > 32) {\n          throw new CorruptIndexException(\"Corrupted\");\n        }\n        docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n        // start pointers\n        startPointers[blockCount] = fieldsIndexIn.readVLong();\n        avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n        final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n        if (bitsPerStartPointer > 64) {\n          throw new CorruptIndexException(\"Corrupted\");\n        }\n        startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n        ++blockCount;\n      }\n\n      this.docBases = Arrays.copyOf(docBases, blockCount);\n      this.startPointers = Arrays.copyOf(startPointers, blockCount);\n      this.avgChunkDocs = Arrays.copyOf(avgChunkDocs, blockCount);\n      this.avgChunkSizes = Arrays.copyOf(avgChunkSizes, blockCount);\n      this.docBasesDeltas = Arrays.copyOf(docBasesDeltas, blockCount);\n      this.startPointersDeltas = Arrays.copyOf(startPointersDeltas, blockCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a96cceee825e15cd8e042b683d404086e2a58d1":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["34fef60de41ee52d172dbbc4e1df32d47e74f31c"],"34fef60de41ee52d172dbbc4e1df32d47e74f31c":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a96cceee825e15cd8e042b683d404086e2a58d1"]},"commit2Childs":{"0a96cceee825e15cd8e042b683d404086e2a58d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["34fef60de41ee52d172dbbc4e1df32d47e74f31c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"34fef60de41ee52d172dbbc4e1df32d47e74f31c":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}