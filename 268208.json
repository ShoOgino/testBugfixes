{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory(random);\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n    TestIndexReaderReopen.createIndex(dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = SegmentReader.getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = SegmentReader.getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    assertTrue(!origSegmentReader.isDeleted(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.isDeleted(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = SegmentReader.getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // deletedDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.deletedDocsRef);\n\n    // we deleted a document, so there is now a deletedDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new deletedDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.deletedDocs != clonedSegmentReader.deletedDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits delDocs = origSegmentReader.getDeletedDocs();\n    assertTrue(delDocs == null || !delDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertTrue(clonedSegmentReader.getDeletedDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = IndexReader.openIfChanged(clonedReader);\n    if (reopenedReader == null) {\n      reopenedReader = clonedReader;\n    }\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = clonedReader.reopen();\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":null,"sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = IndexReader.openIfChanged(clonedReader);\n    if (reopenedReader == null) {\n      reopenedReader = clonedReader;\n    }\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":null,"sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = IndexReader.openIfChanged(clonedReader);\n    if (reopenedReader == null) {\n      reopenedReader = clonedReader;\n    }\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testSegmentReaderDelDocsReferenceCounting().mjava","sourceNew":null,"sourceOld":"  public void testSegmentReaderDelDocsReferenceCounting() throws Exception {\n    final Directory dir1 = newDirectory();\n    TestIndexReaderReopen.createIndex(random, dir1, false);\n\n    IndexReader origReader = IndexReader.open(dir1, false);\n    SegmentReader origSegmentReader = getOnlySegmentReader(origReader);\n    // liveDocsRef should be null because nothing has updated yet\n    assertNull(origSegmentReader.liveDocsRef);\n\n    // we deleted a document, so there is now a liveDocs bitvector and a\n    // reference to it\n    origReader.deleteDocument(1);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n\n    // the cloned segmentreader should have 2 references, 1 to itself, and 1 to\n    // the original segmentreader\n    IndexReader clonedReader = (IndexReader) origReader.clone();\n    SegmentReader clonedSegmentReader = getOnlySegmentReader(clonedReader);\n    assertDelDocsRefCountEquals(2, origSegmentReader);\n    // deleting a document creates a new liveDocs bitvector, the refs goes to\n    // 1\n    clonedReader.deleteDocument(2);\n    assertDelDocsRefCountEquals(1, origSegmentReader);\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // make sure the deletedocs objects are different (copy\n    // on write)\n    assertTrue(origSegmentReader.liveDocs != clonedSegmentReader.liveDocs);\n\n    assertDocDeleted(origSegmentReader, clonedSegmentReader, 1);\n    final Bits liveDocs = origSegmentReader.getLiveDocs();\n    assertTrue(liveDocs == null || liveDocs.get(2)); // doc 2 should not be deleted\n                                                  // in original segmentreader\n    assertFalse(clonedSegmentReader.getLiveDocs().get(2)); // doc 2 should be deleted in\n                                                  // cloned segmentreader\n\n    // deleting a doc from the original segmentreader should throw an exception\n    try {\n      origReader.deleteDocument(4);\n      fail(\"expected exception\");\n    } catch (LockObtainFailedException lbfe) {\n      // expected\n    }\n\n    origReader.close();\n    // try closing the original segment reader to see if it affects the\n    // clonedSegmentReader\n    clonedReader.deleteDocument(3);\n    clonedReader.flush();\n    assertDelDocsRefCountEquals(1, clonedSegmentReader);\n\n    // test a reopened reader\n    IndexReader reopenedReader = IndexReader.openIfChanged(clonedReader);\n    if (reopenedReader == null) {\n      reopenedReader = clonedReader;\n    }\n    IndexReader cloneReader2 = (IndexReader) reopenedReader.clone();\n    SegmentReader cloneSegmentReader2 = getOnlySegmentReader(cloneReader2);\n    assertDelDocsRefCountEquals(2, cloneSegmentReader2);\n    clonedReader.close();\n    reopenedReader.close();\n    cloneReader2.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4e8cc373c801e54cec75daf9f52792cb4b17f536","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["4e8cc373c801e54cec75daf9f52792cb4b17f536","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","8a8259c922a83abc544609227a60d48e5ee93e7e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"8a8259c922a83abc544609227a60d48e5ee93e7e":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}