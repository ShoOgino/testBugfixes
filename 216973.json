{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    MutableFacetResultNode topFrn = (MutableFacetResultNode) facetResult.getFacetResultNode(); // safe cast\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    MutableFacetResultNode topFrn = (MutableFacetResultNode) facetResult.getFacetResultNode(); // safe cast\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    MutableFacetResultNode topFrn = (MutableFacetResultNode) facetResult.getFacetResultNode(); // safe cast\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    MutableFacetResultNode topFrn = (MutableFacetResultNode) facetResult.getFacetResultNode(); // safe cast\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.numResults, this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.getNumResults(), this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.numResults, this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKInEachNodeHandler#rearrangeFacetResult(FacetResult).mjava","sourceNew":null,"sourceOld":"  @Override\n  // verifies that the children of each node are sorted by the order\n  // specified by the facetRequest.\n  // the values in these nodes may have changed due to a re-count, for example\n  // following the accumulation by Sampling.\n  // so now we test and re-order if necessary.\n  public FacetResult rearrangeFacetResult(FacetResult facetResult) {\n    PriorityQueue<FacetResultNode> nodesHeap = \n      new ResultNodeHeap(this.facetRequest.numResults, this.getSuitableACComparator());\n    FacetResultNode topFrn = facetResult.getFacetResultNode();\n    rearrangeChilrenOfNode(topFrn, nodesHeap);\n    return facetResult;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","d33e19a97046248623a7591aeaa6547233fd15e2"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","811cdb4a80352766eb0c762e48972707a924e5cd"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}