{"path":"lucene/core/src/java/org/apache/lucene/util/SentinelIntSet#rehash().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SentinelIntSet#rehash().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SentinelIntSet#rehash().mjava","sourceNew":"  public void rehash() {\n    int newSize = keys.length << 1;\n    int[] oldKeys = keys;\n    keys = new int[newSize];\n    if (emptyVal != 0) Arrays.fill(keys, emptyVal);\n\n    for (int i=0; i<oldKeys.length; i++) {\n      int key = oldKeys[i];\n      if (key == emptyVal) continue;\n      int newSlot = getSlot(key);\n      keys[newSlot] = key;\n    }\n    rehashCount = newSize - (newSize>>2);\n  }\n\n","sourceOld":"  public void rehash() {\n    int newSize = keys.length << 1;\n    int[] oldKeys = keys;\n    keys = new int[newSize];\n    if (emptyVal != 0) Arrays.fill(keys, emptyVal);\n\n    for (int i=0; i<oldKeys.length; i++) {\n      int key = oldKeys[i];\n      if (key == emptyVal) continue;\n      int newSlot = getSlot(key);\n      keys[newSlot] = key;\n    }\n    rehashCount = newSize - (newSize>>2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f68952564f3b6e728a925c0f524499809dfb8555","date":1364915265,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SentinelIntSet#rehash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SentinelIntSet#rehash().mjava","sourceNew":"  /** (internal) Rehashes by doubling {@code int[] key} and filling with the old values. */\n  public void rehash() {\n    int newSize = keys.length << 1;\n    int[] oldKeys = keys;\n    keys = new int[newSize];\n    if (emptyVal != 0) Arrays.fill(keys, emptyVal);\n\n    for (int key : oldKeys) {\n      if (key == emptyVal) continue;\n      int newSlot = getSlot(key);\n      keys[newSlot] = key;\n    }\n    rehashCount = newSize - (newSize>>2);\n  }\n\n","sourceOld":"  public void rehash() {\n    int newSize = keys.length << 1;\n    int[] oldKeys = keys;\n    keys = new int[newSize];\n    if (emptyVal != 0) Arrays.fill(keys, emptyVal);\n\n    for (int i=0; i<oldKeys.length; i++) {\n      int key = oldKeys[i];\n      if (key == emptyVal) continue;\n      int newSlot = getSlot(key);\n      keys[newSlot] = key;\n    }\n    rehashCount = newSize - (newSize>>2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f68952564f3b6e728a925c0f524499809dfb8555":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f68952564f3b6e728a925c0f524499809dfb8555"]},"commit2Childs":{"f68952564f3b6e728a925c0f524499809dfb8555":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f68952564f3b6e728a925c0f524499809dfb8555"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}