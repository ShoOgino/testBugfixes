{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#startTerm(BytesRef,int).mjava","commits":[{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#startTerm(BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startTerm(BytesRef term, int freq) throws IOException {\n    final int prefix = StringHelper.bytesDifference(lastTerm, term);\n    final int suffix = term.length - prefix;\n    tvf.writeVInt(prefix);\n    tvf.writeVInt(suffix);\n    tvf.writeBytes(term.bytes, term.offset + prefix, suffix);\n    tvf.writeVInt(freq);\n    lastTerm.copyBytes(term);\n    lastPosition = lastOffset = 0;\n    \n    if (offsets && positions) {\n      // we might need to buffer if its a non-bulk merge\n      offsetStartBuffer = ArrayUtil.grow(offsetStartBuffer, freq);\n      offsetEndBuffer = ArrayUtil.grow(offsetEndBuffer, freq);\n      offsetIndex = 0;\n      offsetFreq = freq;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#startTerm(BytesRef,int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#startTerm(BytesRef,int).mjava","sourceNew":"  @Override\n  public void startTerm(BytesRef term, int freq) throws IOException {\n    final int prefix = StringHelper.bytesDifference(lastTerm, term);\n    final int suffix = term.length - prefix;\n    tvf.writeVInt(prefix);\n    tvf.writeVInt(suffix);\n    tvf.writeBytes(term.bytes, term.offset + prefix, suffix);\n    tvf.writeVInt(freq);\n    lastTerm.copyBytes(term);\n    lastPosition = lastOffset = 0;\n    \n    if (offsets && positions) {\n      // we might need to buffer if its a non-bulk merge\n      offsetStartBuffer = ArrayUtil.grow(offsetStartBuffer, freq);\n      offsetEndBuffer = ArrayUtil.grow(offsetEndBuffer, freq);\n      offsetIndex = 0;\n      offsetFreq = freq;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void startTerm(BytesRef term, int freq) throws IOException {\n    final int prefix = StringHelper.bytesDifference(lastTerm, term);\n    final int suffix = term.length - prefix;\n    tvf.writeVInt(prefix);\n    tvf.writeVInt(suffix);\n    tvf.writeBytes(term.bytes, term.offset + prefix, suffix);\n    tvf.writeVInt(freq);\n    lastTerm.copyBytes(term);\n    lastPosition = lastOffset = 0;\n    \n    if (offsets && positions) {\n      // we might need to buffer if its a non-bulk merge\n      offsetStartBuffer = ArrayUtil.grow(offsetStartBuffer, freq);\n      offsetEndBuffer = ArrayUtil.grow(offsetEndBuffer, freq);\n      offsetIndex = 0;\n      offsetFreq = freq;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}