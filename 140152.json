{"path":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(reader, field);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    lowerBytesRef = new BytesRef(this.lowerTermText);\n\n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      upperBytesRef = new BytesRef(upperTermText);\n    }\n\n    BytesRef startBytesRef = (collator == null) ? lowerBytesRef : new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(TermsEnum,String,String,boolean,boolean,Collator).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","sourceNew":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param tenum\n   *          TermsEnum to filter\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(TermsEnum tenum, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(tenum);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    lowerBytesRef = new BytesRef(this.lowerTermText);\n\n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      upperBytesRef = new BytesRef(upperTermText);\n    }\n\n    BytesRef startBytesRef = (collator == null) ? lowerBytesRef : new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(reader, field);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    lowerBytesRef = new BytesRef(this.lowerTermText);\n\n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      upperBytesRef = new BytesRef(upperTermText);\n    }\n\n    BytesRef startBytesRef = (collator == null) ? lowerBytesRef : new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(reader, field);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    lowerBytesRef = new BytesRef(this.lowerTermText);\n\n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      upperBytesRef = new BytesRef(upperTermText);\n    }\n\n    BytesRef startBytesRef = (collator == null) ? lowerBytesRef : new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeTermsEnum#TermRangeTermsEnum(IndexReader,String,String,String,boolean,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /**\n   * Enumerates all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * If an endpoint is null, it is said to be \"open\". Either or both \n   * endpoints may be open.  Open endpoints may not be exclusive \n   * (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param reader\n   * @param field\n   *          An interned field that holds both lower and upper terms.\n   * @param lowerTermText\n   *          The term text at the lower end of the range\n   * @param upperTermText\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is included in the range.\n   * @param collator\n   *          The collator to use to collate index Terms, to determine their\n   *          membership in the range bounded by <code>lowerTerm</code> and\n   *          <code>upperTerm</code>.\n   * \n   * @throws IOException\n   */\n  public TermRangeTermsEnum(IndexReader reader, String field, String lowerTermText, String upperTermText, \n    boolean includeLower, boolean includeUpper, Collator collator) throws IOException {\n    super(reader, field);\n    this.collator = collator;\n    this.upperTermText = upperTermText;\n    this.lowerTermText = lowerTermText;\n    this.includeLower = includeLower;\n    this.includeUpper = includeUpper;\n\n    // do a little bit of normalization...\n    // open ended range queries should always be inclusive.\n    if (this.lowerTermText == null) {\n      this.lowerTermText = \"\";\n      this.includeLower = true;\n    }\n    lowerBytesRef = new BytesRef(this.lowerTermText);\n\n    if (this.upperTermText == null) {\n      this.includeUpper = true;\n      upperBytesRef = null;\n    } else {\n      upperBytesRef = new BytesRef(upperTermText);\n    }\n\n    BytesRef startBytesRef = (collator == null) ? lowerBytesRef : new BytesRef(\"\");\n    setInitialSeekTerm(startBytesRef);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}