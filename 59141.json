{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba","date":1502263912,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a7f628d78d532de820bc8af06bb870f1cb5eafb","date":1570036413,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException, TimeoutException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> !n.contains(lostNodeName));\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException, TimeoutException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> !n.contains(lostNodeName));\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#waitForNodeLeave(String).mjava","sourceNew":null,"sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException, TimeoutException {\n    log.info(\"waitForNodeLeave: {}\", lostNodeName);\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, (o, n) -> !n.contains(lostNodeName));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["8a7f628d78d532de820bc8af06bb870f1cb5eafb"],"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["b06f42faae0ab79dde1a569756990bb96283580d"],"b06f42faae0ab79dde1a569756990bb96283580d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b06f42faae0ab79dde1a569756990bb96283580d","8a7f628d78d532de820bc8af06bb870f1cb5eafb"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["3f504512a03d978990cbff30db0522b354e846db","b0b597c65628ca9e73913a07e81691f8229bae35"],"b06f42faae0ab79dde1a569756990bb96283580d":["8a7f628d78d532de820bc8af06bb870f1cb5eafb","b0b597c65628ca9e73913a07e81691f8229bae35"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b06f42faae0ab79dde1a569756990bb96283580d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}