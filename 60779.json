{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, values.size(), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b231e4e317b81abc1c162a35562958c5552a22d","date":1543914309,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","sourceNew":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, length, true);\n  }\n\n","sourceOld":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, values.size(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"988ed57422d00d71a5c0c5eb36acc017ac7ceb6a","date":1544533997,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","sourceNew":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, values.size(), true);\n  }\n\n","sourceOld":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, length, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, values.size(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/LongCompressor#compress(PackedInts.Reader,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a compact version of the given values from index 0 to length-1.\n   * @param values PackedInts with no special constraints.\n   * @param length the number of values to compress.\n   * @return a compact version of the given values or the given values if compression did not improve on heap overhead.\n   */\n  public static PackedInts.Reader compress(PackedInts.Reader values, int length) {\n    return compress(values, length, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["8b231e4e317b81abc1c162a35562958c5552a22d","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["988ed57422d00d71a5c0c5eb36acc017ac7ceb6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"988ed57422d00d71a5c0c5eb36acc017ac7ceb6a":["8b231e4e317b81abc1c162a35562958c5552a22d"],"8b231e4e317b81abc1c162a35562958c5552a22d":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["8b231e4e317b81abc1c162a35562958c5552a22d"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"988ed57422d00d71a5c0c5eb36acc017ac7ceb6a":["90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"8b231e4e317b81abc1c162a35562958c5552a22d":["cfd70c9571310639a77f0123aea0db41077d9bb6","988ed57422d00d71a5c0c5eb36acc017ac7ceb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}