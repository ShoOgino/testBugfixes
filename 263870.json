{"path":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/FSTSynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}