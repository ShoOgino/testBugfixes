{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","pathOld":"/dev/null","sourceNew":"  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNode());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNode());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        @SuppressWarnings({\"unchecked\"})\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","sourceOld":"  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNode());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNodeName());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        @SuppressWarnings({\"unchecked\"})\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNode());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        @SuppressWarnings({\"unchecked\"})\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#setupWithCollectionTargetNodes(Set[String],Set[Pair[String,String]],String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  protected Collection setupWithCollectionTargetNodes(Set<String> collections, Set<Pair<String, String>> s, String withCollection) {\n    Collection originalTargetNodesCopy = null;\n    if (withCollection != null) {\n      if (log.isDebugEnabled()) {\n        HashSet<String> set = new HashSet<>(collections);\n        s.forEach(kv -> set.add(kv.first()));\n        log.debug(\"Identified withCollection = {} for collection: {}\", withCollection, set);\n      }\n\n      originalTargetNodesCopy = Utils.getDeepCopy((Collection) hints.get(Hint.TARGET_NODE), 10, true);\n\n      Set<String> withCollectionNodes = new HashSet<>();\n\n      for (Row row : getMatrix()) {\n        row.forEachReplica(r -> {\n          if (withCollection.equals(r.getCollection()) &&\n              \"shard1\".equals(r.getShard())) {\n            withCollectionNodes.add(r.getNodeName());\n          }\n        });\n      }\n\n      if (originalTargetNodesCopy != null && !originalTargetNodesCopy.isEmpty()) {\n        // find intersection of the set of target nodes with the set of 'withCollection' nodes\n        @SuppressWarnings({\"unchecked\"})\n        Set<String> set = (Set<String>) hints.computeIfAbsent(Hint.TARGET_NODE, h -> new HashSet<>());\n        set.retainAll(withCollectionNodes);\n        if (set.isEmpty()) {\n          // no nodes common between the sets, we have no choice but to restore the original target node hint\n          hints.put(Hint.TARGET_NODE, originalTargetNodesCopy);\n        }\n      } else if (originalTargetNodesCopy == null) {\n        hints.put(Hint.TARGET_NODE, withCollectionNodes);\n      }\n    }\n    return originalTargetNodesCopy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"527adea7ce767368d7317339023e18e39702132e":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}