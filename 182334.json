{"path":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","commits":[{"id":"5222a966794b33e0bc95cdeb0fe615e0328f3457","date":1177539820,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   */\n  public static List<Token> split( Matcher matcher, String input )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( new Token( match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( new Token( input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( new Token( match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98b77b6a0a7c8d189695f0da38c58b5008a9863c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98b77b6a0a7c8d189695f0da38c58b5008a9863c","date":1252208742,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","sourceNew":"  /**\n   * @deprecated\n   */\n  public static List<Token> split( Matcher matcher, String input ){\n    return split(matcher,input,null);\n  }\n\n","sourceOld":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   */\n  public static List<Token> split( Matcher matcher, String input )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( new Token( match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( new Token( input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( new Token( match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","bugFix":["5222a966794b33e0bc95cdeb0fe615e0328f3457"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28e349236232860728fc91596fa4a1ec2c64bde6","date":1253259442,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","sourceNew":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   * NOTE: This method is not used in 1.4.\n   * @deprecated\n   */\n  @Deprecated\n  public static List<Token> split( Matcher matcher, String input )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( new Token( match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( new Token( input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( new Token( match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","sourceOld":"  /**\n   * @deprecated\n   */\n  public static List<Token> split( Matcher matcher, String input ){\n    return split(matcher,input,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String).mjava","sourceNew":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   * NOTE: This method is not used in 1.4.\n   * @deprecated\n   */\n  @Deprecated\n  public static List<Token> split( Matcher matcher, String input )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( new Token( match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( new Token( input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( new Token( match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","sourceOld":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   * NOTE: This method is not used in 1.4.\n   * @deprecated\n   */\n  @Deprecated\n  public static List<Token> split( Matcher matcher, String input )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( new Token( match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( new Token( input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( new Token( match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28e349236232860728fc91596fa4a1ec2c64bde6":["98b77b6a0a7c8d189695f0da38c58b5008a9863c"],"98b77b6a0a7c8d189695f0da38c58b5008a9863c":["5222a966794b33e0bc95cdeb0fe615e0328f3457"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5222a966794b33e0bc95cdeb0fe615e0328f3457":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["28e349236232860728fc91596fa4a1ec2c64bde6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28e349236232860728fc91596fa4a1ec2c64bde6":["ad94625fb8d088209f46650c8097196fec67f00c"],"98b77b6a0a7c8d189695f0da38c58b5008a9863c":["28e349236232860728fc91596fa4a1ec2c64bde6"],"5222a966794b33e0bc95cdeb0fe615e0328f3457":["98b77b6a0a7c8d189695f0da38c58b5008a9863c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5222a966794b33e0bc95cdeb0fe615e0328f3457"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}