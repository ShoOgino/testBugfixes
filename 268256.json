{"path":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.getTerm(doc, values[slot]);\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.getTerm(doc, values[slot]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.getTerm(doc, values[slot]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.getTerm(doc, values[slot]);\n    }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      if (values[slot].length == 0 && docsWithField.get(doc) == false) {\n        values[slot].bytes = MISSING_BYTES;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7615b855702e008d91a95a2578bf05d27372f599","date":1389802891,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      setMissingBytes(doc, values[slot]);\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      if (values[slot].length == 0 && docsWithField.get(doc) == false) {\n        values[slot].bytes = MISSING_BYTES;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      setMissingBytes(doc, values[slot]);\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      if (values[slot].length == 0 && docsWithField.get(doc) == false) {\n        values[slot].bytes = MISSING_BYTES;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == MISSING_BYTESREF) {\n        values[slot] = MISSING_BYTESREF;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRef();\n        }\n        values[slot] = tempBRs[slot];\n        values[slot].copyBytes(comparableBytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      if (values[slot] == null) {\n        values[slot] = new BytesRef();\n      }\n      docTerms.get(doc, values[slot]);\n      setMissingBytes(doc, values[slot]);\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"400558e34d57baf6a8e8c42d60fc1a87b5acb596","date":1405940665,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRef();\n        }\n        values[slot] = tempBRs[slot];\n        values[slot].copyBytes(comparableBytes);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == MISSING_BYTESREF) {\n        values[slot] = MISSING_BYTESREF;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRef();\n        }\n        values[slot] = tempBRs[slot];\n        values[slot].copyBytes(comparableBytes);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRef();\n        }\n        values[slot] = tempBRs[slot];\n        values[slot].copyBytes(comparableBytes);\n      }\n    }\n\n","bugFix":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) throws IOException {\n      final BytesRef comparableBytes = getValueForDoc(doc);\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) throws IOException {\n      final BytesRef comparableBytes = getValueForDoc(doc);\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermValComparator#copy(int,int).mjava","sourceNew":"    @Override\n    public void copy(int slot, int doc) throws IOException {\n      final BytesRef comparableBytes = getValueForDoc(doc);\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void copy(int slot, int doc) {\n      final BytesRef comparableBytes = getComparableBytes(doc, docTerms.get(doc));\n      if (comparableBytes == null) {\n        values[slot] = null;\n      } else {\n        if (tempBRs[slot] == null) {\n          tempBRs[slot] = new BytesRefBuilder();\n        }\n        tempBRs[slot].copyBytes(comparableBytes);\n        values[slot] = tempBRs[slot].get();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dd9934a49477c83301120ba51827d91eb3606d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["87d6f9603307ae2ad642fb01deedf031320fd0c3","7615b855702e008d91a95a2578bf05d27372f599"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2dd9934a49477c83301120ba51827d91eb3606d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7615b855702e008d91a95a2578bf05d27372f599":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"2dd9934a49477c83301120ba51827d91eb3606d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dd9934a49477c83301120ba51827d91eb3606d5","d4d69c535930b5cce125cff868d40f6373dc27d4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["400558e34d57baf6a8e8c42d60fc1a87b5acb596"],"400558e34d57baf6a8e8c42d60fc1a87b5acb596":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["27ab7b234eab0cbc020836989b96ed430e1065bb","7615b855702e008d91a95a2578bf05d27372f599"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7615b855702e008d91a95a2578bf05d27372f599":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}