{"path":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","commits":[{"id":"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0","date":1514294096,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(\n        // retain doc id order\n        newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = new BooleanQuery.Builder()\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"foo\"))), Occur.MUST)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"bar\"))), Occur.SHOULD)\n        .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.TOP_SCORES);\n    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n\n    Scorer scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(\n        // retain doc id order\n        newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = new BooleanQuery.Builder()\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"foo\"))), Occur.MUST)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"bar\"))), Occur.SHOULD)\n        .build();\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1);\n    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n\n    Scorer scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(\n        // retain doc id order\n        newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = new BooleanQuery.Builder()\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"foo\"))), Occur.MUST)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"bar\"))), Occur.SHOULD)\n        .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.TOP_SCORES);\n    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n\n    Scorer scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestReqOptSumScorer#testBasics().mjava","sourceNew":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(\n        // retain doc id order\n        newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = new BooleanQuery.Builder()\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"foo\"))), Occur.MUST)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"bar\"))), Occur.SHOULD)\n        .build();\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.TOP_SCORES, 1);\n    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n\n    Scorer scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasics() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig().setMergePolicy(\n        // retain doc id order\n        newLogMergePolicy(random().nextBoolean())));\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"f\", \"foo\", Store.NO));\n    doc.add(new StringField(\"f\", \"bar\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query query = new BooleanQuery.Builder()\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"foo\"))), Occur.MUST)\n        .add(new ConstantScoreQuery(new TermQuery(new Term(\"f\", \"bar\"))), Occur.SHOULD)\n        .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.TOP_SCORES);\n    LeafReaderContext context = searcher.getIndexReader().leaves().get(0);\n\n    Scorer scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextDown(1f));\n    assertEquals(0, scorer.iterator().nextDoc());\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(2, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    scorer = weight.scorer(context);\n    assertEquals(0, scorer.iterator().nextDoc());\n    scorer.setMinCompetitiveScore(Math.nextUp(1f));\n    assertEquals(1, scorer.iterator().nextDoc());\n    assertEquals(4, scorer.iterator().nextDoc());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, scorer.iterator().nextDoc());\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}