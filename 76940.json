{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","sourceNew":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"905875f9ff156054caaa4850a454dd00a348872d","date":1371921347,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","sourceNew":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n    // LUCENE-4890\n    qtb = new QueryTreeBuilder();\n    qtb.setBuilder(DummyQueryNodeInterface.class, new DummyBuilder());\n    result = qtb.build(new DummyQueryNode());\n    Assert.assertEquals(\"OK\", result);\n  }\n\n","sourceOld":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","sourceNew":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n    // LUCENE-4890\n    qtb = new QueryTreeBuilder();\n    qtb.setBuilder(DummyQueryNodeInterface.class, new DummyBuilder());\n    result = qtb.build(new DummyQueryNode());\n    Assert.assertEquals(\"OK\", result);\n  }\n\n","sourceOld":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50","date":1580737953,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/core/builders/TestQueryTreeBuilder#testSetFieldBuilder().mjava","sourceNew":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    assertEquals(\"OK\", result);\n    \n    // LUCENE-4890\n    qtb = new QueryTreeBuilder();\n    qtb.setBuilder(DummyQueryNodeInterface.class, new DummyBuilder());\n    result = qtb.build(new DummyQueryNode());\n    assertEquals(\"OK\", result);\n  }\n\n","sourceOld":"  @Test\n  public void testSetFieldBuilder() throws QueryNodeException {\n    QueryTreeBuilder qtb = new QueryTreeBuilder();\n    qtb.setBuilder(\"field\", new DummyBuilder());\n    Object result = qtb.build(new FieldQueryNode(new UnescapedCharSequence(\"field\"), \"foo\", 0, 0));\n    Assert.assertEquals(\"OK\", result);\n    \n    // LUCENE-4890\n    qtb = new QueryTreeBuilder();\n    qtb.setBuilder(DummyQueryNodeInterface.class, new DummyBuilder());\n    result = qtb.build(new DummyQueryNode());\n    Assert.assertEquals(\"OK\", result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"905875f9ff156054caaa4850a454dd00a348872d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b89678825b68eccaf09e6ab71675fc0b0af1e099","905875f9ff156054caaa4850a454dd00a348872d"],"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50":["905875f9ff156054caaa4850a454dd00a348872d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50"]},"commit2Childs":{"905875f9ff156054caaa4850a454dd00a348872d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["905875f9ff156054caaa4850a454dd00a348872d","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}