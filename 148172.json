{"path":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return;// default\n      if (docID >= docToEntry.length) {\n        int[] newArray = new int[ArrayUtil.oversize(1 + docID,\n            RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(docToEntry, 0, newArray, 0, docToEntry.length);\n        Arrays.fill(newArray, docToEntry.length, newArray.length, -1);\n        bytesUsed.addAndGet((newArray.length - docToEntry.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToEntry = newArray;\n      }\n      final int e = hash.add(bytes);\n      docToEntry[docID] = e < 0 ? (-e) - 1 : e;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9235b9d4454a46c066cda47fed7ca0a34e614529"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"9235b9d4454a46c066cda47fed7ca0a34e614529":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","85eb75e0c0203e44dcf686f35876cf6080f3a671"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}