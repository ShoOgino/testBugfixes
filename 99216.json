{"path":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","commits":[{"id":"f6ddcea595f0d6b2d431cbca80d565275d60dbdc","date":1165953123,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403276476fcb5face94d280a9d9a54cd9e5771c8","date":1236174606,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanOrEmpty().mjava","sourceNew":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","sourceOld":"  public void testSpanOrEmpty() throws Exception {\n    Spans spans = orSpans(new String[0]);\n    assertFalse(\"empty next\", spans.next());\n\n    SpanOrQuery a = new SpanOrQuery( new SpanQuery[0] );\n    SpanOrQuery b = new SpanOrQuery( new SpanQuery[0] );\n    assertTrue(\"empty should equal\", a.equals(b));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6ddcea595f0d6b2d431cbca80d565275d60dbdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"403276476fcb5face94d280a9d9a54cd9e5771c8":["f6ddcea595f0d6b2d431cbca80d565275d60dbdc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["403276476fcb5face94d280a9d9a54cd9e5771c8"]},"commit2Childs":{"f6ddcea595f0d6b2d431cbca80d565275d60dbdc":["403276476fcb5face94d280a9d9a54cd9e5771c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6ddcea595f0d6b2d431cbca80d565275d60dbdc"],"403276476fcb5face94d280a9d9a54cd9e5771c8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}