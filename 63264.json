{"path":"src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","commits":[{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","pathOld":"/dev/null","sourceNew":"  /**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.\n   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter\n   * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,\n   * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,\n   * IndexDeletionPolicy, IndexReaderFactory\n   * @return\n   */\n  public List<PluginInfo> getPluginInfos(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null ?\n            (List<PluginInfo>) Collections.EMPTY_LIST:\n            result; \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c1e32df11d451c5548a0b1fb4f5609088ef0cf","date":1255111670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","sourceNew":"  /**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.\n   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter\n   * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,\n   * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,\n   * IndexDeletionPolicy, IndexReaderFactory\n   */\n  public List<PluginInfo> getPluginInfos(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null ?\n            (List<PluginInfo>) Collections.EMPTY_LIST:\n            result; \n  }\n\n","sourceOld":"  /**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.\n   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter\n   * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,\n   * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,\n   * IndexDeletionPolicy, IndexReaderFactory\n   * @return\n   */\n  public List<PluginInfo> getPluginInfos(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null ?\n            (List<PluginInfo>) Collections.EMPTY_LIST:\n            result; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPluginInfos(String).mjava","sourceNew":"  /**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.\n   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter\n   * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,\n   * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,\n   * IndexDeletionPolicy, IndexReaderFactory\n   */\n  public List<PluginInfo> getPluginInfos(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null ?\n            (List<PluginInfo>) Collections.EMPTY_LIST:\n            result; \n  }\n\n","sourceOld":"  /**SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.\n   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter\n   * SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,\n   * SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,\n   * IndexDeletionPolicy, IndexReaderFactory\n   */\n  public List<PluginInfo> getPluginInfos(String  type){\n    List<PluginInfo> result = pluginStore.get(type);\n    return result == null ?\n            (List<PluginInfo>) Collections.EMPTY_LIST:\n            result; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["28a016ae2abf4934515e45810192aa4350e3092b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"28a016ae2abf4934515e45810192aa4350e3092b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38c1e32df11d451c5548a0b1fb4f5609088ef0cf":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["28a016ae2abf4934515e45810192aa4350e3092b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["38c1e32df11d451c5548a0b1fb4f5609088ef0cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}