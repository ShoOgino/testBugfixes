{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docIDBase < b.docIDBase;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchPackedValue, 0, bytesPerDim, b.state.scratchPackedValue, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = StringHelper.compare(bytesPerDim, a.state.scratchPackedValue, 0, b.state.scratchPackedValue, 0);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchPackedValue1, 0, bytesPerDim, b.state.scratchPackedValue1, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchPackedValue, 0, bytesPerDim, b.state.scratchPackedValue, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchDataPackedValue, 0, bytesPerDim, b.state.scratchDataPackedValue, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchPackedValue1, 0, bytesPerDim, b.state.scratchPackedValue1, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.BKDMergeQueue#lessThan(MergeReader,MergeReader).mjava","sourceNew":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = Arrays.compareUnsigned(a.state.scratchDataPackedValue, 0, bytesPerDim, b.state.scratchDataPackedValue, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","sourceOld":"    @Override\n    public boolean lessThan(MergeReader a, MergeReader b) {\n      assert a != b;\n\n      int cmp = FutureArrays.compareUnsigned(a.state.scratchDataPackedValue, 0, bytesPerDim, b.state.scratchDataPackedValue, 0, bytesPerDim);\n      if (cmp < 0) {\n        return true;\n      } else if (cmp > 0) {\n        return false;\n      }\n\n      // Tie break by sorting smaller docIDs earlier:\n      return a.docID < b.docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["f6652c943595e92c187ee904c382863013eae28f"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"f6652c943595e92c187ee904c382863013eae28f":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","3d33e731a93d4b57e662ff094f64f94a745422d4"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"f6652c943595e92c187ee904c382863013eae28f":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["f6652c943595e92c187ee904c382863013eae28f"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}