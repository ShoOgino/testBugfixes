{"path":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","pathOld":"/dev/null","sourceNew":"  private static FSLockFactory getNewLockFactory(String lockFactoryClassName) throws IOException {\n    // try to get static INSTANCE field of class\n    try {\n      return (FSLockFactory) Class.forName(lockFactoryClassName).getField(\"INSTANCE\").get(null);\n    } catch (ReflectiveOperationException e) {\n      // fall-through\n    }\n    \n    // try to create a new instance\n    try {\n      return Class.forName(lockFactoryClassName).asSubclass(FSLockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      // fall-through\n    }\n\n    throw new IOException(\"Cannot get lock factory singleton of \" + lockFactoryClassName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3552ae5f425e2412e31cd77ea3b808c583d178e9","date":1421940087,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","sourceNew":"  private static FSLockFactory getNewLockFactory(String lockFactoryClassName) throws IOException {\n    // try to get static INSTANCE field of class\n    try {\n      return (FSLockFactory) Class.forName(lockFactoryClassName).getField(\"INSTANCE\").get(null);\n    } catch (ReflectiveOperationException e) {\n      // fall-through\n    }\n    \n    // try to create a new instance\n    try {\n      return Class.forName(lockFactoryClassName).asSubclass(FSLockFactory.class).newInstance();\n    } catch (ReflectiveOperationException | ClassCastException e) {\n      // fall-through\n    }\n\n    throw new IOException(\"Cannot get lock factory singleton of \" + lockFactoryClassName);\n  }\n\n","sourceOld":"  private static FSLockFactory getNewLockFactory(String lockFactoryClassName) throws IOException {\n    // try to get static INSTANCE field of class\n    try {\n      return (FSLockFactory) Class.forName(lockFactoryClassName).getField(\"INSTANCE\").get(null);\n    } catch (ReflectiveOperationException e) {\n      // fall-through\n    }\n    \n    // try to create a new instance\n    try {\n      return Class.forName(lockFactoryClassName).asSubclass(FSLockFactory.class).newInstance();\n    } catch (IllegalAccessException | InstantiationException | ClassCastException | ClassNotFoundException e) {\n      // fall-through\n    }\n\n    throw new IOException(\"Cannot get lock factory singleton of \" + lockFactoryClassName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/LockStressTest#getNewLockFactory(String).mjava","sourceNew":"  private static FSLockFactory getNewLockFactory(String lockFactoryClassName) throws IOException {\n    // try to get static INSTANCE field of class\n    try {\n      return (FSLockFactory) Class.forName(lockFactoryClassName).getField(\"INSTANCE\").get(null);\n    } catch (ReflectiveOperationException e) {\n      // fall-through\n    }\n    \n    // try to create a new instance\n    try {\n      return Class.forName(lockFactoryClassName).asSubclass(FSLockFactory.class).getConstructor().newInstance();\n    } catch (ReflectiveOperationException | ClassCastException e) {\n      // fall-through\n    }\n\n    throw new IOException(\"Cannot get lock factory singleton of \" + lockFactoryClassName);\n  }\n\n","sourceOld":"  private static FSLockFactory getNewLockFactory(String lockFactoryClassName) throws IOException {\n    // try to get static INSTANCE field of class\n    try {\n      return (FSLockFactory) Class.forName(lockFactoryClassName).getField(\"INSTANCE\").get(null);\n    } catch (ReflectiveOperationException e) {\n      // fall-through\n    }\n    \n    // try to create a new instance\n    try {\n      return Class.forName(lockFactoryClassName).asSubclass(FSLockFactory.class).newInstance();\n    } catch (ReflectiveOperationException | ClassCastException e) {\n      // fall-through\n    }\n\n    throw new IOException(\"Cannot get lock factory singleton of \" + lockFactoryClassName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["3552ae5f425e2412e31cd77ea3b808c583d178e9"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3552ae5f425e2412e31cd77ea3b808c583d178e9":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["3552ae5f425e2412e31cd77ea3b808c583d178e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"3552ae5f425e2412e31cd77ea3b808c583d178e9":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}