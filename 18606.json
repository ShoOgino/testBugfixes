{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testRandomShort().mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testRandomShort().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomShort() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testShorts\"));\n    IndexOutput output = dir.createOutput(\"shorts\", newIOContext(random()));\n    int num = TestUtil.nextInt(random(), 50, 3000);\n    short shorts[] = new short[num];\n    for (int i = 0; i < shorts.length; i++) {\n      shorts[i] = (short) random().nextInt();\n      output.writeShort(shorts[i]);\n    }\n    output.close();\n    \n    // slice\n    IndexInput input = dir.openInput(\"shorts\", newIOContext(random()));\n    RandomAccessInput slice = input.randomAccessSlice(0, input.length());\n    for (int i = 0; i < shorts.length; i++) {\n      assertEquals(shorts[i], slice.readShort(i * 2));\n    }\n    \n    // subslices\n    for (int i = 1; i < shorts.length; i++) {\n      long offset = i * 2;\n      RandomAccessInput subslice = input.randomAccessSlice(offset, input.length() - offset);\n      for (int j = i; j < shorts.length; j++) {\n        assertEquals(shorts[j], subslice.readShort((j - i) * 2));\n      }\n    }\n    \n    // with padding\n    for (int i = 0; i < 7; i++) {\n      String name = \"shorts-\" + i;\n      IndexOutput o = dir.createOutput(name, newIOContext(random()));\n      byte junk[] = new byte[i];\n      random().nextBytes(junk);\n      o.writeBytes(junk, junk.length);\n      input.seek(0);\n      o.copyBytes(input, input.length());\n      o.close();\n      IndexInput padded = dir.openInput(name, newIOContext(random()));\n      RandomAccessInput whole = padded.randomAccessSlice(i, padded.length() - i);\n      for (int j = 0; j < shorts.length; j++) {\n        assertEquals(shorts[j], whole.readShort(j * 2));\n      }\n      padded.close();\n    }\n    input.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testRandomShort().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testRandomShort().mjava","sourceNew":"  public void testRandomShort() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testShorts\"))) {\n      IndexOutput output = dir.createOutput(\"shorts\", newIOContext(random()));\n      int num = TestUtil.nextInt(random(), 50, 3000);\n      short shorts[] = new short[num];\n      for (int i = 0; i < shorts.length; i++) {\n        shorts[i] = (short) random().nextInt();\n        output.writeShort(shorts[i]);\n      }\n      output.close();\n\n      // slice\n      IndexInput input = dir.openInput(\"shorts\", newIOContext(random()));\n      RandomAccessInput slice = input.randomAccessSlice(0, input.length());\n      for (int i = 0; i < shorts.length; i++) {\n        assertEquals(shorts[i], slice.readShort(i * 2));\n      }\n\n      // subslices\n      for (int i = 1; i < shorts.length; i++) {\n        long offset = i * 2;\n        RandomAccessInput subslice = input.randomAccessSlice(offset, input.length() - offset);\n        for (int j = i; j < shorts.length; j++) {\n          assertEquals(shorts[j], subslice.readShort((j - i) * 2));\n        }\n      }\n\n      // with padding\n      for (int i = 0; i < 7; i++) {\n        String name = \"shorts-\" + i;\n        IndexOutput o = dir.createOutput(name, newIOContext(random()));\n        byte junk[] = new byte[i];\n        random().nextBytes(junk);\n        o.writeBytes(junk, junk.length);\n        input.seek(0);\n        o.copyBytes(input, input.length());\n        o.close();\n        IndexInput padded = dir.openInput(name, newIOContext(random()));\n        RandomAccessInput whole = padded.randomAccessSlice(i, padded.length() - i);\n        for (int j = 0; j < shorts.length; j++) {\n          assertEquals(shorts[j], whole.readShort(j * 2));\n        }\n        padded.close();\n      }\n      input.close();\n    }\n  }\n\n","sourceOld":"  public void testRandomShort() throws Exception {\n    Directory dir = getDirectory(createTempDir(\"testShorts\"));\n    IndexOutput output = dir.createOutput(\"shorts\", newIOContext(random()));\n    int num = TestUtil.nextInt(random(), 50, 3000);\n    short shorts[] = new short[num];\n    for (int i = 0; i < shorts.length; i++) {\n      shorts[i] = (short) random().nextInt();\n      output.writeShort(shorts[i]);\n    }\n    output.close();\n    \n    // slice\n    IndexInput input = dir.openInput(\"shorts\", newIOContext(random()));\n    RandomAccessInput slice = input.randomAccessSlice(0, input.length());\n    for (int i = 0; i < shorts.length; i++) {\n      assertEquals(shorts[i], slice.readShort(i * 2));\n    }\n    \n    // subslices\n    for (int i = 1; i < shorts.length; i++) {\n      long offset = i * 2;\n      RandomAccessInput subslice = input.randomAccessSlice(offset, input.length() - offset);\n      for (int j = i; j < shorts.length; j++) {\n        assertEquals(shorts[j], subslice.readShort((j - i) * 2));\n      }\n    }\n    \n    // with padding\n    for (int i = 0; i < 7; i++) {\n      String name = \"shorts-\" + i;\n      IndexOutput o = dir.createOutput(name, newIOContext(random()));\n      byte junk[] = new byte[i];\n      random().nextBytes(junk);\n      o.writeBytes(junk, junk.length);\n      input.seek(0);\n      o.copyBytes(input, input.length());\n      o.close();\n      IndexInput padded = dir.openInput(name, newIOContext(random()));\n      RandomAccessInput whole = padded.randomAccessSlice(i, padded.length() - i);\n      for (int j = 0; j < shorts.length; j++) {\n        assertEquals(shorts[j], whole.readShort(j * 2));\n      }\n      padded.close();\n    }\n    input.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}