{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1954d95228d6d15076c41d8c82f6ca9667edd981","date":1519624358,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1954d95228d6d15076c41d8c82f6ca9667edd981":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1954d95228d6d15076c41d8c82f6ca9667edd981"]},"commit2Childs":{"1954d95228d6d15076c41d8c82f6ca9667edd981":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1954d95228d6d15076c41d8c82f6ca9667edd981"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}