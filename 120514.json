{"path":"src/java/org/apache/solr/schema/TrieField#getTrieRangeFilter(String,String,String,boolean,boolean).mjava","commits":[{"id":"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0","date":1236796963,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getTrieRangeFilter(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Filter getTrieRangeFilter(String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    switch (type) {\n      case INTEGER:\n        return new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Integer.parseInt(min),\n                \"*\".equals(max) ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n      case FLOAT:\n        return new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                \"*\".equals(max) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n      case LONG:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Long.parseLong(min),\n                \"*\".equals(max) ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n      case DOUBLE:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                \"*\".equals(max) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n      case DATE:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : dateField.parseMath(null, min).getTime(),\n                \"*\".equals(max) ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df","date":1236801004,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getTrieRangeFilter(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(String field, String min, String max, boolean inclusive) {\n    Filter filter = null;\n    switch (type) {\n      case INTEGER:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Integer.parseInt(min),\n                \"*\".equals(max) ? null : Integer.parseInt(max),\n                inclusive, inclusive);\n        break;\n      case FLOAT:\n        filter = new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                \"*\".equals(max) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                inclusive, inclusive);\n        break;\n      case LONG:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Long.parseLong(min),\n                \"*\".equals(max) ? null : Long.parseLong(max),\n                inclusive, inclusive);\n        break;\n      case DOUBLE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                \"*\".equals(max) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                inclusive, inclusive);\n        break;\n      case DATE:\n        filter = new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : dateField.parseMath(null, min).getTime(),\n                \"*\".equals(max) ? null : dateField.parseMath(null, max).getTime(),\n                inclusive, inclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n    \n    return new ConstantScoreQuery(filter);\n  }\n\n","sourceOld":"  public Filter getTrieRangeFilter(String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    switch (type) {\n      case INTEGER:\n        return new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Integer.parseInt(min),\n                \"*\".equals(max) ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n      case FLOAT:\n        return new IntTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(min)),\n                \"*\".equals(max) ? null : TrieUtils.floatToSortableInt(Float.parseFloat(max)),\n                minInclusive, maxInclusive);\n      case LONG:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : Long.parseLong(min),\n                \"*\".equals(max) ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n      case DOUBLE:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(min)),\n                \"*\".equals(max) ? null : TrieUtils.doubleToSortableLong(Double.parseDouble(max)),\n                minInclusive, maxInclusive);\n      case DATE:\n        return new LongTrieRangeFilter(field, field, precisionStep,\n                \"*\".equals(min) ? null : dateField.parseMath(null, min).getTime(),\n                \"*\".equals(max) ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"d0b3b236a1a9fb0ab54d5afc732ee5e580b607df":[],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["d0b3b236a1a9fb0ab54d5afc732ee5e580b607df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0b3b236a1a9fb0ab54d5afc732ee5e580b607df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}