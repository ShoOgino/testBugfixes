{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","commits":[{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Yields a {@link Scorer} that matches documents with values between the specified range,\n   * and that which produces scores equal to {@link #floatVal(int)}.\n   */\n  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(weight, readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(weight, readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(weight, readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(weight, readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  /**\n   * Yields a {@link Scorer} that matches documents with values between the specified range,\n   * and that which produces scores equal to {@link #floatVal(int)}.\n   */\n  // A RangeValueSource can't easily be a ValueSource that takes another ValueSource\n  // because it needs different behavior depending on the type of fields.  There is also\n  // a setup cost - parsing and normalizing params, and doing a binary search on the StringIndex.\n  // TODO: change \"reader\" to LeafReaderContext\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    float lower;\n    float upper;\n\n    if (lowerVal == null) {\n      lower = Float.NEGATIVE_INFINITY;\n    } else {\n      lower = Float.parseFloat(lowerVal);\n    }\n    if (upperVal == null) {\n      upper = Float.POSITIVE_INFINITY;\n    } else {\n      upper = Float.parseFloat(upperVal);\n    }\n\n    final float l = lower;\n    final float u = upper;\n\n    if (includeLower && includeUpper) {\n      return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal <= u;\n        }\n      };\n    }\n    else if (includeLower && !includeUpper) {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal >= l && docVal < u;\n        }\n      };\n    }\n    else if (!includeLower && includeUpper) {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal <= u;\n        }\n      };\n    }\n    else {\n       return new ValueSourceScorer(readerContext, this) {\n        @Override\n        public boolean matches(int doc) throws IOException {\n          if (!exists(doc)) return false;\n          float docVal = floatVal(doc);\n          return docVal > l && docVal < u;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}