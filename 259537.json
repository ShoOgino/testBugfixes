{"path":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","commits":[{"id":"69d8f9cca4a5fc4049a99ea24253b41a88b0d234","date":1277138158,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f825da350bbcd34d73cc0b5652530554f35ea01f","date":1280228164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END+1);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":["2aafd88401639311b0404e67c94e829e123a0e45","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END+1);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point that this transition\n  // accepts, avoiding the surrogates range since they are\n  // \"defined\" in UTF32.  Don't call this on a transition\n  // that only accepts UTF16 surrogate values!!\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    return t.min+r.nextInt(t.max-t.min+1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98c56b2963044a899f039913c0ca3b7777de42b2","date":1289049426,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END+1);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END+1);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END+1);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil#getRandomCodePoint(Random,Transition).mjava","sourceNew":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","sourceOld":"  // picks a random int code point, avoiding surrogates;\n  // throws IllegalArgumentException if this transition only\n  // accepts surrogates\n  private static int getRandomCodePoint(final Random r, final Transition t) {\n    final int code;\n    if (t.max < UnicodeUtil.UNI_SUR_HIGH_START ||\n        t.min > UnicodeUtil.UNI_SUR_HIGH_END) {\n      // easy: entire range is before or after surrogates\n      code = t.min+r.nextInt(t.max-t.min+1);\n    } else if (t.min >= UnicodeUtil.UNI_SUR_HIGH_START) {\n      if (t.max > UnicodeUtil.UNI_SUR_LOW_END) {\n        // after surrogates\n        code = 1+UnicodeUtil.UNI_SUR_LOW_END+r.nextInt(t.max-UnicodeUtil.UNI_SUR_LOW_END);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else if (t.max <= UnicodeUtil.UNI_SUR_LOW_END) {\n      if (t.min < UnicodeUtil.UNI_SUR_HIGH_START) {\n        // before surrogates\n        code = t.min + r.nextInt(UnicodeUtil.UNI_SUR_HIGH_START - t.min);\n      } else {\n        throw new IllegalArgumentException(\"transition accepts only surrogates: \" + t);\n      }\n    } else {\n      // range includes all surrogates\n      int gap1 = UnicodeUtil.UNI_SUR_HIGH_START - t.min;\n      int gap2 = t.max - UnicodeUtil.UNI_SUR_LOW_END;\n      int c = r.nextInt(gap1+gap2);\n      if (c < gap1) {\n        code = t.min + c;\n      } else {\n        code = UnicodeUtil.UNI_SUR_LOW_END + c - gap1 + 1;\n      }\n    }\n\n    assert code >= t.min && code <= t.max && (code < UnicodeUtil.UNI_SUR_HIGH_START || code > UnicodeUtil.UNI_SUR_LOW_END):\n      \"code=\" + code + \" min=\" + t.min + \" max=\" + t.max;\n    return code;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f825da350bbcd34d73cc0b5652530554f35ea01f":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","f825da350bbcd34d73cc0b5652530554f35ea01f"],"98c56b2963044a899f039913c0ca3b7777de42b2":["f825da350bbcd34d73cc0b5652530554f35ea01f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["85a883878c0af761245ab048babc63d099f835f3","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["f825da350bbcd34d73cc0b5652530554f35ea01f","98c56b2963044a899f039913c0ca3b7777de42b2"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","98c56b2963044a899f039913c0ca3b7777de42b2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["98c56b2963044a899f039913c0ca3b7777de42b2"]},"commit2Childs":{"f825da350bbcd34d73cc0b5652530554f35ea01f":["3242a09f703274d3b9283f2064a1a33064b53a1b","98c56b2963044a899f039913c0ca3b7777de42b2","85a883878c0af761245ab048babc63d099f835f3"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"98c56b2963044a899f039913c0ca3b7777de42b2":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"85a883878c0af761245ab048babc63d099f835f3":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234","5f4e87790277826a2aea119328600dfb07761f32"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["f825da350bbcd34d73cc0b5652530554f35ea01f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}