{"path":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#getThreadInfo(ThreadInfo,ThreadMXBean).mjava","commits":[{"id":"2070bf73ffa1039a505000f99ea245884ff19e11","date":1177653367,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#getThreadInfo(ThreadInfo,ThreadMXBean).mjava","pathOld":"/dev/null","sourceNew":"  private static SimpleOrderedMap<Object> getThreadInfo( ThreadInfo ti, ThreadMXBean tmbean ) throws IOException \n  {\n    SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n    long tid = ti.getThreadId();\n\n    info.add( \"id\", tid );\n    info.add( \"name\", ti.getThreadName() );\n    info.add( \"state\", ti.getThreadState().toString() );\n    \n    if (ti.getLockName() != null) {\n      info.add( \"lock\", ti.getLockName() );\n    }\n    if (ti.isSuspended()) {\n      info.add( \"suspended\", true );\n    }\n    if (ti.isInNative()) {\n      info.add( \"native\", true );\n    }\n    \n    if (tmbean.isThreadCpuTimeSupported()) {\n      info.add( \"cpuTime\", formatNanos(tmbean.getThreadCpuTime(tid)) );\n      info.add( \"userTime\", formatNanos(tmbean.getThreadUserTime(tid)) );\n    }\n\n    if (ti.getLockOwnerName() != null) {\n      SimpleOrderedMap<Object> owner = new SimpleOrderedMap<Object>();\n      owner.add( \"name\", ti.getLockOwnerName() );\n      owner.add( \"id\", ti.getLockOwnerId() );\n    }\n    \n    // Add the stack trace\n    int i=0;\n    String[] trace = new String[ti.getStackTrace().length];\n    for( StackTraceElement ste : ti.getStackTrace()) {\n      trace[i++] = ste.toString();\n    }\n    info.add( \"stackTrace\", trace );\n    return info;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/admin/ThreadDumpHandler#getThreadInfo(ThreadInfo,ThreadMXBean).mjava","pathOld":"src/java/org/apache/solr/handler/admin/ThreadDumpHandler#getThreadInfo(ThreadInfo,ThreadMXBean).mjava","sourceNew":"  private static SimpleOrderedMap<Object> getThreadInfo( ThreadInfo ti, ThreadMXBean tmbean ) throws IOException \n  {\n    SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n    long tid = ti.getThreadId();\n\n    info.add( \"id\", tid );\n    info.add( \"name\", ti.getThreadName() );\n    info.add( \"state\", ti.getThreadState().toString() );\n    \n    if (ti.getLockName() != null) {\n      info.add( \"lock\", ti.getLockName() );\n    }\n    if (ti.isSuspended()) {\n      info.add( \"suspended\", true );\n    }\n    if (ti.isInNative()) {\n      info.add( \"native\", true );\n    }\n    \n    if (tmbean.isThreadCpuTimeSupported()) {\n      info.add( \"cpuTime\", formatNanos(tmbean.getThreadCpuTime(tid)) );\n      info.add( \"userTime\", formatNanos(tmbean.getThreadUserTime(tid)) );\n    }\n\n    if (ti.getLockOwnerName() != null) {\n      SimpleOrderedMap<Object> owner = new SimpleOrderedMap<Object>();\n      owner.add( \"name\", ti.getLockOwnerName() );\n      owner.add( \"id\", ti.getLockOwnerId() );\n    }\n    \n    // Add the stack trace\n    int i=0;\n    String[] trace = new String[ti.getStackTrace().length];\n    for( StackTraceElement ste : ti.getStackTrace()) {\n      trace[i++] = ste.toString();\n    }\n    info.add( \"stackTrace\", trace );\n    return info;\n  }\n\n","sourceOld":"  private static SimpleOrderedMap<Object> getThreadInfo( ThreadInfo ti, ThreadMXBean tmbean ) throws IOException \n  {\n    SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n    long tid = ti.getThreadId();\n\n    info.add( \"id\", tid );\n    info.add( \"name\", ti.getThreadName() );\n    info.add( \"state\", ti.getThreadState().toString() );\n    \n    if (ti.getLockName() != null) {\n      info.add( \"lock\", ti.getLockName() );\n    }\n    if (ti.isSuspended()) {\n      info.add( \"suspended\", true );\n    }\n    if (ti.isInNative()) {\n      info.add( \"native\", true );\n    }\n    \n    if (tmbean.isThreadCpuTimeSupported()) {\n      info.add( \"cpuTime\", formatNanos(tmbean.getThreadCpuTime(tid)) );\n      info.add( \"userTime\", formatNanos(tmbean.getThreadUserTime(tid)) );\n    }\n\n    if (ti.getLockOwnerName() != null) {\n      SimpleOrderedMap<Object> owner = new SimpleOrderedMap<Object>();\n      owner.add( \"name\", ti.getLockOwnerName() );\n      owner.add( \"id\", ti.getLockOwnerId() );\n    }\n    \n    // Add the stack trace\n    int i=0;\n    String[] trace = new String[ti.getStackTrace().length];\n    for( StackTraceElement ste : ti.getStackTrace()) {\n      trace[i++] = ste.toString();\n    }\n    info.add( \"stackTrace\", trace );\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2070bf73ffa1039a505000f99ea245884ff19e11":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["2070bf73ffa1039a505000f99ea245884ff19e11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2070bf73ffa1039a505000f99ea245884ff19e11"],"2070bf73ffa1039a505000f99ea245884ff19e11":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}