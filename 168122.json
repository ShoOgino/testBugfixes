{"path":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<String, Map<String, MapField>>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<String, MapField>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader#readTypesFeaturesFieldsMapping().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"rawtypes\")\n  private Map<String, Map<String, MapField>> readTypesFeaturesFieldsMapping() {\n    Map<String, Map<String, MapField>> map = new HashMap<>();\n\n    NamedList fieldMappings = (NamedList) args.get(\"fieldMappings\");\n    /* iterate over UIMA types */\n    for (int i = 0; i < fieldMappings.size(); i++) {\n      NamedList type = (NamedList) fieldMappings.get(\"type\", i);\n      String typeName = (String)type.get(\"name\");\n\n      Map<String, MapField> subMap = new HashMap<>();\n      /* iterate over mapping definitions */\n      for(int j = 0; j < type.size() - 1; j++){\n        NamedList mapping = (NamedList) type.get(\"mapping\", j + 1);\n        String featureName = (String) mapping.get(\"feature\");\n        String fieldNameFeature = null;\n        String mappedFieldName = (String) mapping.get(\"field\");\n        if(mappedFieldName == null){\n          fieldNameFeature = (String) mapping.get(\"fieldNameFeature\");\n          mappedFieldName = (String) mapping.get(\"dynamicField\");\n        }\n        if(mappedFieldName == null)\n          throw new RuntimeException(\"either of field or dynamicField should be defined for feature \" + featureName);\n        MapField mapField = new MapField(mappedFieldName, fieldNameFeature);\n        subMap.put(featureName, mapField);\n      }\n      map.put(typeName, subMap);\n    }\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8c9a6ea78b00a421744e770568d8c2aab262e4cd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}