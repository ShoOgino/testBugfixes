{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStates().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStates().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the set of states that are reachable from the initial state.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getStates() {\n    expandSingleton();\n    Set<State> visited;\n    if (isDebug()) visited = new LinkedHashSet<State>();\n    else visited = new HashSet<State>();\n    LinkedList<State> worklist = new LinkedList<State>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      Collection<Transition> tr;\n      if (isDebug()) tr = s.getSortedTransitions(false);\n      else tr = s.transitions;\n      for (Transition t : tr)\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return visited;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getStates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the set of states that are reachable from the initial state.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getStates() {\n    expandSingleton();\n    Set<State> visited;\n    if (isDebug()) visited = new LinkedHashSet<State>();\n    else visited = new HashSet<State>();\n    LinkedList<State> worklist = new LinkedList<State>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      Collection<Transition> tr;\n      if (isDebug()) tr = s.getSortedTransitions(false);\n      else tr = s.transitions;\n      for (Transition t : tr)\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return visited;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}