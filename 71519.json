{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","commits":[{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param files file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> files) throws IOException {\n    Throwable th = null;\n    for (String name : files) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Set<String> nonNullNames = new HashSet<>();\n    for(String name : names) {\n      if (name != null) {\n        nonNullNames.add(name);\n      }\n    }\n    if (names.isEmpty() == false) {\n      dir.deleteFiles(names);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param files file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> files) throws IOException {\n    Throwable th = null;\n    for (String name : files) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Set<String> nonNullNames = new HashSet<>();\n    for(String name : names) {\n      if (name != null) {\n        nonNullNames.add(name);\n      }\n    }\n    if (names.isEmpty() == false) {\n      dir.deleteFiles(names);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param files file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> files) throws IOException {\n    Throwable th = null;\n    for (String name : files) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param files file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> files) throws IOException {\n    Throwable th = null;\n    for (String name : files) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param files file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> files) throws IOException {\n    Throwable th = null;\n    for (String name : files) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    reThrow(th);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb04d6a79e860154f2a1c519790fc42f5a792915","date":1521621668,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          th = useOrSuppress(th, t);\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#deleteFiles(Directory,Collection[String]).mjava","sourceNew":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          th = useOrSuppress(th, t);\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes all given file names.  Some of the\n   * file names may be null; they are\n   * ignored.  After everything is deleted, the method either\n   * throws the first exception it hit while deleting, or\n   * completes normally if there were no exceptions.\n   * \n   * @param dir Directory to delete files from\n   * @param names file names to delete\n   */\n  public static void deleteFiles(Directory dir, Collection<String> names) throws IOException {\n    Throwable th = null;\n    for (String name : names) {\n      if (name != null) {\n        try {\n          dir.deleteFile(name);\n        } catch (Throwable t) {\n          addSuppressed(th, t);\n          if (th == null) {\n            th = t;\n          }\n        }\n      }\n    }\n\n    if (th != null) {\n      throw rethrowAlways(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","bb04d6a79e860154f2a1c519790fc42f5a792915"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5a207d19eac354d649c3f0e2cce070017c78125e","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["5a207d19eac354d649c3f0e2cce070017c78125e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"bb04d6a79e860154f2a1c519790fc42f5a792915":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","e9017cf144952056066919f1ebc7897ff9bd71b1","bb04d6a79e860154f2a1c519790fc42f5a792915"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5a207d19eac354d649c3f0e2cce070017c78125e":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"bb04d6a79e860154f2a1c519790fc42f5a792915":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}