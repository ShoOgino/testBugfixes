{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToHeapSortFallback().mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToHeapSortFallback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToMergeSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToHeapSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.introSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToMergeSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.quickSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToHeapSortFallback().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testQuickToHeapSortFallback().mjava","sourceNew":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  @Slow\n  public void testQuickToHeapSortFallback() {\n    int num = atLeast(10);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.introSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  // This is a test for LUCENE-3054 (which fails without the merge sort fall back with stack overflow in most cases)\n  public void testQuickToHeapSortFallback() {\n    int num = atLeast(50);\n    for (int i = 0; i < num; i++) {\n      Integer[] a1 = createSparseRandomArray(40000), a2 = a1.clone();\n      ArrayUtil.introSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}