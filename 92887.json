{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"3\"));\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"int asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, int desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", \"int asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","date":1390935815,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"3\"));\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"int asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, int desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", \"int asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, int asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = defaultCodecSupportsMissingDocValues() ? intsort : \"int\";\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'8'},{'id':'7'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'3'},{'id':'2'},{'id':'1'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'3'},{'id':'0'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'3'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'7'},{'id':'0'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'6'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'4'},{'id':'3'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'},{'id':'9'},{'id':'7'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'8'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'0'}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'3'}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'6'}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'8'}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'5'}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'8'},{'id':'7'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'3'},{'id':'2'},{'id':'1'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'3'},{'id':'0'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'3'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'7'},{'id':'0'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'6'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'4'},{'id':'3'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'},{'id':'9'},{'id':'7'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'8'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'0'}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'3'}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'6'}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'8'}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'5'}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#testSimple().mjava","sourceNew":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'8'},{'id':'7'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'3'},{'id':'2'},{'id':'1'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'3'},{'id':'0'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'3'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'7'},{'id':'0'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'1'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'0'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'6'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'6'},{'id':'4'},{'id':'3'},{'id':'1'},{'id':'8'},{'id':'5'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'0'},{'id':'9'},{'id':'7'},{'id':'2'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'9'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'4'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'3'},{'id':'8'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'6'}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'0'}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'7'},{'id':'3'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'1'},{'id':'3'}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'4'},{'id':'6'}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'5'},{'id':'8'}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'2'},{'id':'5'}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':'9'}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","sourceOld":"  /** simple static test of some carefully crafted docs */\n  public void testSimple() throws Exception {\n    String cursorMark;\n    SolrParams params = null;\n    \n    final String intsort = \"int\" + (random().nextBoolean() ? \"\" : \"_dv\");\n    final String intmissingsort = intsort;\n\n    // trivial base case: ensure cursorMark against an empty index doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n\n    // don't add in order of any field to ensure we aren't inadvertantly \n    // counting on internal docid ordering\n    assertU(adoc(\"id\", \"9\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"42\"));\n    assertU(adoc(\"id\", \"7\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"-1976\"));\n    assertU(adoc(\"id\", \"2\", \"str\", \"c\", \"float\", \"-3.2\", \"int\", \"666\"));\n    assertU(adoc(\"id\", \"0\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"-42\"));\n    assertU(adoc(\"id\", \"5\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"2001\"));\n    assertU(adoc(\"id\", \"8\", \"str\", \"b\", \"float\", \"64.5\", \"int\", \"4055\"));\n    assertU(adoc(\"id\", \"6\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"1\", \"str\", \"a\", \"float\", \"64.5\", \"int\", \"7\"));\n    assertU(adoc(\"id\", \"4\", \"str\", \"a\", \"float\", \"11.1\", \"int\", \"6\"));\n    assertU(adoc(\"id\", \"3\", \"str\", \"a\", \"float\", \"11.1\")); // int is missing\n    assertU(commit());\n\n    // base case: ensure cursorMark that matches no docs doesn't blow up\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:9999999\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==0\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // edge case: ensure rows=0 doesn't blow up and gives back same cursor for next\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"0\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              );\n    assertEquals(CURSOR_MARK_START, cursorMark);\n\n    // simple id sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"sort\", \"id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':8},{'id':7},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':3},{'id':2},{'id':1}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark, \n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // simple score sort w/some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                    \"rows\",\"4\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", \"score desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':1},{'id':8},{'id':5}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':3},{'id':0}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==7\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':3,'c':0}\"\n                              ));\n\n    // int sort with dups, id tie breaker ... and some faceting\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"facet\", \"true\",\n                    \"facet.field\", \"str\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':3}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ,\"/facet_counts/facet_fields/str=={'a':4,'b':1,'c':3}\"\n                              ));\n\n    // int missing first sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_first asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':7},{'id':0}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':1},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // int missing last sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"-int:2001 -int:4055\", \n                    \"rows\",\"3\",\n                    \"fl\", \"id\",\n                    \"json.nl\", \"map\",\n                    \"sort\", intmissingsort + \"_last asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':0},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':6},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // string sort with dups, id tie breaker\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"6\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':6},{'id':4},{'id':3},{'id':1},{'id':8},{'id':5}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':0},{'id':9},{'id':7},{'id':2}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // tri-level sort with more dups of primary then fit on a page\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"float asc, \"+intsort+\" desc, id desc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':9}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':4}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\" \n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':3},{'id':8}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':6}]\"\n                              );\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':0}]\"\n                              );\n    // we've exactly exhausted all the results, but solr had no way of know that\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // trivial base case: rows bigger then number of matches\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"id:3 id:7\", \n                    \"rows\",\"111\",\n                    \"fl\", \"id\",\n                    \"sort\", intsort + \" asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':7},{'id':3}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==2\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n\n    // sanity check our full walk method\n    SentinelIntSet ids;\n    ids = assertFullWalkNoDups(10, params(\"q\", \"*:*\", \n                                          \"rows\", \"4\",\n                                          \"sort\", \"id desc\"));\n    assertEquals(10, ids.size());\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"1\",\n                                         \"fq\", \"-id:4\",\n                                         \"sort\", \"id asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:4 unexpectedly\", ids.exists(4));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"*:*\", \n                                         \"rows\", \"3\",\n                                         \"fq\", \"-id:6\",\n                                         \"sort\", \"float desc, id asc, \"+intsort+\" asc\"));\n    assertEquals(9, ids.size());\n    assertFalse(\"matched on id:6 unexpectedly\", ids.exists(6));\n    ids = assertFullWalkNoDups(9, params(\"q\", \"float:[0 TO *] int:7 id:6\", \n                                         \"rows\", \"3\",\n                                         \"sort\", \"score desc, id desc\"));\n    assertEquals(7, ids.size());\n    assertFalse(\"matched on id:9 unexpectedly\", ids.exists(9));\n    assertFalse(\"matched on id:7 unexpectedly\", ids.exists(7));\n    assertFalse(\"matched on id:2 unexpectedly\", ids.exists(2));\n\n    // strategically delete/add some docs in the middle of walking the cursor\n    cursorMark = CURSOR_MARK_START;\n    params = params(\"q\", \"*:*\", \n                    \"rows\",\"2\",\n                    \"fl\", \"id\",\n                    \"sort\", \"str asc, id asc\");\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==10\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':1},{'id':3}]\"\n                              );\n    // delete the last guy we got\n    assertU(delI(\"3\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==9\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':4},{'id':6}]\"\n                              );\n    // delete the next guy we expect\n    assertU(delI(\"0\")); \n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':5},{'id':8}]\"\n                              );\n    // update a doc we've already seen so it repeats\n    assertU(adoc(\"id\", \"5\", \"str\", \"c\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':2},{'id':5}]\"\n                              );\n    // update the next doc we expect so it's now in the past\n    assertU(adoc(\"id\", \"7\", \"str\", \"a\"));\n    assertU(commit());\n    cursorMark = assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[{'id':9}]\"\n                              );\n    // no more, so no change to cursorMark, and no new docs\n    assertEquals(cursorMark,\n                 assertCursor(req(params, CURSOR_MARK_PARAM, cursorMark)\n                              ,\"/response/numFound==8\"\n                              ,\"/response/start==0\"\n                              ,\"/response/docs==[]\"\n                              ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"ad2a673349939e48652bf304cccf673c3412198f":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4","ad2a673349939e48652bf304cccf673c3412198f"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6a0f9b793b360e5f5863eef2d4b02a2ddd8b47b4":["ad2a673349939e48652bf304cccf673c3412198f","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}