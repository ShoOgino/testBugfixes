{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","commits":[{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.TermsDict#seekTermsIndex(BytesRef).mjava","sourceNew":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","sourceOld":"    private long seekTermsIndex(BytesRef text) throws IOException {\n      long lo = 0L;\n      long hi = (entry.termsDictSize - 1) >>> entry.termsDictIndexShift;\n      while (lo <= hi) {\n        final long mid = (lo + hi) >>> 1;\n        getTermFromIndex(mid);\n        final int cmp = term.compareTo(text);\n        if (cmp <= 0) {\n          lo = mid + 1;\n        } else {\n          hi = mid - 1;\n        }\n      }\n\n      assert hi < 0 || getTermFromIndex(hi).compareTo(text) <= 0;\n      assert hi == ((entry.termsDictSize - 1) >>> entry.termsDictIndexShift) || getTermFromIndex(hi + 1).compareTo(text) > 0;\n\n      return hi;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["23e44daeaa8b89694d10df5999956c8e14a7dd09","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23e44daeaa8b89694d10df5999956c8e14a7dd09","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}