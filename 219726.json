{"path":"solr/core/src/java/org/apache/solr/util/hll/HLL#homogeneousUnion(HLL).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#homogeneousUnion(HLL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Computes the union of two HLLs of the same type, and stores the\n     * result in this instance.\n     *\n     * @param other the other {@link HLL} instance to union into this one. This\n     *        cannot be <code>null</code>.\n     */\n    private void homogeneousUnion(final HLL other) {\n        switch(type) {\n            case EMPTY:\n                // union of empty and empty is empty\n                return;\n        case EXPLICIT:\n            for(LongCursor c : other.explicitStorage) {\n                addRaw(c.value);\n            }\n            // NOTE:  #addRaw() will handle promotion, if necessary\n            return;\n        case SPARSE:\n            for(IntByteCursor c : other.sparseProbabilisticStorage) {\n              final int registerIndex = c.key;\n              final byte registerValue = c.value;\n              final byte currentRegisterValue = sparseProbabilisticStorage.get(registerIndex);\n              if(registerValue > currentRegisterValue) {\n                sparseProbabilisticStorage.put(registerIndex, registerValue);\n              }\n            }\n\n            // promotion, if necessary\n            if(sparseProbabilisticStorage.size() > sparseThreshold) {\n                initializeStorage(HLLType.FULL);\n                for(IntByteCursor c : sparseProbabilisticStorage) {\n                  final int registerIndex = c.key;\n                  final byte registerValue = c.value;\n                  probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                }\n                sparseProbabilisticStorage = null;\n            }\n            return;\n        case FULL:\n            for(int i=0; i<m; i++) {\n                final long registerValue = other.probabilisticStorage.getRegister(i);\n                probabilisticStorage.setMaxRegister(i, registerValue);\n            }\n            return;\n        default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#homogeneousUnion(HLL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Computes the union of two HLLs of the same type, and stores the\n     * result in this instance.\n     *\n     * @param other the other {@link HLL} instance to union into this one. This\n     *        cannot be <code>null</code>.\n     */\n    private void homogeneousUnion(final HLL other) {\n        switch(type) {\n            case EMPTY:\n                // union of empty and empty is empty\n                return;\n        case EXPLICIT:\n            for(LongCursor c : other.explicitStorage) {\n                addRaw(c.value);\n            }\n            // NOTE:  #addRaw() will handle promotion, if necessary\n            return;\n        case SPARSE:\n            for(IntByteCursor c : other.sparseProbabilisticStorage) {\n              final int registerIndex = c.key;\n              final byte registerValue = c.value;\n              final byte currentRegisterValue = sparseProbabilisticStorage.get(registerIndex);\n              if(registerValue > currentRegisterValue) {\n                sparseProbabilisticStorage.put(registerIndex, registerValue);\n              }\n            }\n\n            // promotion, if necessary\n            if(sparseProbabilisticStorage.size() > sparseThreshold) {\n                initializeStorage(HLLType.FULL);\n                for(IntByteCursor c : sparseProbabilisticStorage) {\n                  final int registerIndex = c.key;\n                  final byte registerValue = c.value;\n                  probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                }\n                sparseProbabilisticStorage = null;\n            }\n            return;\n        case FULL:\n            for(int i=0; i<m; i++) {\n                final long registerValue = other.probabilisticStorage.getRegister(i);\n                probabilisticStorage.setMaxRegister(i, registerValue);\n            }\n            return;\n        default:\n                throw new RuntimeException(\"Unsupported HLL type \" + type);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}