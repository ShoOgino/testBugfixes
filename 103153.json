{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < perThreads.length) {\n      final ThreadState threadState = perThreads[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.perThread != null;\n          threadState.perThread.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","date":1335212037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  public synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt == null;\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt == null;\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt == null;\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt != null;\n          threadState.dwpt.initialize();\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private ThreadState newThreadState() {\n    assert numThreadStatesActive < threadStates.length;\n    final ThreadState threadState = threadStates[numThreadStatesActive];\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      return null;\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  synchronized ThreadState newThreadState() {\n    if (numThreadStatesActive < threadStates.length) {\n      final ThreadState threadState = threadStates[numThreadStatesActive];\n      threadState.lock(); // lock so nobody else will get this ThreadState\n      boolean unlock = true;\n      try {\n        if (threadState.isActive()) {\n          // unreleased thread states are deactivated during DW#close()\n          numThreadStatesActive++; // increment will publish the ThreadState\n          assert threadState.dwpt == null;\n          unlock = false;\n          return threadState;\n        }\n        // unlock since the threadstate is not active anymore - we are closed!\n        assert assertUnreleasedThreadStatesInactive();\n        return null;\n      } finally {\n        if (unlock) {\n          // in any case make sure we unlock if we fail \n          threadState.unlock();\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfedc3309e4d073d3fd1f6033761cf4824396c13","date":1407747880,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private ThreadState newThreadState() {\n    assert numThreadStatesActive < threadStates.length;\n    final ThreadState threadState = threadStates[numThreadStatesActive];\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private ThreadState newThreadState() {\n    assert numThreadStatesActive < threadStates.length;\n    final ThreadState threadState = threadStates[numThreadStatesActive];\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      return null;\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    assert numThreadStatesActive <= threadStates.size();\n\n    if (numThreadStatesActive == threadStates.size()) {\n      threadStates.add(new ThreadState(null));\n    } \n\n    ThreadState threadState = threadStates.get(numThreadStatesActive);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private ThreadState newThreadState() {\n    assert numThreadStatesActive < threadStates.length;\n    final ThreadState threadState = threadStates[numThreadStatesActive];\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    while (aborted) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);        \n      }\n    }\n    ThreadState threadState = new ThreadState(null);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    threadStates.add(threadState);\n    return threadState;\n  }\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    assert numThreadStatesActive <= threadStates.size();\n\n    if (numThreadStatesActive == threadStates.size()) {\n      threadStates.add(new ThreadState(null));\n    } \n\n    ThreadState threadState = threadStates.get(numThreadStatesActive);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    boolean unlock = true;\n    try {\n      if (threadState.isActive()) {\n        // unreleased thread states are deactivated during DW#close()\n        numThreadStatesActive++; // increment will publish the ThreadState\n        //System.out.println(\"activeCount=\" + numThreadStatesActive);\n        assert threadState.dwpt == null;\n        unlock = false;\n        return threadState;\n      }\n      // we are closed: unlock since the threadstate is not active anymore\n      assert assertUnreleasedThreadStatesInactive();\n      throw new AlreadyClosedException(\"this IndexWriter is closed\");\n    } finally {\n      if (unlock) {\n        // in any case make sure we unlock if we fail \n        threadState.unlock();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee67a99e7e36da49a4b68758a01d1ac09ff5472c","date":1547653069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    assert takenThreadStatePermits >= 0;\n    while (takenThreadStatePermits > 0) {\n      // we can't create new thread-states while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    ThreadState threadState = new ThreadState(null);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    threadStates.add(threadState);\n    return threadState;\n}\n\n","sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    while (aborted) {\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);        \n      }\n    }\n    ThreadState threadState = new ThreadState(null);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    threadStates.add(threadState);\n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#newThreadState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a new {@link ThreadState} iff any new state is available otherwise\n   * <code>null</code>.\n   * <p>\n   * NOTE: the returned {@link ThreadState} is already locked iff non-\n   * <code>null</code>.\n   * \n   * @return a new {@link ThreadState} iff any new state is available otherwise\n   *         <code>null</code>\n   */\n  private synchronized ThreadState newThreadState() {\n    assert takenThreadStatePermits >= 0;\n    while (takenThreadStatePermits > 0) {\n      // we can't create new thread-states while not all permits are available\n      try {\n        wait();\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n    ThreadState threadState = new ThreadState(null);\n    threadState.lock(); // lock so nobody else will get this ThreadState\n    threadStates.add(threadState);\n    return threadState;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"],"7af110b00ea8df9429309d83e38e0533d82e144f":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d","7af110b00ea8df9429309d83e38e0533d82e144f"],"8881d151c969a46b4293caa77faa7ecd63239100":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["dfedc3309e4d073d3fd1f6033761cf4824396c13"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dfedc3309e4d073d3fd1f6033761cf4824396c13":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["8881d151c969a46b4293caa77faa7ecd63239100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"8881d151c969a46b4293caa77faa7ecd63239100":["ee67a99e7e36da49a4b68758a01d1ac09ff5472c"],"8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["8881d151c969a46b4293caa77faa7ecd63239100"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["8b074647cedb968eae4bb8f4e7ec83bdd5a1cc7d"],"dfedc3309e4d073d3fd1f6033761cf4824396c13":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["dfedc3309e4d073d3fd1f6033761cf4824396c13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ee67a99e7e36da49a4b68758a01d1ac09ff5472c":["264935965977b4a9e2f3920420647072c9c49176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}