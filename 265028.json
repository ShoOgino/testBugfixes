{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef,int).mjava","commits":[{"id":"bbccaf0f052c2a25526a56531803c5ebac7c8f41","date":1363510731,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  private final int findHash(BytesRef bytes, int code) {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    // final position\n    int hashPos = code & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && !equals(e, bytes)) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && !equals(e, bytes));\n    }\n    \n    return hashPos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef,int).mjava","sourceNew":"  private int findHash(BytesRef bytes, int code) {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    // final position\n    int hashPos = code & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && !equals(e, bytes)) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && !equals(e, bytes));\n    }\n    \n    return hashPos;\n  }\n\n","sourceOld":"  private final int findHash(BytesRef bytes, int code) {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    // final position\n    int hashPos = code & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && !equals(e, bytes)) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && !equals(e, bytes));\n    }\n    \n    return hashPos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#findHash(BytesRef,int).mjava","sourceNew":"  private int findHash(BytesRef bytes) {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n\n    int code = doHash(bytes.bytes, bytes.offset, bytes.length);\n\n    // final position\n    int hashPos = code & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && !equals(e, bytes)) {\n      // Conflict; use linear probe to find an open slot\n      // (see LUCENE-5604):\n      do {\n        totConflict++;\n        code++;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && !equals(e, bytes));\n    }\n    \n    return hashPos;\n  }\n\n","sourceOld":"  private int findHash(BytesRef bytes, int code) {\n    assert bytesStart != null : \"bytesStart is null - not initialized\";\n    // final position\n    int hashPos = code & hashMask;\n    int e = ids[hashPos];\n    if (e != -1 && !equals(e, bytes)) {\n      // Conflict: keep searching different locations in\n      // the hash table.\n      final int inc = ((code >> 8) + code) | 1;\n      do {\n        code += inc;\n        hashPos = code & hashMask;\n        e = ids[hashPos];\n      } while (e != -1 && !equals(e, bytes));\n    }\n    \n    return hashPos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["d0af0c31a687dd847212ae59f661152896c76516"],"d0af0c31a687dd847212ae59f661152896c76516":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fe9fa09df804ce770f1b667401a7a7647301ed"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0af0c31a687dd847212ae59f661152896c76516":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbccaf0f052c2a25526a56531803c5ebac7c8f41"],"bbccaf0f052c2a25526a56531803c5ebac7c8f41":["d0af0c31a687dd847212ae59f661152896c76516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}