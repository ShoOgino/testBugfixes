{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","commits":[{"id":"9e47fba8dd946896c408eb448f6199f5a9f0da2d","date":1434234768,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","pathOld":"/dev/null","sourceNew":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet)answer;\n    }\n\n    FixedBitSet bs = new FixedBitSet(maxDoc());\n    DocIterator iter = answer.iterator();\n    while (iter.hasNext()) {\n      bs.set(iter.nextDoc());\n    }\n\n    BitDocSet answerBits = new BitDocSet(bs , answer.size());\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","sourceNew":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n\n    FixedBitSet bs = new FixedBitSet(maxDoc());\n    DocIterator iter = answer.iterator();\n    while (iter.hasNext()) {\n      bs.set(iter.nextDoc());\n    }\n\n    BitDocSet answerBits = new BitDocSet(bs, answer.size());\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","sourceOld":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet)answer;\n    }\n\n    FixedBitSet bs = new FixedBitSet(maxDoc());\n    DocIterator iter = answer.iterator();\n    while (iter.hasNext()) {\n      bs.set(iter.nextDoc());\n    }\n\n    BitDocSet answerBits = new BitDocSet(bs , answer.size());\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","sourceNew":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n    BitDocSet answerBits = makeBitDocSet(answer);\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","sourceOld":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n\n    FixedBitSet bs = new FixedBitSet(maxDoc());\n    DocIterator iter = answer.iterator();\n    while (iter.hasNext()) {\n      bs.set(iter.nextDoc());\n    }\n\n    BitDocSet answerBits = new BitDocSet(bs, answer.size());\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","sourceNew":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n    BitDocSet answerBits = makeBitDocSet(answer);\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","sourceOld":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n\n    FixedBitSet bs = new FixedBitSet(maxDoc());\n    DocIterator iter = answer.iterator();\n    while (iter.hasNext()) {\n      bs.set(iter.nextDoc());\n    }\n\n    BitDocSet answerBits = new BitDocSet(bs, answer.size());\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65bb42906a110f043122b3338eb5393db03e3706","date":1586291109,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSetBits(Query).mjava","sourceNew":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    BitDocSet answerBits = makeBitDocSet(answer);\n    if (answerBits != answer && filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","sourceOld":"  public BitDocSet getDocSetBits(Query q) throws IOException {\n    DocSet answer = getDocSet(q);\n    if (answer instanceof BitDocSet) {\n      return (BitDocSet) answer;\n    }\n    BitDocSet answerBits = makeBitDocSet(answer);\n    if (filterCache != null) {\n      filterCache.put(q, answerBits);\n    }\n    return answerBits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65bb42906a110f043122b3338eb5393db03e3706":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"9e47fba8dd946896c408eb448f6199f5a9f0da2d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["ac9de183adbc9483681f275ac1e2d92ed19f52e1","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["9e47fba8dd946896c408eb448f6199f5a9f0da2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65bb42906a110f043122b3338eb5393db03e3706"]},"commit2Childs":{"65bb42906a110f043122b3338eb5393db03e3706":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e47fba8dd946896c408eb448f6199f5a9f0da2d":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e47fba8dd946896c408eb448f6199f5a9f0da2d"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["65bb42906a110f043122b3338eb5393db03e3706","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}