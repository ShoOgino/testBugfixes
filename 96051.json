{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7","date":1411591737,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}