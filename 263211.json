{"path":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","commits":[{"id":"0f5950eb64b8186de9916cbfc47470784523079a","date":1355004015,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","pathOld":"/dev/null","sourceNew":"  void doRTG(String ids) throws Exception {\n    cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(ids, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","pathOld":"/dev/null","sourceNew":"  void doRTG(String ids) throws Exception {\n    cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(ids, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","sourceNew":"  void doRTG(String ids) throws Exception {\n    cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    Set<String> expectedIds = new HashSet<>( StrUtils.splitSmart(ids, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Set<String> obtainedIds = new HashSet<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","sourceOld":"  void doRTG(String ids) throws Exception {\n    cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    Set<String> expectedIds = new HashSet<String>( StrUtils.splitSmart(ids, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Set<String> obtainedIds = new HashSet<String>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d0eda576bd1392f929c375143ff45503e89192","date":1394979067,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardRoutingTest#doRTG(String).mjava","sourceNew":"  void doRTG(String ids) throws Exception {\n    doQuery(ids, \"qt\", \"/get\", \"ids\", ids);\n  }\n\n","sourceOld":"  void doRTG(String ids) throws Exception {\n    cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n\n    Set<String> expectedIds = new HashSet<>( StrUtils.splitSmart(ids, \",\", true) );\n\n    QueryResponse rsp = cloudClient.query(params(\"qt\",\"/get\", \"ids\",ids));\n    Set<String> obtainedIds = new HashSet<>();\n    for (SolrDocument doc : rsp.getResults()) {\n      obtainedIds.add((String) doc.get(\"id\"));\n    }\n\n    assertEquals(expectedIds, obtainedIds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f5950eb64b8186de9916cbfc47470784523079a"],"c0d0eda576bd1392f929c375143ff45503e89192":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5950eb64b8186de9916cbfc47470784523079a"],"0f5950eb64b8186de9916cbfc47470784523079a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0d0eda576bd1392f929c375143ff45503e89192"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c0d0eda576bd1392f929c375143ff45503e89192"],"c0d0eda576bd1392f929c375143ff45503e89192":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","0f5950eb64b8186de9916cbfc47470784523079a"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0f5950eb64b8186de9916cbfc47470784523079a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}