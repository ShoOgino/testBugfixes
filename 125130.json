{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDir(String,String,Set[String]).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDir(String,String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy a config in ZooKeeper\n   *\n   * @param fromConfig the config to copy from\n   * @param toConfig the config to copy to\n   * @param copiedToZkPaths should be an empty Set, will be filled in by function\n                            with the paths that were actually copied to.\n   * @throws IOException if an I/O error occurs\n   */\n  public void copyConfigDir(String fromConfig, String toConfig, Set<String> copiedToZkPaths) throws IOException {\n    copyConfigDirFromZk(CONFIGS_ZKNODE + \"/\" + fromConfig, CONFIGS_ZKNODE + \"/\" + toConfig, copiedToZkPaths);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDir(String,String,Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#copyConfigDir(String,String,Set[String]).mjava","sourceNew":"  /**\n   * Copy a config in ZooKeeper\n   *\n   * @param fromConfig the config to copy from\n   * @param toConfig the config to copy to\n   * @param copiedToZkPaths should be an empty Set, will be filled in by function\n                            with the paths that were actually copied to.\n   * @throws IOException if an I/O error occurs\n   */\n  public void copyConfigDir(String fromConfig, String toConfig, Set<String> copiedToZkPaths) throws IOException {\n    String fromConfigPath = CONFIGS_ZKNODE + \"/\" + fromConfig;\n    String toConfigPath = CONFIGS_ZKNODE + \"/\" + toConfig;\n    try {\n      copyData(copiedToZkPaths, fromConfigPath, toConfigPath);\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error config \" + fromConfig + \" to \" + toConfig,\n              SolrZkClient.checkInterrupted(e));\n    }\n    copyConfigDirFromZk(fromConfigPath, toConfigPath, copiedToZkPaths);\n  }\n\n","sourceOld":"  /**\n   * Copy a config in ZooKeeper\n   *\n   * @param fromConfig the config to copy from\n   * @param toConfig the config to copy to\n   * @param copiedToZkPaths should be an empty Set, will be filled in by function\n                            with the paths that were actually copied to.\n   * @throws IOException if an I/O error occurs\n   */\n  public void copyConfigDir(String fromConfig, String toConfig, Set<String> copiedToZkPaths) throws IOException {\n    copyConfigDirFromZk(CONFIGS_ZKNODE + \"/\" + fromConfig, CONFIGS_ZKNODE + \"/\" + toConfig, copiedToZkPaths);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c01ee5edcdd3cffaab03842feda0c26516290698":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["c01ee5edcdd3cffaab03842feda0c26516290698"],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}