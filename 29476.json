{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL#score(BasicStats,double,double).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL#score(BasicStats,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL#score(BasicStats,float,float).mjava","sourceNew":"  @Override\n  public final double score(BasicStats stats, double tfn, double lambda) {\n    if (lambda == 1d) {\n      lambda = 0.99d;\n    }\n    return -Math.log(\n        (Math.pow(lambda, (tfn / (tfn + 1))) - lambda) / (1 - lambda));\n  }\n\n","sourceOld":"  @Override\n  public final float score(BasicStats stats, float tfn, float lambda) {\n    if (lambda == 1f) {\n      lambda = 0.99f;\n    }\n    return (float)-Math.log(\n        (Math.pow(lambda, (tfn / (tfn + 1))) - lambda) / (1 - lambda));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a18036a6b5e6cd6aae4eb93545afff11bc73b6e","date":1514538360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL#score(BasicStats,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/DistributionSPL#score(BasicStats,double,double).mjava","sourceNew":"  @Override\n  public final double score(BasicStats stats, double tfn, double lambda) {\n    assert lambda != 1;\n\n    // tfn/(tfn+1) -> 1 - 1/(tfn+1), guaranteed to be non decreasing when tfn increases\n    double q = 1 - 1 / (tfn + 1);\n    if (q == 1) {\n      q = Math.nextDown(1.0);\n    }\n\n    double pow = Math.pow(lambda, q);\n    if (pow == lambda) {\n      // this can happen because of floating-point rounding\n      // but then we return infinity when taking the log, so we enforce\n      // that pow is different from lambda\n      if (lambda < 1) {\n        // x^y > x when x < 1 and y < 1\n        pow = Math.nextUp(lambda);\n      } else {\n        // x^y < x when x > 1 and y < 1\n        pow = Math.nextDown(lambda);\n      }\n    }\n\n    return -Math.log((pow - lambda) / (1 - lambda));\n  }\n\n","sourceOld":"  @Override\n  public final double score(BasicStats stats, double tfn, double lambda) {\n    if (lambda == 1d) {\n      lambda = 0.99d;\n    }\n    return -Math.log(\n        (Math.pow(lambda, (tfn / (tfn + 1))) - lambda) / (1 - lambda));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a18036a6b5e6cd6aae4eb93545afff11bc73b6e":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a18036a6b5e6cd6aae4eb93545afff11bc73b6e"]},"commit2Childs":{"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["4a18036a6b5e6cd6aae4eb93545afff11bc73b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"4a18036a6b5e6cd6aae4eb93545afff11bc73b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}