{"path":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","commits":[{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newMultiLongRange(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values indexed with {@link LongPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiLongRange(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newMultiLongRange(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values indexed with {@link LongPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiLongRange(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newMultiLongRange(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values indexed with {@link LongPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiLongRange(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#newMultiLongRange(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values indexed with {@link LongPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiLongRange(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b","86cab68ee900a31d093b114182b488ea8e85c59d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Long.toString(LongPoint.decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Long.toString(LongPoint.decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return LongPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Long.toString(LongPoint.decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Long.toString(LongPoint.decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/document/LongPoint#newMultiRangeQuery(String,Long[],boolean[],Long[],boolean[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Create a multidimensional range query for long values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static Query newMultiRangeQuery(String field, Long[] lowerValue, boolean lowerInclusive[], Long[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, LongPoint.encode(lowerValue), lowerInclusive, LongPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(int dimension, byte[] value) {\n        return Long.toString(LongPoint.decodeDimension(value, 0));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","c422e924212367b334b4938f1fd3e44438e88c40"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}