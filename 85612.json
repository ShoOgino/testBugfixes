{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() {\n    final Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() {\n    final Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() {\n    final Set<String> collections = new HashSet<>();\n    lock.lock();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      // check collProps and sliceProps too\n      collProperties.forEach((coll, props) -> collections.add(coll));\n      sliceProperties.forEach((coll, slices) -> collections.add(coll));\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      // check collProps and sliceProps too\n      collProperties.forEach((coll, props) -> collections.add(coll));\n      sliceProperties.forEach((coll, slices) -> collections.add(coll));\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      // check collProps and sliceProps too\n      collProperties.forEach((coll, props) -> collections.add(coll));\n      sliceProperties.forEach((coll, slices) -> collections.add(coll));\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    return new ArrayList<>(colShardReplicaMap.keySet());\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    final Set<String> collections = new HashSet<>();\n    lock.lockInterruptibly();\n    try {\n      nodeReplicaMap.forEach((n, replicas) -> {\n        replicas.forEach(ri -> collections.add(ri.getCollection()));\n      });\n      // check collProps and sliceProps too\n      collProperties.forEach((coll, props) -> collections.add(coll));\n      sliceProperties.forEach((coll, slices) -> collections.add(coll));\n      return new ArrayList<>(collections);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simListCollections().mjava","sourceNew":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    return new ArrayList<>(colShardReplicaMap.keySet());\n  }\n\n","sourceOld":"  /**\n   * List collections.\n   * @return list of existing collections.\n   */\n  public List<String> simListCollections() throws InterruptedException {\n    return new ArrayList<>(colShardReplicaMap.keySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"f592209545c71895260367152601e9200399776d":["43345f1452f9510f8aaadae6156fe0c834e7d957","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}