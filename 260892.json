{"path":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","commits":[{"id":"c8f9fd570bc31c72df35ff9374f45131e8e74d0c","date":1415015820,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithParamSet().mjava","sourceNew":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithParamSet(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8c61a314df19c300ce6ea1e4ab945374980883","date":1416415639,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","sourceNew":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n\n    InitParams initParams = h.getCore().getSolrConfig().getInitParams().get(\"a\");\n\n    PluginInfo pluginInfo = new PluginInfo(\"requestHandler\",\n        new HashMap<String, String>(),\n        new NamedList<>(singletonMap(\"defaults\", new NamedList(ZkNodeProps.makeMap(\"a\", \"A1\")))), null);\n    initParams.apply(pluginInfo);\n    assertEquals( \"A\",initParams.defaults.get(\"a\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","sourceNew":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n\n    InitParams initParams = h.getCore().getSolrConfig().getInitParams().get(\"a\");\n\n    PluginInfo pluginInfo = new PluginInfo(\"requestHandler\",\n        new HashMap<String, String>(),\n        new NamedList<>(singletonMap(\"defaults\", new NamedList(Utils.makeMap(\"a\", \"A1\")))), null);\n    initParams.apply(pluginInfo);\n    assertEquals( \"A\",initParams.defaults.get(\"a\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n\n    InitParams initParams = h.getCore().getSolrConfig().getInitParams().get(\"a\");\n\n    PluginInfo pluginInfo = new PluginInfo(\"requestHandler\",\n        new HashMap<String, String>(),\n        new NamedList<>(singletonMap(\"defaults\", new NamedList(ZkNodeProps.makeMap(\"a\", \"A1\")))), null);\n    initParams.apply(pluginInfo);\n    assertEquals( \"A\",initParams.defaults.get(\"a\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithInitParams().mjava","sourceNew":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n\n    InitParams initParams = h.getCore().getSolrConfig().getInitParams().get(\"a\");\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    PluginInfo pluginInfo = new PluginInfo(\"requestHandler\",\n        new HashMap<>(),\n        new NamedList<>(singletonMap(\"defaults\", new NamedList(Utils.makeMap(\"a\", \"A1\")))), null);\n    initParams.apply(pluginInfo);\n    assertEquals( \"A\",initParams.defaults.get(\"a\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithInitParams(){\n\n    for (String s : Arrays.asList(\"/dump1\", \"/dump3\",\"/root/dump5\" , \"/root1/anotherlevel/dump6\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n      NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n      NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n      assertEquals(\"A\", def.get(\"a\"));\n      def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n      assertEquals(\"B\", def.get(\"b\"));\n      def = (NamedList) nl.get(PluginInfo.APPENDS);\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n\n    InitParams initParams = h.getCore().getSolrConfig().getInitParams().get(\"a\");\n\n    PluginInfo pluginInfo = new PluginInfo(\"requestHandler\",\n        new HashMap<String, String>(),\n        new NamedList<>(singletonMap(\"defaults\", new NamedList(Utils.makeMap(\"a\", \"A1\")))), null);\n    initParams.apply(pluginInfo);\n    assertEquals( \"A\",initParams.defaults.get(\"a\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e98520789adb1d5ad05afb4956eca0944a929688"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["0c8c61a314df19c300ce6ea1e4ab945374980883"],"0c8c61a314df19c300ce6ea1e4ab945374980883":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}