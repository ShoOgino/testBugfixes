{"path":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","commits":[{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"/dev/null","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public float getValue() {\n        return w.getValue();\n      }\n\n      @Override\n      public void normalize(float norm) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float sumOfSquaredWeights() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"/dev/null","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public float getValue() {\n        return w.getValue();\n      }\n\n      @Override\n      public void normalize(float norm) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float sumOfSquaredWeights() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public float getValue() {\n        return w.getValue();\n      }\n\n      @Override\n      public void normalize(float norm) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float sumOfSquaredWeights() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public float getValue() {\n        return w.getValue();\n      }\n\n      @Override\n      public void normalize(float norm) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float sumOfSquaredWeights() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public float getValue() {\n        return w.getValue();\n      }\n\n      @Override\n      public void normalize(float norm) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float sumOfSquaredWeights() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n        return w.scorer(context, scorerContext);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/AssertingIndexSearcher#createNormalizedWeight(Query).mjava","sourceNew":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","sourceOld":"  /** Ensures, that the returned {@code Weight} is not normalized again, which may produce wrong scores. */\n  @Override\n  public Weight createNormalizedWeight(Query query) throws IOException {\n    final Weight w = super.createNormalizedWeight(query);\n    return new Weight() {\n      @Override\n      public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n        return w.explain(context, doc);\n      }\n\n      @Override\n      public Query getQuery() {\n        return w.getQuery();\n      }\n\n      @Override\n      public void normalize(float norm, float topLevelBoost) {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n          boolean topScorer, Bits acceptDocs) throws IOException {\n        return w.scorer(context, scoreDocsInOrder, topScorer, acceptDocs);\n      }\n\n      @Override\n      public float getValueForNormalization() throws IOException {\n        throw new IllegalStateException(\"Weight already normalized.\");\n      }\n\n      @Override\n      public boolean scoresDocsOutOfOrder() {\n        return w.scoresDocsOutOfOrder();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f7fee42303a18cc146043c96f66491311b345d9"],"7b91922b55d15444d554721b352861d028eb8278":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"6f7fee42303a18cc146043c96f66491311b345d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1291e4568eb7d9463d751627596ef14baf4c1603":["6f7fee42303a18cc146043c96f66491311b345d9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["6f7fee42303a18cc146043c96f66491311b345d9"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","0f3cee3d20b0c786e6fca20539454262e29edcab"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"6f7fee42303a18cc146043c96f66491311b345d9":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}