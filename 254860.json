{"path":"solr/core/src/java/org/apache/solr/core/LibListener#createNewClassLoader(Map).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/LibListener#createNewClassLoader(Map).mjava","pathOld":"/dev/null","sourceNew":"  void createNewClassLoader(Map m) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, RuntimeLib> libMap = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        try {\n          lib.init(new PluginInfo(null, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n          libMap.put(lib.getName(), lib);\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\", libMap.values().stream().map(runtimeLib -> runtimeLib.getUrl()).collect(Collectors.toList()));\n      this.memClassLoader = new MemClassLoader(new ArrayList<>(libMap.values()), coreContainer.getResourceLoader());\n      this.runtimeLibs = libMap;\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager#createNewClassLoader(Map,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/LibListener#createNewClassLoader(Map).mjava","sourceNew":"  void createNewClassLoader(Map m, int ver) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, Package> newPkgs = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        String name = (String) k;\n        Package existing = pkgs.get(name);\n        if (existing != null && !existing.isModified(map)) {\n          //this package has not changed\n          newPkgs.put(name, existing);\n        }\n\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        lib.znodeVersion = ver;\n        try {\n          lib.init(new PluginInfo(RuntimeLib.TYPE, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n\n          newPkgs.put(name, new Package(lib,\n              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),\n              ver, name));\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\",\n          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));\n      this.pkgs = newPkgs;\n\n    }\n  }\n\n","sourceOld":"  void createNewClassLoader(Map m) {\n    boolean[] loadedAll = new boolean[1];\n    loadedAll[0] = true;\n    Map<String, RuntimeLib> libMap = new LinkedHashMap<>();\n    m.forEach((k, v) -> {\n      if (v instanceof Map) {\n        Map map = new HashMap((Map) v);\n        map.put(CoreAdminParams.NAME, String.valueOf(k));\n        RuntimeLib lib = new RuntimeLib(coreContainer);\n        try {\n          lib.init(new PluginInfo(null, map));\n          if (lib.getUrl() == null) {\n            log.error(\"Unable to initialize runtimeLib : \" + Utils.toJSONString(v));\n            loadedAll[0] = false;\n          }\n          lib.loadJar();\n          libMap.put(lib.getName(), lib);\n        } catch (Exception e) {\n          log.error(\"error loading a runtimeLib \" + Utils.toJSONString(v), e);\n          loadedAll[0] = false;\n\n        }\n      }\n    });\n\n    if (loadedAll[0]) {\n      log.info(\"Libraries changed. New memclassloader created with jars {}\", libMap.values().stream().map(runtimeLib -> runtimeLib.getUrl()).collect(Collectors.toList()));\n      this.memClassLoader = new MemClassLoader(new ArrayList<>(libMap.values()), coreContainer.getResourceLoader());\n      this.runtimeLibs = libMap;\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}