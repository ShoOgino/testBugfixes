{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","commits":[{"id":"4169fa0e078ff638eaa62cb2c54034a999129766","date":1519676291,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object,Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) && !(first instanceof VectorFunction) && !(first instanceof RegressionEvaluator.RegressionTuple) && !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object first, Object second) throws IOException {\n    if (null == first) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n    if (null == second) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the second value\", toExpression(constructingFactory)));\n    }\n\n    if (!(first instanceof VectorFunction) && !(first instanceof RegressionEvaluator.RegressionTuple) && !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7656aa7218845fc29808b9dfe775b9558ca4611","date":1533776721,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        predictors = regressedTuple.scale(predictors);\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        m = regressedTuple.scale(m);\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) && !(first instanceof VectorFunction) && !(first instanceof RegressionEvaluator.RegressionTuple) && !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2","date":1534530377,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        if(regressedTuple.getScale()) {\n          predictors = regressedTuple.scale(predictors);\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        if(regressedTuple.getScale()) {\n          m = regressedTuple.scale(m);\n        }\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        predictors = regressedTuple.scale(predictors);\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        m = regressedTuple.scale(m);\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ffe323fac8aa24c486bbf238b6413bcf5f274ea","date":1547324745,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n\n      if(regressedTuple.getBivariate()) {\n        //Handle bi-variate regression\n        if(second instanceof Number) {\n          double[] predictors = new double[1];\n          predictors[0] = ((Number)second).doubleValue();\n          return regressedTuple.predict(predictors);\n        } else if(second instanceof List) {\n          List<Number> vec = (List<Number>)second;\n          List<Number> predictions = new ArrayList();\n          for(Number num : vec) {\n            double[] predictors = new double[1];\n            predictors[0] = num.doubleValue();\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      } else {\n        //Handle multi-variate regression\n        if (second instanceof List) {\n          List<Number> list = (List<Number>) second;\n          double[] predictors = new double[list.size()];\n\n          for (int i = 0; i < list.size(); i++) {\n            predictors[i] = list.get(i).doubleValue();\n          }\n\n          if (regressedTuple.getScale()) {\n            predictors = regressedTuple.scale(predictors);\n          }\n\n          return regressedTuple.predict(predictors);\n        } else if (second instanceof Matrix) {\n\n          Matrix m = (Matrix) second;\n          if (regressedTuple.getScale()) {\n            m = regressedTuple.scale(m);\n          }\n          double[][] data = m.getData();\n          List<Number> predictions = new ArrayList();\n          for (double[] predictors : data) {\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        if(regressedTuple.getScale()) {\n          predictors = regressedTuple.scale(predictors);\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        if(regressedTuple.getScale()) {\n          m = regressedTuple.scale(m);\n        }\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        @SuppressWarnings({\"unchecked\"})\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList<>();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n\n      if(regressedTuple.getBivariate()) {\n        //Handle bi-variate regression\n        if(second instanceof Number) {\n          double[] predictors = new double[1];\n          predictors[0] = ((Number)second).doubleValue();\n          return regressedTuple.predict(predictors);\n        } else if(second instanceof List) {\n          @SuppressWarnings({\"unchecked\"})\n          List<Number> vec = (List<Number>)second;\n          List<Number> predictions = new ArrayList<>();\n          for(Number num : vec) {\n            double[] predictors = new double[1];\n            predictors[0] = num.doubleValue();\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      } else {\n        //Handle multi-variate regression\n        if (second instanceof List) {\n          @SuppressWarnings({\"unchecked\"})\n          List<Number> list = (List<Number>) second;\n          double[] predictors = new double[list.size()];\n\n          for (int i = 0; i < list.size(); i++) {\n            predictors[i] = list.get(i).doubleValue();\n          }\n\n          if (regressedTuple.getScale()) {\n            predictors = regressedTuple.scale(predictors);\n          }\n\n          return regressedTuple.predict(predictors);\n        } else if (second instanceof Matrix) {\n\n          Matrix m = (Matrix) second;\n          if (regressedTuple.getScale()) {\n            m = regressedTuple.scale(m);\n          }\n          double[][] data = m.getData();\n          List<Number> predictions = new ArrayList<>();\n          for (double[] predictors : data) {\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList<>();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object ... objects) throws IOException {\n    if(objects.length != 2 && objects.length != 3) {\n      throw new IOException(\"The predict function expects 2 or 3 parameters.\");\n    }\n\n    Object first = objects[0];\n    Object second = objects[1];\n\n    if (!(first instanceof BivariateFunction) &&\n        !(first instanceof VectorFunction) &&\n        !(first instanceof RegressionEvaluator.RegressionTuple) &&\n        !(first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) &&\n        !(first instanceof KnnRegressionEvaluator.KnnRegressionTuple)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (!(second instanceof Number) && !(second instanceof List<?>) && !(second instanceof Matrix)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the second value, expecting a Number, Array or Matrix\", toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    if (first instanceof RegressionEvaluator.RegressionTuple) {\n\n      RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple) first;\n      if (second instanceof Number) {\n        return regressedTuple.predict(((Number) second).doubleValue());\n      } else {\n        return ((List<?>) second).stream().map(value -> regressedTuple.predict(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n\n    } else if (first instanceof OLSRegressionEvaluator.MultipleRegressionTuple) {\n\n      OLSRegressionEvaluator.MultipleRegressionTuple regressedTuple = (OLSRegressionEvaluator.MultipleRegressionTuple) first;\n      if (second instanceof List) {\n        List<Number> list = (List<Number>) second;\n        double[] predictors = new double[list.size()];\n\n        for (int i = 0; i < list.size(); i++) {\n          predictors[i] = list.get(i).doubleValue();\n        }\n\n        return regressedTuple.predict(predictors);\n      } else if (second instanceof Matrix) {\n\n        Matrix m = (Matrix) second;\n        double[][] data = m.getData();\n        List<Number> predictions = new ArrayList();\n        for (double[] predictors : data) {\n          predictions.add(regressedTuple.predict(predictors));\n        }\n        return predictions;\n      }\n\n    } else if (first instanceof KnnRegressionEvaluator.KnnRegressionTuple) {\n      KnnRegressionEvaluator.KnnRegressionTuple regressedTuple = (KnnRegressionEvaluator.KnnRegressionTuple) first;\n\n      if(regressedTuple.getBivariate()) {\n        //Handle bi-variate regression\n        if(second instanceof Number) {\n          double[] predictors = new double[1];\n          predictors[0] = ((Number)second).doubleValue();\n          return regressedTuple.predict(predictors);\n        } else if(second instanceof List) {\n          List<Number> vec = (List<Number>)second;\n          List<Number> predictions = new ArrayList();\n          for(Number num : vec) {\n            double[] predictors = new double[1];\n            predictors[0] = num.doubleValue();\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      } else {\n        //Handle multi-variate regression\n        if (second instanceof List) {\n          List<Number> list = (List<Number>) second;\n          double[] predictors = new double[list.size()];\n\n          for (int i = 0; i < list.size(); i++) {\n            predictors[i] = list.get(i).doubleValue();\n          }\n\n          if (regressedTuple.getScale()) {\n            predictors = regressedTuple.scale(predictors);\n          }\n\n          return regressedTuple.predict(predictors);\n        } else if (second instanceof Matrix) {\n\n          Matrix m = (Matrix) second;\n          if (regressedTuple.getScale()) {\n            m = regressedTuple.scale(m);\n          }\n          double[][] data = m.getData();\n          List<Number> predictions = new ArrayList();\n          for (double[] predictors : data) {\n            predictions.add(regressedTuple.predict(predictors));\n          }\n          return predictions;\n        }\n      }\n    } else if (first instanceof VectorFunction) {\n      VectorFunction vectorFunction = (VectorFunction) first;\n      UnivariateFunction univariateFunction = (UnivariateFunction)vectorFunction.getFunction();\n      if (second instanceof Number) {\n        double x = ((Number)second).doubleValue();\n        return univariateFunction.value(x);\n      } else {\n        return ((List<?>) second).stream().map(value -> univariateFunction.value(((Number) value).doubleValue())).collect(Collectors.toList());\n      }\n    } else if(first instanceof BivariateFunction) {\n      BivariateFunction bivariateFunction = (BivariateFunction) first;\n      if (objects.length == 3) {\n        Object third = objects[2];\n        double x = 0.0;\n        double y = 0.0;\n        if (second instanceof Number && third instanceof Number) {\n          x = ((Number) second).doubleValue();\n          y = ((Number) third).doubleValue();\n          return bivariateFunction.value(x, y);\n        } else {\n          throw new IOException(\"BivariateFunction requires two numberic parameters.\");\n        }\n      } else if (objects.length == 2) {\n        if (second instanceof Matrix) {\n          Matrix m = (Matrix) second;\n          double[][] data = m.getData();\n          if (data[0].length == 2) {\n            List<Number> out = new ArrayList();\n            for (double[] row : data) {\n              out.add(bivariateFunction.value(row[0], row[1]));\n            }\n            return out;\n          } else {\n            throw new IOException(\"Bivariate Function expects a matrix with two columns\");\n          }\n        } else {\n          throw new IOException(\"Bivariate Function requires a matrix parameter.\");\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"4169fa0e078ff638eaa62cb2c54034a999129766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["4169fa0e078ff638eaa62cb2c54034a999129766"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ffe323fac8aa24c486bbf238b6413bcf5f274ea":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"4169fa0e078ff638eaa62cb2c54034a999129766":["f7656aa7218845fc29808b9dfe775b9558ca4611"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4169fa0e078ff638eaa62cb2c54034a999129766"],"5a9a2a5c29b9076cadb74c558d61ea3e4942bed2":["0ffe323fac8aa24c486bbf238b6413bcf5f274ea"],"f7656aa7218845fc29808b9dfe775b9558ca4611":["5a9a2a5c29b9076cadb74c558d61ea3e4942bed2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}