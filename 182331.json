{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":1,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkConfigManager#uploadToZK(Path,String,Pattern).mjava","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path rootPath, final String zkPath,\n                         final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  private void uploadToZK(final Path rootPath, final String zkPath,\n      final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          logger.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"/dev/null","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path rootPath, final String zkPath,\n                         final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","date":1490642105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path fromPath, final String zkPath,\n                                final Pattern filenameExclusions) throws IOException {\n\n    String path = fromPath.toString();\n    if (path.endsWith(\"*\")) {\n      path = path.substring(0, path.length() - 1);\n    }\n\n    final Path rootPath = Paths.get(path);\n        \n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          // if the path exists (and presumably we're uploading data to it) just set its data\n          if (file.toFile().getName().equals(ZKNODE_DATA_FILE) && zkClient.exists(zkNode, true)) {\n            zkClient.setData(zkNode, file.toFile(), true);\n          } else {\n            zkClient.makePath(zkNode, file.toFile(), false, true);\n          }\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        if (dir.getFileName().toString().startsWith(\".\")) return FileVisitResult.SKIP_SUBTREE;\n\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  public static void uploadToZK(SolrZkClient zkClient, final Path rootPath, final String zkPath,\n                         final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7b3180545c5d5e137529b5474e018af04e07615","date":1490873944,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path fromPath, final String zkPath,\n                                final Pattern filenameExclusions) throws IOException {\n\n    String path = fromPath.toString();\n    if (path.endsWith(\"*\")) {\n      path = path.substring(0, path.length() - 1);\n    }\n\n    final Path rootPath = Paths.get(path);\n        \n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          // if the path exists (and presumably we're uploading data to it) just set its data\n          if (file.toFile().getName().equals(ZKNODE_DATA_FILE) && zkClient.exists(zkNode, true)) {\n            zkClient.setData(zkNode, file.toFile(), true);\n          } else {\n            zkClient.makePath(zkNode, file.toFile(), false, true);\n          }\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        if (dir.getFileName().toString().startsWith(\".\")) return FileVisitResult.SKIP_SUBTREE;\n\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  public static void uploadToZK(SolrZkClient zkClient, final Path rootPath, final String zkPath,\n                         final Pattern filenameExclusions) throws IOException {\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          zkClient.makePath(zkNode, file.toFile(), false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        return (dir.getFileName().toString().startsWith(\".\")) ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#uploadToZK(SolrZkClient,Path,String,Pattern).mjava","sourceNew":"  public static void uploadToZK(SolrZkClient zkClient, final Path fromPath, final String zkPath,\n                                final Pattern filenameExclusions) throws IOException {\n\n    String path = fromPath.toString();\n    if (path.endsWith(\"*\")) {\n      path = path.substring(0, path.length() - 1);\n    }\n\n    final Path rootPath = Paths.get(path);\n\n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          // if the path exists (and presumably we're uploading data to it) just set its data\n          if (file.toFile().getName().equals(ZKNODE_DATA_FILE) && zkClient.exists(zkNode, true)) {\n            zkClient.setData(zkNode, file.toFile(), true);\n          } else {\n            zkClient.makePath(zkNode, file.toFile(), false, true);\n          }\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        if (dir.getFileName().toString().startsWith(\".\")) return FileVisitResult.SKIP_SUBTREE;\n\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","sourceOld":"  public static void uploadToZK(SolrZkClient zkClient, final Path fromPath, final String zkPath,\n                                final Pattern filenameExclusions) throws IOException {\n\n    String path = fromPath.toString();\n    if (path.endsWith(\"*\")) {\n      path = path.substring(0, path.length() - 1);\n    }\n\n    final Path rootPath = Paths.get(path);\n        \n    if (!Files.exists(rootPath))\n      throw new IOException(\"Path \" + rootPath + \" does not exist\");\n\n    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        String filename = file.getFileName().toString();\n        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {\n          log.info(\"uploadToZK skipping '{}' due to filenameExclusions '{}'\", filename, filenameExclusions);\n          return FileVisitResult.CONTINUE;\n        }\n        String zkNode = createZkNodeName(zkPath, rootPath, file);\n        try {\n          // if the path exists (and presumably we're uploading data to it) just set its data\n          if (file.toFile().getName().equals(ZKNODE_DATA_FILE) && zkClient.exists(zkNode, true)) {\n            zkClient.setData(zkNode, file.toFile(), true);\n          } else {\n            zkClient.makePath(zkNode, file.toFile(), false, true);\n          }\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error uploading file \" + file.toString() + \" to zookeeper path \" + zkNode,\n              SolrZkClient.checkInterrupted(e));\n        }\n        return FileVisitResult.CONTINUE;\n      }\n\n      @Override\n      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n        if (dir.getFileName().toString().startsWith(\".\")) return FileVisitResult.SKIP_SUBTREE;\n\n        return FileVisitResult.CONTINUE;\n      }\n    });\n  }\n\n","bugFix":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7b3180545c5d5e137529b5474e018af04e07615":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"]},"commit2Childs":{"c7b3180545c5d5e137529b5474e018af04e07615":[],"f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["c7b3180545c5d5e137529b5474e018af04e07615","f4dbb79e6da9d3d2ef8d3890b5619da3c1fba62e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7b3180545c5d5e137529b5474e018af04e07615","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}