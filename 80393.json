{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00aca69329b84bc12b5a402a8745f8e4db7b7d40","date":1506911750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      if (!clusterPreferences.isEmpty()) {\n        //this is to set the approximate value according to the precision\n        ArrayList<Row> tmpMatrix = new ArrayList<>(matrix);\n        for (Preference p : clusterPreferences) {\n          Collections.sort(tmpMatrix, (r1, r2) -> p.compare(r1, r2, false));\n          p.setApproxVal(tmpMatrix);\n        }\n        //approximate values are set now. Let's do recursive sorting\n        Collections.sort(matrix, (Row r1, Row r2) -> {\n          int result = clusterPreferences.get(0).compare(r1, r2, true);\n          if (result == 0) result = clusterPreferences.get(0).compare(r1, r2, false);\n          return result;\n        });\n      }\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    private void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(matrix);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this, null);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      sortNodes();\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this, null);\n        violations.addAll(errs);\n      }\n    }\n\n","sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      setApproxValuesAndSortNodes(clusterPreferences, matrix);\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this, null);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#applyRules().mjava","sourceNew":null,"sourceOld":"    /**\n     * Apply the preferences and conditions\n     */\n    void applyRules() {\n      sortNodes();\n\n      for (Clause clause : expandedClauses) {\n        List<Violation> errs = clause.test(this, null);\n        violations.addAll(errs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"16a22f8085bb46850c91784e94f7714345011404":["9837f40c922407d857991971de6def18eda0857b"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["16a22f8085bb46850c91784e94f7714345011404"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["eaca6a0674512222004d9a2b0ca95d86bda20f1c","9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9837f40c922407d857991971de6def18eda0857b":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["eaca6a0674512222004d9a2b0ca95d86bda20f1c","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"00aca69329b84bc12b5a402a8745f8e4db7b7d40":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"16a22f8085bb46850c91784e94f7714345011404":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"58e890cd5653ae8550bc6088d739f4eaaf950aff":["3f504512a03d978990cbff30db0522b354e846db"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["16a22f8085bb46850c91784e94f7714345011404","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["00aca69329b84bc12b5a402a8745f8e4db7b7d40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}