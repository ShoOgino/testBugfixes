{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4","date":1443729405,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if (rb.isNeedDocSet() || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if ((rb.getQueryCommand().getFlags() & SolrIndexSearcher.GET_DOCSET) != 0 || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if (rb.isNeedDocSet() || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if (rb.isNeedDocSet() || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if (rb.isNeedDocSet() || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    // If we have a group.query we need to query all shards... Or we move this to the group first phase queries\n    boolean containsGroupByQuery = rb.getGroupingSpec().getQueries().length > 0;\n    // TODO: If groups.truncate=true we only have to query the specific shards even faceting and statistics are enabled\n    if (rb.isNeedDocSet() || containsGroupByQuery) {\n      // In case we need more results such as faceting and statistics we have to query all shards\n      return createRequestForAllShards(rb);\n    } else {\n      // In case we only need top groups we only have to query the shards that contain these groups.\n      return createRequestForSpecificShards(rb);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ccc08aa684aee4964baee0644a6ba047bfd70829","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4"],"e5b55cbdbc5dfead52f0b8b98d5867dcbacc39c4":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}