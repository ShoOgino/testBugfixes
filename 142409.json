{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testQuestionmark().mjava","sourceNew":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests Wildcard queries with a question mark.\n   *\n   * @throws IOException if an error occurs\n   */\n  public void testQuestionmark()\n      throws IOException {\n    Directory indexStore = getIndexStore(\"body\", new String[]\n    {\"metal\", \"metals\", \"mXtals\", \"mXtXls\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query1 = new WildcardQuery(new Term(\"body\", \"m?tal\"));\n    Query query2 = new WildcardQuery(new Term(\"body\", \"metal?\"));\n    Query query3 = new WildcardQuery(new Term(\"body\", \"metals?\"));\n    Query query4 = new WildcardQuery(new Term(\"body\", \"m?t?ls\"));\n    Query query5 = new WildcardQuery(new Term(\"body\", \"M?t?ls\"));\n    Query query6 = new WildcardQuery(new Term(\"body\", \"meta??\"));\n    \n    assertMatches(searcher, query1, 1); \n    assertMatches(searcher, query2, 1);\n    assertMatches(searcher, query3, 0);\n    assertMatches(searcher, query4, 3);\n    assertMatches(searcher, query5, 0);\n    assertMatches(searcher, query6, 1); // Query: 'meta??' matches 'metals' not 'metal'\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}