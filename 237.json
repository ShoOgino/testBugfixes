{"path":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","commits":[{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.search(new TermQuery(new Term(\"id\", docId.toString())), 1).totalHits);\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.search(new TermQuery(new Term(\"id\", docId.toString())), 1).totalHits);\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","sourceNew":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.count(new TermQuery(new Term(\"id\", docId.toString()))));\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.search(new TermQuery(new Term(\"id\", docId.toString())), 1).totalHits);\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSoftDeletesDirectoryReaderWrapper#testMixSoftAndHardDeletes().mjava","sourceNew":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.count(new TermQuery(new Term(\"id\", docId.toString()))));\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  public void testMixSoftAndHardDeletes() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig indexWriterConfig = newIndexWriterConfig();\n    String softDeletesField = \"soft_delete\";\n    indexWriterConfig.setSoftDeletesField(softDeletesField);\n    IndexWriter writer = new IndexWriter(dir, indexWriterConfig);\n    Set<Integer> uniqueDocs = new HashSet<>();\n    for (int i = 0; i < 100; i++) {\n      int docId = random().nextInt(5);\n      uniqueDocs.add(docId);\n      Document doc = new Document();\n      doc.add(new StringField(\"id\",  String.valueOf(docId), Field.Store.YES));\n      if (docId %  2 == 0) {\n        writer.updateDocument(new Term(\"id\", String.valueOf(docId)), doc);\n      } else {\n        writer.softUpdateDocument(new Term(\"id\", String.valueOf(docId)), doc,\n            new NumericDocValuesField(softDeletesField,  0));\n      }\n    }\n\n    writer.commit();\n    writer.close();\n    DirectoryReader reader = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(dir), softDeletesField);\n    assertEquals(uniqueDocs.size(), reader.numDocs());\n    IndexSearcher searcher = new IndexSearcher(reader);\n    for (Integer docId : uniqueDocs) {\n      assertEquals(1, searcher.search(new TermQuery(new Term(\"id\", docId.toString())), 1).totalHits);\n    }\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb0130363fa13c53e4e78317c35b3b45a3089276"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d58e44159788900f4a2113b84463dc3fbbf80f20","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}