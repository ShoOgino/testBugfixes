{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"value\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"value\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"value\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"value\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"value\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new MatchAllDocsQuery(), qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new CachingWrapperFilter(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery booleanQuery = new BooleanQuery();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), qwf), 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), new FilterWrapper(qwf)), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"value\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    TermQuery termQuery = new TermQuery(new Term(\"field\", \"value\"));\n\n    // should not throw exception with primitive query\n    QueryWrapperFilter qwf = new QueryWrapperFilter(termQuery);\n\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with complex primitive query\n    BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n    booleanQuery.add(termQuery, Occur.MUST);\n    booleanQuery.add(new TermQuery(new Term(\"field\", \"missing\")),\n        Occur.MUST_NOT);\n    qwf = new QueryWrapperFilter(termQuery);\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // should not throw exception with non primitive Query (doesn't implement\n    // Query#createWeight)\n    qwf = new QueryWrapperFilter(new FuzzyQuery(new Term(\"field\", \"valu\")));\n\n    hits = searcher.search(qwf, 10);\n    assertEquals(1, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(1, hits.totalHits);\n\n    // test a query with no hits\n    termQuery = new TermQuery(new Term(\"field\", \"not_exist\"));\n    qwf = new QueryWrapperFilter(termQuery);\n    hits = searcher.search(qwf, 10);\n    assertEquals(0, hits.totalHits);\n    hits = searcher.search(new FilterWrapper(qwf), 10);\n    assertEquals(0, hits.totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["1db68e96dd908fcd79ef809095822736aa601d08"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}