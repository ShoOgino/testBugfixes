{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.add(\"key\", metricsKeyVsTag.keySet().toArray(new String[metricsKeyVsTag.size()]));\n        try {\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          metricsKeyVsTag.forEach((key, tag) -> {\n            Object v = Utils.getObjectByPath(rsp.nl, true, Arrays.asList(\"metrics\", key));\n            if (v != null) snitchContext.getTags().put(tag, v);\n          });\n        } catch (Exception e) {\n          log.warn(\"could not get tags from node \" + solrNode, e);\n        }\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, n.doubleValue() / 1024.0d / 1024.0d / 1024.0d);\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"744465f732e2b3edb5c265322043558ae158c076","date":1515499090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, String> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d6bec22994bec86702ad05304ae983f7be5b5a7","date":1530715192,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", new Function<Object, Pair<String,Object>>() {\n          @Override\n          public Pair<String, Object> apply(Object o) {\n            if(\"true\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n            }\n            if(\"false\".equals(String.valueOf(o))){\n              return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n            }\n            return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n          }\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(DISK)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(DISK, Suggestion.getTagType(DISK).convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5868a05ac7e3b4d7eec3a299acddc4f4943aee83","date":1542008345,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          } catch (SolrException | SolrServerException | SocketException e) {\n            boolean hasCauseSocketException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof SocketException) {\n                hasCauseSocketException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseSocketException || e instanceof SocketException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n\n","bugFix":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d7a279783df4eb59276dac6cacd73d6de7e8807","date":1543645575,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          } catch (SolrException | SolrServerException | SocketException e) {\n            boolean hasCauseSocketException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof SocketException) {\n                hasCauseSocketException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseSocketException || e instanceof SocketException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dd49744e2e8021bfde113931265c0fcc6967ae6","date":1557218445,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n            break;\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n            break;\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries || rsp == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n            break;\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239ac2cf147bbfbf488bc36002d5d26b2939d4ba","date":1587405343,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = null;\n        int retries = 5;\n        int cnt = 0;\n        while (cnt++ < retries) {\n          try {\n            rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n            break;\n          } catch (SolrException | SolrServerException | IOException e) {\n            if (e instanceof SolrServerException) {\n              \n            }\n            \n            boolean hasCauseIOException = false;\n            Throwable cause = e;\n            while (cause != null) {\n              if (cause instanceof IOException) {\n                hasCauseIOException = true;\n                break;\n              }\n              cause = cause.getCause();\n            }\n            if (hasCauseIOException || e instanceof IOException) {\n              log.info(\"Error on getting remote info, trying again: \" + e.getMessage());\n              Thread.sleep(500);\n              continue;\n            } else {\n              throw e;\n            }\n          }\n        }\n        \n        if (cnt == retries || rsp == null) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not get remote info after many retries on NoHttpResponseException\");\n        }\n                \n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd0843f4a8a112d31307650540ccc0a50548e10b","date":1589838089,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.cores\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n        NamedList<?> metrics = (NamedList<?>) rsp.nl.get(\"metrics\");\n\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          NamedList<?> node = (NamedList<?>) metrics.get(\"solr.node\");\n          int count = 0;\n          for (String leafCoreMetricName : new String[]{\"lazy\", \"loaded\", \"unloaded\"}) {\n            Number n = (Number) node.get(\"CONTAINER.cores.\" + leafCoreMetricName);\n            if (n != null) count += n.intValue();\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7e9f81de2d4c2cc35242e5ecb215f23728566f9","date":1589891213,"type":3,"author":"Tomoko Uchida","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.cores\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n        NamedList<?> metrics = (NamedList<?>) rsp.nl.get(\"metrics\");\n\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          NamedList<?> node = (NamedList<?>) metrics.get(\"solr.node\");\n          int count = 0;\n          for (String leafCoreMetricName : new String[]{\"lazy\", \"loaded\", \"unloaded\"}) {\n            Number n = (Number) node.get(\"CONTAINER.cores.\" + leafCoreMetricName);\n            if (n != null) count += n.intValue();\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.core\");\n        prefixes.add(\"CORE.coreName\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n\n        Map m = rsp.nl.asMap(4);\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(m, true, \"metrics/solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          int count = 0;\n          Map cores = (Map) m.get(\"metrics\");\n          for (Object o : cores.keySet()) {\n            if (o.toString().startsWith(\"solr.core.\")) count++;\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(m, true, \"metrics/solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.AutoScalingSnitch#getRemoteInfo(String,Set[String],SnitchContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n      if (!((ClientSnitchCtx)ctx).isNodeAlive(solrNode)) return;\n      ClientSnitchCtx snitchContext = (ClientSnitchCtx) ctx;\n      Map<String, Object> metricsKeyVsTag = new HashMap<>();\n      for (String tag : requestedTags) {\n        if (tag.startsWith(SYSPROP)) {\n          metricsKeyVsTag.put(\"solr.jvm:system.properties:\" + tag.substring(SYSPROP.length()), tag);\n        } else if (tag.startsWith(METRICS_PREFIX)) {\n          metricsKeyVsTag.put(tag.substring(METRICS_PREFIX.length()), tag);\n        }\n      }\n      if (requestedTags.contains(ImplicitSnitch.DISKTYPE)) {\n        metricsKeyVsTag.put(\"solr.node:CONTAINER.fs.coreRoot.spins\", (Function<Object, Pair<String, Object>>) o -> {\n          if(\"true\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"rotational\");\n          }\n          if(\"false\".equals(String.valueOf(o))){\n            return new Pair<>(ImplicitSnitch.DISKTYPE, \"ssd\");\n          }\n          return new Pair<>(ImplicitSnitch.DISKTYPE,null);\n\n        });\n      }\n      if (!metricsKeyVsTag.isEmpty()) {\n        fetchReplicaMetrics(solrNode, snitchContext, metricsKeyVsTag);\n      }\n\n      Set<String> groups = new HashSet<>();\n      List<String> prefixes = new ArrayList<>();\n      if (requestedTags.contains(DISK)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.usableSpace\");\n      }\n      if (requestedTags.contains(TOTALDISK.tagName)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.fs.totalSpace\");\n      }\n      if (requestedTags.contains(CORES)) {\n        groups.add(\"solr.node\");\n        prefixes.add(\"CONTAINER.cores\");\n      }\n      if (requestedTags.contains(SYSLOADAVG)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"os.systemLoadAverage\");\n      }\n      if (requestedTags.contains(HEAPUSAGE)) {\n        groups.add(\"solr.jvm\");\n        prefixes.add(\"memory.heap.usage\");\n      }\n      if (groups.isEmpty() || prefixes.isEmpty()) return;\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"group\", StrUtils.join(groups, ','));\n      params.add(\"prefix\", StrUtils.join(prefixes, ','));\n\n      try {\n        SimpleSolrResponse rsp = snitchContext.invokeWithRetry(solrNode, CommonParams.METRICS_PATH, params);\n        NamedList<?> metrics = (NamedList<?>) rsp.nl.get(\"metrics\");\n\n        if (requestedTags.contains(FREEDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.usableSpace\");\n          if (n != null) ctx.getTags().put(FREEDISK.tagName, FREEDISK.convertVal(n));\n        }\n        if (requestedTags.contains(TOTALDISK.tagName)) {\n          Object n = Utils.getObjectByPath(metrics, true, \"solr.node/CONTAINER.fs.totalSpace\");\n          if (n != null) ctx.getTags().put(TOTALDISK.tagName, TOTALDISK.convertVal(n));\n        }\n        if (requestedTags.contains(CORES)) {\n          NamedList<?> node = (NamedList<?>) metrics.get(\"solr.node\");\n          int count = 0;\n          for (String leafCoreMetricName : new String[]{\"lazy\", \"loaded\", \"unloaded\"}) {\n            Number n = (Number) node.get(\"CONTAINER.cores.\" + leafCoreMetricName);\n            if (n != null) count += n.intValue();\n          }\n          ctx.getTags().put(CORES, count);\n        }\n        if (requestedTags.contains(SYSLOADAVG)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/os.systemLoadAverage\");\n          if (n != null) ctx.getTags().put(SYSLOADAVG, n.doubleValue() * 100.0d);\n        }\n        if (requestedTags.contains(HEAPUSAGE)) {\n          Number n = (Number) Utils.getObjectByPath(metrics, true, \"solr.jvm/memory.heap.usage\");\n          if (n != null) ctx.getTags().put(HEAPUSAGE, n.doubleValue() * 100.0d);\n        }\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error getting remote info\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"744465f732e2b3edb5c265322043558ae158c076":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1bbcda32e5cd37ef61ea1190bacd080308e22070","744465f732e2b3edb5c265322043558ae158c076"],"3f504512a03d978990cbff30db0522b354e846db":["d7e9f81de2d4c2cc35242e5ecb215f23728566f9"],"5868a05ac7e3b4d7eec3a299acddc4f4943aee83":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5868a05ac7e3b4d7eec3a299acddc4f4943aee83"],"78231225260fb5b3bf9920f203d71477d5501c65":["7d6bec22994bec86702ad05304ae983f7be5b5a7"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0dd49744e2e8021bfde113931265c0fcc6967ae6":["1d7a279783df4eb59276dac6cacd73d6de7e8807"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["0dd49744e2e8021bfde113931265c0fcc6967ae6"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"d7e9f81de2d4c2cc35242e5ecb215f23728566f9":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba","fd0843f4a8a112d31307650540ccc0a50548e10b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"fd0843f4a8a112d31307650540ccc0a50548e10b":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"1d7a279783df4eb59276dac6cacd73d6de7e8807":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b94236357aaa22b76c10629851fe4e376e0cea82","7d6bec22994bec86702ad05304ae983f7be5b5a7"]},"commit2Childs":{"744465f732e2b3edb5c265322043558ae158c076":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7d6bec22994bec86702ad05304ae983f7be5b5a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5868a05ac7e3b4d7eec3a299acddc4f4943aee83":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d7a279783df4eb59276dac6cacd73d6de7e8807"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"7d6bec22994bec86702ad05304ae983f7be5b5a7":["78231225260fb5b3bf9920f203d71477d5501c65","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0dd49744e2e8021bfde113931265c0fcc6967ae6":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["5868a05ac7e3b4d7eec3a299acddc4f4943aee83","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["239ac2cf147bbfbf488bc36002d5d26b2939d4ba"],"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d7e9f81de2d4c2cc35242e5ecb215f23728566f9":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["744465f732e2b3edb5c265322043558ae158c076","b94236357aaa22b76c10629851fe4e376e0cea82"],"fd0843f4a8a112d31307650540ccc0a50548e10b":["d7e9f81de2d4c2cc35242e5ecb215f23728566f9"],"1d7a279783df4eb59276dac6cacd73d6de7e8807":["0dd49744e2e8021bfde113931265c0fcc6967ae6"],"239ac2cf147bbfbf488bc36002d5d26b2939d4ba":["d7e9f81de2d4c2cc35242e5ecb215f23728566f9","fd0843f4a8a112d31307650540ccc0a50548e10b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}