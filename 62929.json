{"path":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","commits":[{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","pathOld":"/dev/null","sourceNew":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f1 = newField(\"f1\", \"This field has term freqs\", ft);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n        \n    Field f1 = newField(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    f1.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f1 = newField(\"f1\", \"This field has term freqs\", ft);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f1 = newField(\"f1\", \"This field has term freqs\", ft);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitPositions#testNoPrxFile().mjava","sourceNew":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f1 = newField(\"f1\", \"This field has term freqs\", ft);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","sourceOld":"  // Verifies no *.prx exists when all fields omit term positions:\n  public void testNoPrxFile() throws Throwable {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(ram, newIndexWriterConfig(\n                                                                   TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3).setMergePolicy(newLogMergePolicy()));\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    lmp.setMergeFactor(2);\n    lmp.setUseCompoundFile(false);\n    Document d = new Document();\n\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    Field f1 = newField(\"f1\", \"This field has term freqs\", ft);\n    d.add(f1);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    writer.commit();\n\n    assertNoPrx(ram);\n    \n    // now add some documents with positions, and check there is no prox after optimization\n    d = new Document();\n    f1 = newField(\"f1\", \"This field has positions\", TextField.TYPE_UNSTORED);\n    d.add(f1);\n    \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n    // flush\n    writer.close();\n\n    assertNoPrx(ram);\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}