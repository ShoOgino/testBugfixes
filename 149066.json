{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType + \" (resource=\" + input + \")\");\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType + \" (resource=\" + input + \")\");\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType + \" (resource=\" + input + \")\");\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType + \" (resource=\" + input + \")\");\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType, input);\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType + \" (resource=\" + input + \")\");\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType, input);\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType, input);\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType, input);\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosFormat.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40FieldInfosFormat.CODEC_NAME, \n                                   Lucene40FieldInfosFormat.FORMAT_START, \n                                   Lucene40FieldInfosFormat.FORMAT_CURRENT);\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readVInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosFormat.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosFormat.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosFormat.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosFormat.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosFormat.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosFormat.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final LegacyDocValuesType oldValuesType = getDocValuesType((byte) (val & 0x0F));\n        final LegacyDocValuesType oldNormsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        final Map<String,String> attributes = input.readStringStringMap();;\n        if (oldValuesType.mapping != null) {\n          attributes.put(LEGACY_DV_TYPE_KEY, oldValuesType.name());\n        }\n        if (oldNormsType.mapping != null) {\n          if (oldNormsType.mapping != DocValuesType.NUMERIC) {\n            throw new CorruptIndexException(\"invalid norm type: \" + oldNormsType, input);\n          }\n          attributes.put(LEGACY_NORM_TYPE_KEY, oldNormsType.name());\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, oldValuesType.mapping, oldNormsType.mapping, -1, Collections.unmodifiableMap(attributes));\n      }\n\n      CodecUtil.checkEOF(input);\n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}