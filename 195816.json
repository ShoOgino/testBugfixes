{"path":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"/dev/null","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        if (!c.prohibited)\n          w.normalize(norm);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d1fc81afb0c32e0b7589e656cceb5cf177093fa","date":1093637352,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        if (!c.isProhibited())\n          w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        if (!c.prohibited)\n          w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05","date":1150765993,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        if (!c.isProhibited())\n          w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e","date":1166323237,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.get(i);\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.elementAt(i);\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16b4c47a274459f8f6117722678d8dfe7c97d1fc","date":1196092131,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        BooleanClause c = (BooleanClause)clauses.get(i);\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f758d6efad251890e720eb5370329f6ab5b509","date":1217253519,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight)weights.get(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight)weights.elementAt(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (int i = 0 ; i < weights.size(); i++) {\n        Weight w = (Weight)weights.get(i);\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        QueryWeight w = (QueryWeight) iter.next();\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Weight w : weights) {\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Iterator iter = weights.iterator(); iter.hasNext();) {\n        Weight w = (Weight) iter.next();\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#normalize(float).mjava","sourceNew":"    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Weight w : weights) {\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void normalize(float norm) {\n      norm *= getBoost();                         // incorporate boost\n      for (Weight w : weights) {\n        // normalize all clauses, (even if prohibited in case of side affects)\n        w.normalize(norm);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19f758d6efad251890e720eb5370329f6ab5b509":["16b4c47a274459f8f6117722678d8dfe7c97d1fc"],"16b4c47a274459f8f6117722678d8dfe7c97d1fc":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["7a53ba34cf04e8d72c7d4c4bd297d32206a25c05"],"052fac7830290bd38a04cddee1a121ee07656b56":["19f758d6efad251890e720eb5370329f6ab5b509"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"]},"commit2Childs":{"19f758d6efad251890e720eb5370329f6ab5b509":["052fac7830290bd38a04cddee1a121ee07656b56"],"16b4c47a274459f8f6117722678d8dfe7c97d1fc":["19f758d6efad251890e720eb5370329f6ab5b509"],"7a53ba34cf04e8d72c7d4c4bd297d32206a25c05":["570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["0d1fc81afb0c32e0b7589e656cceb5cf177093fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d1fc81afb0c32e0b7589e656cceb5cf177093fa":["7a53ba34cf04e8d72c7d4c4bd297d32206a25c05"],"fe941135bdfc28c81e20b4d21422f8726af34925":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"570e1572d75ec17bfc5c2e0e4e4dad03e3ce323e":["16b4c47a274459f8f6117722678d8dfe7c97d1fc"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}