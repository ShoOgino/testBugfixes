{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":null,"sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}