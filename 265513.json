{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","commits":[{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"55980207f1977bd1463465de1659b821347e2fa8":["c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}