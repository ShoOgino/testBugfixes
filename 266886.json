{"path":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","commits":[{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"/dev/null","sourceNew":"  public final void finishCommit(Directory dir) throws IOException {\n    if (pendingOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingOutput.finishCommit();\n      pendingOutput.close();\n      pendingOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae5e4fc9fa92e2ee7a5606c11dd854d923c59cc5","date":1242273429,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  public final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  public final void finishCommit(Directory dir) throws IOException {\n    if (pendingOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingOutput.finishCommit();\n      pendingOutput.close();\n      pendingOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  public final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["ae5e4fc9fa92e2ee7a5606c11dd854d923c59cc5"],"ae5e4fc9fa92e2ee7a5606c11dd854d923c59cc5":["455aeff4fef915340c5b19d71d5e147034e83093"],"455aeff4fef915340c5b19d71d5e147034e83093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f33fc116e28d7704378c9dd333711753bd0c9706"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ae5e4fc9fa92e2ee7a5606c11dd854d923c59cc5":["f33fc116e28d7704378c9dd333711753bd0c9706"],"455aeff4fef915340c5b19d71d5e147034e83093":["ae5e4fc9fa92e2ee7a5606c11dd854d923c59cc5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["455aeff4fef915340c5b19d71d5e147034e83093"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}