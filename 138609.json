{"path":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"/dev/null","sourceNew":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE.length; i++) {\n        String ext = IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE[i];\n        String fileName = name + \".\" + ext;\n        if (dir.fileExists(fileName)) {\n          files.add(fileName);\n        }\n      }\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen > 0 || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files:\n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen > 0) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (-1 == gen) {\n          // No separate norms but maybe non-separate norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (0 == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b685e89f45e34ea31f9ca89912e4f29038818ff6","date":1173986546,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE.length; i++) {\n        String ext = IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE[i];\n        String fileName = name + \".\" + ext;\n        if (dir.fileExists(fileName)) {\n          files.add(fileName);\n        }\n      }\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE.length; i++) {\n        String ext = IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE[i];\n        String fileName = name + \".\" + ext;\n        if (dir.fileExists(fileName)) {\n          files.add(fileName);\n        }\n      }\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen > 0 || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files:\n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen > 0) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (-1 == gen) {\n          // No separate norms but maybe non-separate norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (0 == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.SINGLE_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      for (int i = 0; i < IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE.length; i++) {\n        String ext = IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE[i];\n        String fileName = name + \".\" + ext;\n        if (dir.fileExists(fileName)) {\n          files.add(fileName);\n        }\n      }\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.list();\n      if (allFiles == null)\n        throw new IOException(\"cannot read directory \" + dir + \": list() returned null\");\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc","date":1255773182,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(IndexFileNames.segmentFileName(name, IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      for (String ext : IndexFileNames.NON_STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      } else {\n        for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n          addIfExists(files, IndexFileNames.segmentFileName(docStoreSegment, ext));\n      }\n    } else if (!useCompoundFile) {\n      for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i);\n          } else if (!hasSingleNormFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION);\n      else\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION);\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(name + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n    } else {\n      final String[] exts = IndexFileNames.NON_STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(docStoreSegment + \".\" + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);\n      } else {\n        final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n        for(int i=0;i<exts.length;i++)\n          addIfExists(files, docStoreSegment + \".\" + exts[i]);\n      }\n    } else if (!useCompoundFile) {\n      // We are not sharing, and, these files were not\n      // included in the compound file\n      final String[] exts = IndexFileNames.STORE_INDEX_EXTENSIONS;\n      for(int i=0;i<exts.length;i++)\n        addIfExists(files, name + \".\" + exts[i]);\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION + i;\n          } else if (!hasSingleNormFile) {\n            fileName = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION + i;\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = name + \".\" + IndexFileNames.SEPARATE_NORMS_EXTENSION;\n      else\n        prefix = name + \".\" + IndexFileNames.PLAIN_NORMS_EXTENSION;\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(IndexFileNames.segmentFileName(name, IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      for (String ext : IndexFileNames.NON_STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      } else {\n        for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n          addIfExists(files, IndexFileNames.segmentFileName(docStoreSegment, ext));\n      }\n    } else if (!useCompoundFile) {\n      for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i);\n          } else if (!hasSingleNormFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION);\n      else\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION);\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n\n    if (files != null) {\n      // Already cached:\n      return files;\n    }\n    \n    files = new ArrayList<String>();\n    \n    boolean useCompoundFile = getUseCompoundFile();\n\n    if (useCompoundFile) {\n      files.add(IndexFileNames.segmentFileName(name, IndexFileNames.COMPOUND_FILE_EXTENSION));\n    } else {\n      for (String ext : IndexFileNames.NON_STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    if (docStoreOffset != -1) {\n      // We are sharing doc stores (stored fields, term\n      // vectors) with other segments\n      assert docStoreSegment != null;\n      if (docStoreIsCompoundFile) {\n        files.add(IndexFileNames.segmentFileName(docStoreSegment, IndexFileNames.COMPOUND_FILE_STORE_EXTENSION));\n      } else {\n        for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n          addIfExists(files, IndexFileNames.segmentFileName(docStoreSegment, ext));\n      }\n    } else if (!useCompoundFile) {\n      for (String ext : IndexFileNames.STORE_INDEX_EXTENSIONS)\n        addIfExists(files, IndexFileNames.segmentFileName(name, ext));\n    }\n\n    String delFileName = IndexFileNames.fileNameFromGeneration(name, IndexFileNames.DELETES_EXTENSION, delGen);\n    if (delFileName != null && (delGen >= YES || dir.fileExists(delFileName))) {\n      files.add(delFileName);\n    }\n\n    // Careful logic for norms files    \n    if (normGen != null) {\n      for(int i=0;i<normGen.length;i++) {\n        long gen = normGen[i];\n        if (gen >= YES) {\n          // Definitely a separate norm file, with generation:\n          files.add(IndexFileNames.fileNameFromGeneration(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i, gen));\n        } else if (NO == gen) {\n          // No separate norms but maybe plain norms\n          // in the non compound file case:\n          if (!hasSingleNormFile && !useCompoundFile) {\n            String fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n            if (dir.fileExists(fileName)) {\n              files.add(fileName);\n            }\n          }\n        } else if (CHECK_DIR == gen) {\n          // Pre-2.1: we have to check file existence\n          String fileName = null;\n          if (useCompoundFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION + i);\n          } else if (!hasSingleNormFile) {\n            fileName = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION + i);\n          }\n          if (fileName != null && dir.fileExists(fileName)) {\n            files.add(fileName);\n          }\n        }\n      }\n    } else if (preLockless || (!hasSingleNormFile && !useCompoundFile)) {\n      // Pre-2.1: we have to scan the dir to find all\n      // matching _X.sN/_X.fN files for our segment:\n      String prefix;\n      if (useCompoundFile)\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.SEPARATE_NORMS_EXTENSION);\n      else\n        prefix = IndexFileNames.segmentFileName(name, IndexFileNames.PLAIN_NORMS_EXTENSION);\n      int prefixLength = prefix.length();\n      String[] allFiles = dir.listAll();\n      final IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n      for(int i=0;i<allFiles.length;i++) {\n        String fileName = allFiles[i];\n        if (filter.accept(null, fileName) && fileName.length() > prefixLength && Character.isDigit(fileName.charAt(prefixLength)) && fileName.startsWith(prefix)) {\n          files.add(fileName);\n        }\n      }\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d54c7739bfe85d68f0352823cd70c10c619fad38":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"775efee7f959e0dd3df7960b93767d9e00b78751":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"]},"commit2Childs":{"d54c7739bfe85d68f0352823cd70c10c619fad38":["b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b685e89f45e34ea31f9ca89912e4f29038818ff6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"b4e40ecf6eb9bff831572fe33a2758f9ef1e0dcc":["775efee7f959e0dd3df7960b93767d9e00b78751"],"8b6187898fc4413ccd18229711786550a280383c":["b685e89f45e34ea31f9ca89912e4f29038818ff6"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}