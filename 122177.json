{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n        values = new byte[maxDoc];\n        for(int docID=0;docID<maxDoc;docID++) {\n          values[docID] = (byte) valuesIn.get(docID);\n        }\n      } else {\n\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a","date":1353336547,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) ramInstance.get(docID);\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n        values = new byte[maxDoc];\n        for(int docID=0;docID<maxDoc;docID++) {\n          values[docID] = (byte) valuesIn.get(docID);\n        }\n      } else {\n\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) ramInstance.get(docID);\n          }\n        };\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) ramInstance.get(docID);\n          }\n        };\n        // nocommit should we throw exc if parser isn't\n        // null?  if setDocsWithField is true?\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2","date":1354573582,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) valuesIn.get(docID);\n          }\n        };\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        final NumericDocValues ramInstance = valuesIn.newRAMInstance();\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) ramInstance.get(docID);\n          }\n        };\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6312aec6ba581f919d406ceff362bef430382c31","date":1358775555,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      final NumericDocValues valuesIn = reader.getNumericDocValues(key.field);\n      if (valuesIn != null) {\n        return new Bytes() {\n          @Override\n          public byte get(int docID) {\n            return (byte) valuesIn.get(docID);\n          }\n        };\n      } else {\n\n        int maxDoc = reader.maxDoc();\n        final byte[] values;\n        final ByteParser parser = (ByteParser) key.custom;\n        if (parser == null) {\n          // Confusing: must delegate to wrapper (vs simply\n          // setting parser = DEFAULT_SHORT_PARSER) so cache\n          // key includes DEFAULT_SHORT_PARSER:\n          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n        }\n\n        values = new byte[maxDoc];\n\n        Uninvert u = new Uninvert() {\n            private byte currentValue;\n\n            @Override\n            public void visitTerm(BytesRef term) {\n              currentValue = parser.parseByte(term);\n            }\n\n            @Override\n            public void visitDoc(int docID) {\n              values[docID] = currentValue;\n            }\n          };\n\n        u.uninvert(reader, key.field, setDocsWithField);\n\n        if (setDocsWithField) {\n          wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n        }\n\n        return new BytesFromArray(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n\n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n\n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n\n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.ByteCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)\n        throws IOException {\n\n      int maxDoc = reader.maxDoc();\n      final byte[] values;\n      final ByteParser parser = (ByteParser) key.custom;\n      if (parser == null) {\n        // Confusing: must delegate to wrapper (vs simply\n        // setting parser = DEFAULT_SHORT_PARSER) so cache\n        // key includes DEFAULT_SHORT_PARSER:\n        return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);\n      }\n\n      values = new byte[maxDoc];\n\n      Uninvert u = new Uninvert() {\n          private byte currentValue;\n\n          @Override\n          public void visitTerm(BytesRef term) {\n            currentValue = parser.parseByte(term);\n          }\n\n          @Override\n          public void visitDoc(int docID) {\n            values[docID] = currentValue;\n          }\n\n          @Override\n          protected TermsEnum termsEnum(Terms terms) throws IOException {\n            return parser.termsEnum(terms);\n          }\n        };\n\n      u.uninvert(reader, key.field, setDocsWithField);\n\n      if (setDocsWithField) {\n        wrapper.setDocsWithField(reader, key.field, u.docsWithField);\n      }\n\n      return new BytesFromArray(values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["418d15a87ecd752b76a13c08a5e08cbd7b14ef5a"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["6312aec6ba581f919d406ceff362bef430382c31","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6312aec6ba581f919d406ceff362bef430382c31":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["4bc9c79bf95b1262e0a6908ffbd895de19e33dc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6312aec6ba581f919d406ceff362bef430382c31":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"4bc9c79bf95b1262e0a6908ffbd895de19e33dc2":["6312aec6ba581f919d406ceff362bef430382c31"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["418d15a87ecd752b76a13c08a5e08cbd7b14ef5a"],"418d15a87ecd752b76a13c08a5e08cbd7b14ef5a":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}