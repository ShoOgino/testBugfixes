{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9d491d90695b7d889c7387b873ee33860112b86","date":1343929523,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    if (stopNow) {\n      for (ParallelTask task : t) {\n        task.task.stopNow();\n      }\n    }\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    if (stopNow) {\n      for (ParallelTask task : t) {\n        task.task.stopNow();\n      }\n    }\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/TaskSequence#doParallelTasks().mjava","sourceNew":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    if (stopNow) {\n      for (ParallelTask task : t) {\n        task.task.stopNow();\n      }\n    }\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","sourceOld":"  private int doParallelTasks() throws Exception {\n\n    final TaskStats stats = getRunData().getPoints().getCurrentStats();\n\n    initTasksArray();\n    ParallelTask t[] = runningParallelTasks = new ParallelTask[repetitions * tasks.size()];\n    // prepare threads\n    int index = 0;\n    for (int k=0; k<repetitions; k++) {\n      for (int i = 0; i < tasksArray.length; i++) {\n        final PerfTask task = tasksArray[i].clone();\n        t[index++] = new ParallelTask(task);\n      }\n    }\n    // run threads\n    startThreads(t);\n\n    // wait for all threads to complete\n    int count = 0;\n    for (int i = 0; i < t.length; i++) {\n      t[i].join();\n      count += t[i].count;\n      if (t[i].task instanceof TaskSequence) {\n        TaskSequence sub = (TaskSequence) t[i].task;\n        if (sub.countsByTime != null) {\n          if (countsByTime == null) {\n            countsByTime = new int[sub.countsByTime.length];\n          } else if (countsByTime.length < sub.countsByTime.length) {\n            countsByTime = ArrayUtil.grow(countsByTime, sub.countsByTime.length);\n          }\n          for(int j=0;j<sub.countsByTime.length;j++) {\n            countsByTime[j] += sub.countsByTime[j];\n          }\n        }\n      }\n    }\n\n    if (countsByTime != null) {\n      stats.setCountsByTime(countsByTime, logByTimeMsec);\n    }\n\n    // return total count\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f9d491d90695b7d889c7387b873ee33860112b86"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f9d491d90695b7d889c7387b873ee33860112b86"],"f9d491d90695b7d889c7387b873ee33860112b86":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9d491d90695b7d889c7387b873ee33860112b86"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","f9d491d90695b7d889c7387b873ee33860112b86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f9d491d90695b7d889c7387b873ee33860112b86":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}