{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a05409176bd65129d67a785ee70e881e238a9aef","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}