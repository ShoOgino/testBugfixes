{"path":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","commits":[{"id":"196a576c5807672fc9ec3fd6db6311bf919bab9c","date":1171834203,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) {\n    info(VERSION);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e70e4156ecc4c1d619d88d0f72eda4fe257beeb","date":1171871890,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(VERSION);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc8c0001d63aceba4db5451caa22039fd3a10fa","date":1177910931,"type":3,"author":"Bertrand Delacretaz","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0398ae7345bbadabd4c035fae97ad2b8a8233d1","date":1179949443,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n    \n    if (args.length < 2) {\n      fatal(\n         \"This command requires at least two arguments:\\n\" +\n         \"The destination url and the names of one or more XML files to POST to Solr.\" +\n         \"\\n\\texample: \" + DEFAULT_POST_URL + \" somefile.xml otherfile.xml\"\n        );\n    }\n\n    URL solrUrl = null;\n    try {\n      solrUrl = new URL(args[0]);\n    } catch (MalformedURLException e) {\n      fatal(\"First argument is not a valid URL: \" + args[0]);\n    }\n    \n    try {\n      final SimplePostTool t = new SimplePostTool(solrUrl);\n      info(\"POSTing files to \" + solrUrl + \"..\");\n      final int posted = t.postFiles(args,1);\n      if(posted > 0) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      info(posted + \" files POSTed to \" + solrUrl);\n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":["01c21ad4b39b4e8716cf4d01dfd2edcb94191b6d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","pathOld":"src/java/org/apache/solr/util/SimplePostTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    info(\"version \" + VERSION_OF_THIS_TOOL);\n\n    if (0 < args.length && \"-help\".equals(args[0])) {\n      System.out.println\n        (\"This is a simple command line tool for POSTing raw XML to a Solr\\n\"+\n         \"port.  XML data can be read from files specified as commandline\\n\"+\n         \"args; as raw commandline arg strings; or via STDIN.\\n\"+\n         \"Examples:\\n\"+\n         \"  java -Ddata=files -jar post.jar *.xml\\n\"+\n         \"  java -Ddata=args  -jar post.jar '<delete><id>42</id></delete>'\\n\"+\n         \"  java -Ddata=stdin -jar post.jar < hd.xml\\n\"+\n         \"Other options controlled by System Properties include the Solr\\n\"+\n         \"URL to POST to, and whether a commit should be executed.  These\\n\"+\n         \"are the defaults for all System Properties...\\n\"+\n         \"  -Ddata=\" + DEFAULT_DATA_MODE + \"\\n\"+\n         \"  -Durl=\" + DEFAULT_POST_URL + \"\\n\"+\n         \"  -Dcommit=\" + DEFAULT_COMMIT + \"\\n\");\n      return;\n    }\n\n    \n    URL u = null;\n    try {\n      u = new URL(System.getProperty(\"url\", DEFAULT_POST_URL));\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + u);\n    }\n    final SimplePostTool t = new SimplePostTool(u);\n\n    final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n    if (! DATA_MODES.contains(mode)) {\n      fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n    }\n\n    try {\n      if (DATA_MODE_FILES.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing files to \" + u + \"..\");\n          final int posted = t.postFiles(args,0);\n        }\n        \n      } else if (DATA_MODE_ARGS.equals(mode)) {\n        if (0 < args.length) {\n          info(\"POSTing args to \" + u + \"..\");\n          for (String a : args) {\n            final StringWriter sw = new StringWriter();\n            t.postData(new StringReader(a), sw);\n            warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n          }\n        }\n        \n      } else if (DATA_MODE_STDIN.equals(mode)) {\n        info(\"POSTing stdin to \" + u + \"..\");\n        final StringWriter sw = new StringWriter();\n        t.postData(new InputStreamReader(System.in,POST_ENCODING), sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n      if (\"yes\".equals(System.getProperty(\"commit\",DEFAULT_COMMIT))) {\n        info(\"COMMITting Solr index changes..\");\n        final StringWriter sw = new StringWriter();\n        t.commit(sw);\n        warnIfNotExpectedResponse(sw.toString(),SOLR_OK_RESPONSE_EXCERPT);\n      }\n    \n    } catch(IOException ioe) {\n      fatal(\"Unexpected IOException \" + ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5e70e4156ecc4c1d619d88d0f72eda4fe257beeb":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"ad94625fb8d088209f46650c8097196fec67f00c":["d0398ae7345bbadabd4c035fae97ad2b8a8233d1"],"d0398ae7345bbadabd4c035fae97ad2b8a8233d1":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["5e70e4156ecc4c1d619d88d0f72eda4fe257beeb"]},"commit2Childs":{"196a576c5807672fc9ec3fd6db6311bf919bab9c":["5e70e4156ecc4c1d619d88d0f72eda4fe257beeb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["196a576c5807672fc9ec3fd6db6311bf919bab9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e70e4156ecc4c1d619d88d0f72eda4fe257beeb":["efc8c0001d63aceba4db5451caa22039fd3a10fa"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d0398ae7345bbadabd4c035fae97ad2b8a8233d1":["ad94625fb8d088209f46650c8097196fec67f00c"],"efc8c0001d63aceba4db5451caa22039fd3a10fa":["d0398ae7345bbadabd4c035fae97ad2b8a8233d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}