{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to expunge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findMergesToExpungeDeletes: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose())\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose())\n          message(\"  segment \" + info.name + \" has deletions\");\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose())\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose())\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose())\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["34ce7c842452c79b12c45a8feb64e4597c7110e8","c5df35ab57c223ea11aec64b53bf611904f3dced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}