{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoCircleTest#testCircleDistance().mjava","sourceNew":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.POSITIVE_INFINITY, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCircleDistance() {\n    GeoCircle c;\n    GeoPoint gp;\n    c = GeoCircleFactory.makeGeoCircle(PlanetModel.SPHERE, 0.0, -0.5, 0.1);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.ARC,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    assertEquals(Double.MAX_VALUE, c.computeDistance(DistanceStyle.NORMAL,gp), 0.0);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.0, -0.5);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    assertEquals(0.0, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n    gp = new GeoPoint(PlanetModel.SPHERE, 0.05, -0.5);\n    assertEquals(0.05, c.computeDistance(DistanceStyle.ARC,gp), 0.000001);\n    assertEquals(0.049995, c.computeDistance(DistanceStyle.LINEAR,gp), 0.000001);\n    assertEquals(0.049979, c.computeDistance(DistanceStyle.NORMAL,gp), 0.000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["b4e444678504caf66a8060b1d514383aa4feac0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b4e444678504caf66a8060b1d514383aa4feac0c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b4e444678504caf66a8060b1d514383aa4feac0c","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}