{"path":"solr/core/src/test/org/apache/solr/update/processor/NestedAtomicUpdateTest#testBlockAtomicAdd().mjava","commits":[{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":0,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/NestedAtomicUpdateTest#testBlockAtomicAdd().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBlockAtomicAdd() throws Exception {\n\n    SolrInputDocument doc = sdoc(\"id\", \"1\",\n        \"cat_ss\", new String[] {\"aaa\", \"ccc\"},\n        \"child1\", sdoc(\"id\", \"2\", \"cat_ss\", \"child\")\n    );\n    assertU(adoc(doc));\n\n    BytesRef rootDocId = new BytesRef(\"1\");\n    SolrCore core = h.getCore();\n    SolrInputDocument block = RealTimeGetComponent.getInputDocument(core, rootDocId, RealTimeGetComponent.Resolution.ROOT_WITH_CHILDREN);\n    // assert block doc has child docs\n    assertTrue(block.containsKey(\"child1\"));\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==0\"\n    );\n\n    // commit the changes\n    assertU(commit());\n\n    SolrInputDocument committedBlock = RealTimeGetComponent.getInputDocument(core, rootDocId, RealTimeGetComponent.Resolution.ROOT_WITH_CHILDREN);\n    BytesRef childDocId = new BytesRef(\"2\");\n    // ensure the whole block is returned when resolveBlock is true and id of a child doc is provided\n    assertEquals(committedBlock.toString(), RealTimeGetComponent.getInputDocument(core, childDocId, RealTimeGetComponent.Resolution.ROOT_WITH_CHILDREN).toString());\n\n    assertJQ(req(\"q\",\"id:1\")\n        ,\"/response/numFound==1\"\n    );\n\n    doc = sdoc(\"id\", \"1\",\n        \"cat_ss\", Collections.singletonMap(\"add\", \"bbb\"),\n        \"child2\", Collections.singletonMap(\"add\", sdoc(\"id\", \"3\", \"cat_ss\", \"child\")));\n    addAndGetVersion(doc, params(\"wt\", \"json\"));\n\n\n     assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, cat_ss, child1, child2, [child]\")\n     ,\"=={\\\"doc\\\":{'id':\\\"1\\\"\" +\n     \", cat_ss:[\\\"aaa\\\",\\\"ccc\\\",\\\"bbb\\\"], child2:{\\\"id\\\":\\\"3\\\", \\\"cat_ss\\\": [\\\"child\\\"]},\" +\n     \"child1:[{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"]}]\" +\n     \"       }}\"\n     );\n\n    assertU(commit());\n\n    // a cut-n-paste of the first big query, but this time it will be retrieved from the index rather than the transaction log\n    // this requires ChildDocTransformer to get the whole block, since the document is retrieved using an index lookup\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, cat_ss, child1, child2, [child]\")\n        , \"=={\\\"doc\\\":{'id':\\\"1\\\"\" +\n            \", cat_ss:[\\\"aaa\\\",\\\"ccc\\\",\\\"bbb\\\"], child2:{\\\"id\\\":\\\"3\\\", \\\"cat_ss\\\": [\\\"child\\\"]},\" +\n            \"child1:[{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"]}]\" +\n            \"       }}\"\n    );\n\n    doc = sdoc(\"id\", \"2\",\n        \"child3\", Collections.singletonMap(\"add\", sdoc(\"id\", \"4\", \"cat_ss\", \"grandChild\")));\n    addAndGetVersion(doc, params(\"wt\", \"json\", \"_route_\", \"1\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, cat_ss, child1, child2, child3, [child]\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", cat_ss:[\\\"aaa\\\",\\\"ccc\\\",\\\"bbb\\\"], child1:[{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"], child3:{\\\"id\\\":\\\"4\\\",\\\"cat_ss\\\":[\\\"grandChild\\\"]}}],\" +\n            \"child2:{\\\"id\\\":\\\"3\\\", \\\"cat_ss\\\": [\\\"child\\\"]}\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"2\", \"fl\",\"id, cat_ss, child, child3, [child]\")\n        ,\"=={'doc':{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"], child3:{\\\"id\\\":\\\"4\\\",\\\"cat_ss\\\":[\\\"grandChild\\\"]}}\" +\n            \"       }}\"\n    );\n\n    assertU(commit());\n\n    //add greatGrandChild\n    doc = sdoc(\"id\", \"4\",\n        \"child4\", Collections.singletonMap(\"add\", sdoc(\"id\", \"5\", \"cat_ss\", \"greatGrandChild\")));\n    addAndGetVersion(doc, params(\"wt\", \"json\"));\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, cat_ss, child1, child2, child3, child4, [child]\")\n        ,\"=={'doc':{'id':'1'\" +\n            \", cat_ss:[\\\"aaa\\\",\\\"ccc\\\",\\\"bbb\\\"], child1:[{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"], child3:{\\\"id\\\":\\\"4\\\",\\\"cat_ss\\\":[\\\"grandChild\\\"],\" +\n            \" child4:{\\\"id\\\":\\\"5\\\",\\\"cat_ss\\\":[\\\"greatGrandChild\\\"]}}}], child2:{\\\"id\\\":\\\"3\\\", \\\"cat_ss\\\": [\\\"child\\\"]}\" +\n            \"       }}\"\n    );\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"4\", \"fl\",\"id, cat_ss, child4, [child]\")\n        ,\"=={'doc':{\\\"id\\\":\\\"4\\\",\\\"cat_ss\\\":[\\\"grandChild\\\"], child4:{\\\"id\\\":\\\"5\\\",\\\"cat_ss\\\":[\\\"greatGrandChild\\\"]}}\" +\n            \"       }}\"\n    );\n\n    assertU(commit());\n\n    //add another greatGrandChild\n    doc = sdoc(\"id\", \"4\",\n        \"child4\", Collections.singletonMap(\"add\", sdoc(\"id\", \"6\", \"cat_ss\", \"greatGrandChild\")));\n    addAndGetVersion(doc, params(\"wt\", \"json\"));\n\n    assertU(commit());\n\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"4\", \"fl\",\"id, cat_ss, child4, [child]\")\n        ,\"=={'doc':{\\\"id\\\":\\\"4\\\",\\\"cat_ss\\\":[\\\"grandChild\\\"], child4:[{\\\"id\\\":\\\"5\\\",\\\"cat_ss\\\":[\\\"greatGrandChild\\\"]},\" +\n            \"{\\\"id\\\":\\\"6\\\", \\\"cat_ss\\\":[\\\"greatGrandChild\\\"]}]}\" +\n            \"       }}\"\n    );\n\n    //add another child field name\n    doc = sdoc(\"id\", \"1\",\n        \"child5\", Collections.singletonMap(\"add\", sdocs(sdoc(\"id\", \"7\", \"cat_ss\", \"child\"),\n            sdoc(\"id\", \"8\", \"cat_ss\", \"child\")\n        ))\n    );\n    addAndGetVersion(doc, params(\"wt\", \"json\"));\n\n    assertU(commit());\n\n    doc = sdoc(\"id\", \"1\",\n        \"new_s\", Collections.singletonMap(\"add\", \"new string\"));\n    addAndGetVersion(doc, params(\"wt\", \"json\"));\n\n    assertU(commit());\n\n\n    // ensure the whole block has been committed correctly to the index.\n    assertJQ(req(\"q\",\"id:1\", \"fl\", \"*, [child]\"),\n        \"/response/numFound==1\",\n        \"/response/docs/[0]/id=='1'\",\n        \"/response/docs/[0]/cat_ss/[0]==\\\"aaa\\\"\",\n        \"/response/docs/[0]/cat_ss/[1]==\\\"ccc\\\"\",\n        \"/response/docs/[0]/cat_ss/[2]==\\\"bbb\\\"\",\n        \"/response/docs/[0]/child1/[0]/id=='2'\",\n        \"/response/docs/[0]/child1/[0]/cat_ss/[0]=='child'\",\n        \"/response/docs/[0]/child1/[0]/child3/id=='4'\",\n        \"/response/docs/[0]/child1/[0]/child3/cat_ss/[0]=='grandChild'\",\n        \"/response/docs/[0]/child1/[0]/child3/child4/[0]/id=='5'\",\n        \"/response/docs/[0]/child1/[0]/child3/child4/[0]/cat_ss/[0]=='greatGrandChild'\",\n        \"/response/docs/[0]/child1/[0]/child3/child4/[1]/id=='6'\",\n        \"/response/docs/[0]/child1/[0]/child3/child4/[1]/cat_ss/[0]=='greatGrandChild'\",\n        \"/response/docs/[0]/child2/id=='3'\",\n        \"/response/docs/[0]/child2/cat_ss/[0]=='child'\",\n        \"/response/docs/[0]/child5/[0]/id=='7'\",\n        \"/response/docs/[0]/child5/[0]/cat_ss/[0]=='child'\",\n        \"/response/docs/[0]/child5/[1]/id=='8'\",\n        \"/response/docs/[0]/child5/[1]/cat_ss/[0]=='child'\",\n        \"/response/docs/[0]/new_s=='new string'\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}