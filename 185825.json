{"path":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","commits":[{"id":"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f","date":1293976079,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["81abdee99ea2cd37c59c455411c9948dba325dc5","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54c40f2a4f8741ec845d55de05ea762e631b5c90","date":1294602494,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    @Override\n    public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","bugFix":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    @Override\n    public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    @Override\n    public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":"    // this optimization allows out of order scoring as top scorer,\n    // TODO: theoretically this method should not be called because its protected and\n    // this class does not use it, it should be public in Scorer!\n    @Override\n    protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConstantScoreQuery.ConstantScorer#score(Collector,int,int).mjava","sourceNew":"    // this optimization allows out of order scoring as top scorer,\n    @Override\n    public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","sourceOld":"    // this optimization allows out of order scoring as top scorer,\n    @Override\n    public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n      if (docIdSetIterator instanceof Scorer) {\n        return ((Scorer) docIdSetIterator).score(wrapCollector(collector), max, firstDocID);\n      } else {\n        return super.score(collector, max, firstDocID);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["54c40f2a4f8741ec845d55de05ea762e631b5c90"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"3e37a877cbb3c0d736bdc1fcb3aea4c24015799f":["54c40f2a4f8741ec845d55de05ea762e631b5c90","70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","3e37a877cbb3c0d736bdc1fcb3aea4c24015799f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}