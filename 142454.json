{"path":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.numPostings > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n    \n    // sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n    \n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n      \n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.numPostings;\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.numPostings > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n    \n    // sort by field name\n    Collections.sort(allFields);\n\n    // TODO: allow Lucene user to customize this codec:\n    final FieldsConsumer consumer = state.codec.fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n    \n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n      \n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.numPostings;\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":["93a847b67820ef974bc434ea8a6f4b1be6905da0","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":["93a847b67820ef974bc434ea8a6f4b1be6905da0"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n      fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":["93a847b67820ef974bc434ea8a6f4b1be6905da0"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[TermsHashConsumerPerThread,Collection[TermsHashConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n    \n    flushedDocCount = state.numDocs;\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      Collection<TermsHashConsumerPerField> fields = entry.getValue();\n\n\n      for (final TermsHashConsumerPerField i : fields) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) i;\n        if (perField.termsHashPerField.bytesHash.size() > 0)\n          allFields.add(perField);\n      }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = allFields.get(start).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && allFields.get(end).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n        }\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fieldName, state, fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    for (Map.Entry<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> entry : threadsAndFields.entrySet()) {\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a847b67820ef974bc434ea8a6f4b1be6905da0","date":1306347487,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":["1eb46686a27187e42311e77666a2c7026f461ebc","bde51b089eb7f86171eb3406e38a274743f9b7ac","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    TermsHash termsHash = null;\n\n    /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n      final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n\n      final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n\n      // Aggregate the storePayload as seen by the same\n      // field across multiple threads\n      if (!fieldInfo.omitTermFreqAndPositions) {\n        fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      fieldWriter.flush(fieldInfo.name, consumer, state);\n\n      TermsHashPerField perField = fieldWriter.termsHashPerField;\n      assert termsHash == null || termsHash == perField.termsHash;\n      termsHash = perField.termsHash;\n      int numPostings = perField.bytesHash.size();\n      perField.reset();\n      perField.shrinkHash(numPostings);\n      fieldWriter.reset();\n    }\n\n    if (termsHash != null) {\n      termsHash.reset();\n    }\n    consumer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, consumer);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n    } finally {\n      consumer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, consumer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.codec.postingsFormat().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.segmentCodecs.codec().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.codec.postingsFormat().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.codec.postingsFormat().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.codec.postingsFormat().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List<FreqProxTermsWriterPerField> allFields = new ArrayList<FreqProxTermsWriterPerField>();\n\n    for (TermsHashConsumerPerField f : fieldsToFlush.values()) {\n        final FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) f;\n        if (perField.termsHashPerField.bytesHash.size() > 0) {\n          allFields.add(perField);\n        }\n    }\n\n    final int numAllFields = allFields.size();\n\n    // Sort by field name\n    CollectionUtil.quickSort(allFields);\n\n    final FieldsConsumer consumer = state.codec.postingsFormat().fieldsConsumer(state);\n\n    boolean success = false;\n\n    try {\n      TermsHash termsHash = null;\n      \n      /*\n    Current writer chain:\n      FieldsConsumer\n        -> IMPL: FormatPostingsTermsDictWriter\n          -> TermsConsumer\n            -> IMPL: FormatPostingsTermsDictWriter.TermsWriter\n              -> DocsConsumer\n                -> IMPL: FormatPostingsDocsWriter\n                  -> PositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n       */\n      \n      for (int fieldNumber = 0; fieldNumber < numAllFields; fieldNumber++) {\n        final FieldInfo fieldInfo = allFields.get(fieldNumber).fieldInfo;\n        \n        final FreqProxTermsWriterPerField fieldWriter = allFields.get(fieldNumber);\n        \n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        if (fieldInfo.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0) {\n          fieldInfo.storePayloads |= fieldWriter.hasPayloads;\n        }\n        \n        // If this field has postings then add them to the\n        // segment\n        fieldWriter.flush(fieldInfo.name, consumer, state);\n        \n        TermsHashPerField perField = fieldWriter.termsHashPerField;\n        assert termsHash == null || termsHash == perField.termsHash;\n        termsHash = perField.termsHash;\n        int numPostings = perField.bytesHash.size();\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fieldWriter.reset();\n      }\n      \n      if (termsHash != null) {\n        termsHash.reset();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(consumer);\n      } else {\n        IOUtils.closeWhileHandlingException(consumer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["93a847b67820ef974bc434ea8a6f4b1be6905da0"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"93a847b67820ef974bc434ea8a6f4b1be6905da0":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6f4cae61e16730201371ab7e9912721c19324e7":["1eb46686a27187e42311e77666a2c7026f461ebc"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"1eb46686a27187e42311e77666a2c7026f461ebc":["bde51b089eb7f86171eb3406e38a274743f9b7ac","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","93a847b67820ef974bc434ea8a6f4b1be6905da0"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","93a847b67820ef974bc434ea8a6f4b1be6905da0"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","93a847b67820ef974bc434ea8a6f4b1be6905da0","a3776dccca01c11e7046323cfad46a3b4a471233"],"93a847b67820ef974bc434ea8a6f4b1be6905da0":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["24230fe54121f9be9d85f2c2067536296785e421"],"7b91922b55d15444d554721b352861d028eb8278":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"1eb46686a27187e42311e77666a2c7026f461ebc":["f6f4cae61e16730201371ab7e9912721c19324e7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1eb46686a27187e42311e77666a2c7026f461ebc","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1eb46686a27187e42311e77666a2c7026f461ebc"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}