{"path":"contrib/snowball/src/java/net/sf/snowball/SnowballProgram#replace_s(int,int,String).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/java/net/sf/snowball/SnowballProgram#replace_s(int,int,String).mjava","pathOld":"sandbox/contributions/snowball/src/java/net/sf/snowball/SnowballProgram#replace_s(int,int,String).mjava","sourceNew":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, String s)\n    {\n\tint adjustment = s.length() - (c_ket - c_bra);\n\tcurrent.replace(bra, ket, s);\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, String s)\n    {\n\tint adjustment = s.length() - (c_ket - c_bra);\n\tcurrent.replace(bra, ket, s);\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b62da6a75575f59a016a076b4753dc6e20c74b44","date":1219528967,"type":5,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/snowball/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,String).mjava","pathOld":"contrib/snowball/src/java/net/sf/snowball/SnowballProgram#replace_s(int,int,String).mjava","sourceNew":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, String s)\n    {\n\tint adjustment = s.length() - (c_ket - c_bra);\n\tcurrent.replace(c_bra, c_ket, s);\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, String s)\n    {\n\tint adjustment = s.length() - (c_ket - c_bra);\n\tcurrent.replace(bra, ket, s);\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b62da6a75575f59a016a076b4753dc6e20c74b44"]},"commit2Childs":{"b62da6a75575f59a016a076b4753dc6e20c74b44":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["b62da6a75575f59a016a076b4753dc6e20c74b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}