{"path":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","pathOld":"solr/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","sourceNew":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/TermOrdValComparator_SML[MissingStringLastComparatorSource].ByteOrdComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int compareBottom(int doc) {\n      assert bottomSlot != -1;\n      int order = readerOrds[doc]&0xFF;\n      if (order == 0) order = NULL_ORD;\n      if (bottomSameReader) {\n        // ord is precisely comparable, even in the equal case\n        return bottomOrd - order;\n      } else {\n        // ord is only approx comparable: if they are not\n        // equal, we can use that; if they are equal, we\n        // must fallback to compare by value\n        final int cmp = bottomOrd - order;\n        if (cmp != 0) {\n          return cmp;\n        }\n\n        // take care of the case where both vals are null\n        if (order == NULL_ORD) return 0;\n\n        // and at this point we know that neither value is null, so safe to compare\n        termsIndex.lookup(order, tempBR);\n        return bottomValue.compareTo(tempBR);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c26f00b574427b55127e869b935845554afde1fa","6e2893fd5349134af382d33ccc3d84840394c6c1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}