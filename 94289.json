{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsReader#Lucene60PointsReader(SegmentReadState).mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsReader#Lucene60PointsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointsReader#Lucene60PointsReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene60PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointsFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointsFormat.META_CODEC_NAME,\n                                   Lucene60PointsFormat.INDEX_VERSION_START,\n                                   Lucene60PointsFormat.INDEX_VERSION_CURRENT,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn, dataIn, dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene60PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                          readState.segmentSuffix,\n                                                          Lucene60PointsFormat.INDEX_EXTENSION);\n\n    Map<Integer,Long> fieldToFileOffset = new HashMap<>();\n\n    // Read index file\n    try (ChecksumIndexInput indexIn = readState.directory.openChecksumInput(indexFileName, readState.context)) {\n      Throwable priorE = null;\n      try {\n        CodecUtil.checkIndexHeader(indexIn,\n                                   Lucene60PointsFormat.META_CODEC_NAME,\n                                   Lucene60PointsFormat.INDEX_VERSION_START,\n                                   Lucene60PointsFormat.INDEX_VERSION_START,\n                                   readState.segmentInfo.getId(),\n                                   readState.segmentSuffix);\n        int count = indexIn.readVInt();\n        for(int i=0;i<count;i++) {\n          int fieldNumber = indexIn.readVInt();\n          long fp = indexIn.readVLong();\n          fieldToFileOffset.put(fieldNumber, fp);\n        }\n      } catch (Throwable t) {\n        priorE = t;\n      } finally {\n        CodecUtil.checkFooter(indexIn, priorE);\n      }\n    }\n\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n                                                         readState.segmentSuffix,\n                                                         Lucene60PointsFormat.DATA_EXTENSION);\n    boolean success = false;\n    dataIn = readState.directory.openInput(dataFileName, readState.context);\n    try {\n\n      CodecUtil.checkIndexHeader(dataIn,\n                                 Lucene60PointsFormat.DATA_CODEC_NAME,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 Lucene60PointsFormat.DATA_VERSION_START,\n                                 readState.segmentInfo.getId(),\n                                 readState.segmentSuffix);\n\n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(dataIn);\n\n      for(Map.Entry<Integer,Long> ent : fieldToFileOffset.entrySet()) {\n        int fieldNumber = ent.getKey();\n        long fp = ent.getValue();\n        dataIn.seek(fp);\n        BKDReader reader = new BKDReader(dataIn);\n        readers.put(fieldNumber, reader);\n      }\n\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}