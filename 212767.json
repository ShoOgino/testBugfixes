{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#checkStddevs(ArrayList[Double],ArrayList[Double]).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#checkStddevs(ArrayList[Double],ArrayList[Double]).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/FieldFacetTest#checkStddevs(ArrayList[Double],ArrayList[Double]).mjava","sourceNew":"  private void checkStddevs(ArrayList<Double> list1, ArrayList<Double> list2) {\n    Collections.sort(list1);\n    Collections.sort(list2);\n    for (int i = 0; i<list1.size(); i++) {\n      if ((Math.abs(list1.get(i)-list2.get(i))<.00000000001) == false) {\n        Assert.assertEquals(getRawResponse(), list1.get(i), list2.get(i), 0.00000000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStddevs(ArrayList<Double> list1, ArrayList<Double> list2) {\n    Collections.sort(list1);\n    Collections.sort(list2);\n    for (int i = 0; i<list1.size(); i++) {\n      if ((Math.abs(list1.get(i)-list2.get(i))<.00000000001) == false) {\n        Assert.assertEquals(getRawResponse(), list1.get(i), list2.get(i), 0.00000000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#checkStddevs(ArrayList[Double],ArrayList[Double]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#checkStddevs(ArrayList[Double],ArrayList[Double]).mjava","sourceNew":"  private void checkStddevs(ArrayList<Double> list1, ArrayList<Double> list2) {\n    Collections.sort(list1);\n    Collections.sort(list2);\n    for (int i = 0; i<list1.size(); i++) {\n      if ((Math.abs(list1.get(i)-list2.get(i))<.00000000001) == false) {\n        Assert.assertEquals(getRawResponse(), list1.get(i), list2.get(i), 0.00000000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void checkStddevs(ArrayList<Double> list1, ArrayList<Double> list2) {\n    Collections.sort(list1);\n    Collections.sort(list2);\n    for (int i = 0; i<list1.size(); i++) {\n      if ((Math.abs(list1.get(i)-list2.get(i))<.00000000001) == false) {\n        Assert.assertEquals(getRawResponse(), list1.get(i), list2.get(i), 0.00000000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}