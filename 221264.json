{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","commits":[{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"/dev/null","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"/dev/null","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"/dev/null","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n    this.connectionTimeout = builder.connectionTimeoutMillis;\n    this.soTimeout = builder.socketTimeoutMillis;\n  }\n\n","sourceOld":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n    this.connectionTimeout = builder.connectionTimeoutMillis;\n    this.soTimeout = builder.socketTimeoutMillis;\n  }\n\n","sourceOld":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a51aeac3c35e69d5e76df30ad382f32f993d5f05","date":1567649655,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#HttpSolrClient(Builder).mjava","sourceNew":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    \n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n    this.connectionTimeout = builder.connectionTimeoutMillis;\n    this.soTimeout = builder.socketTimeoutMillis;\n  }\n\n","sourceOld":"  protected HttpSolrClient(Builder builder) {\n    this.baseUrl = builder.baseSolrUrl;\n    if (baseUrl.endsWith(\"/\")) {\n      baseUrl = baseUrl.substring(0, baseUrl.length() - 1);\n    }\n    if (baseUrl.indexOf('?') >= 0) {\n      throw new RuntimeException(\n          \"Invalid base url for solrj.  The base URL must not contain parameters: \"\n              + baseUrl);\n    }\n    \n    if (builder.httpClient != null) {\n      this.httpClient = builder.httpClient;\n      this.internalClient = false;\n    } else {\n      this.internalClient = true;\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(HttpClientUtil.PROP_FOLLOW_REDIRECTS, followRedirects);\n      params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, builder.compression);\n      httpClient = HttpClientUtil.createClient(params);\n    }\n    \n    this.parser = builder.responseParser;\n    this.invariantParams = builder.invariantParams;\n    this.connectionTimeout = builder.connectionTimeoutMillis;\n    this.soTimeout = builder.socketTimeoutMillis;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["28288370235ed02234a64753cdbf0c6ec096304a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","43d1e498704edd2bba13548a189eed4dfccff11b"],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","a51aeac3c35e69d5e76df30ad382f32f993d5f05"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a51aeac3c35e69d5e76df30ad382f32f993d5f05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"28288370235ed02234a64753cdbf0c6ec096304a":["43d1e498704edd2bba13548a189eed4dfccff11b"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}