{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<BytesRef>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      System.out.println(\"\\nTEST: make AQ1\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      System.out.println(\"\\nTEST: make AQ2\");\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      LightAutomaton alternate = BasicAutomata.makeStringUnionLight(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      System.out.println(\"\\nTEST: make AQ1\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      System.out.println(\"\\nTEST: make AQ2\");\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      LightAutomaton alternate = BasicAutomata.makeStringUnionLight(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      LightAutomaton alternate = BasicAutomata.makeStringUnionLight(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = BasicOperations.determinize(new RegExp(reg, RegExp.NONE).toLightAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      LightAutomaton alternate = BasicAutomata.makeStringUnionLight(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (BasicOperations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = BasicAutomata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n      CheckHits.checkEqual(a1, searcher.search(a1, 25).scoreDocs, searcher.search(a2, 25).scoreDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton());\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afa43c2280907c22d8a132b79a2873becc002870","date":1415139362,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testFiniteVersusInfinite().mjava","sourceNew":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minimize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate, Integer.MAX_VALUE);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","sourceOld":"  /** tests a pre-intersected automaton against the original */\n  public void testFiniteVersusInfinite() throws Exception {\n\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = Operations.determinize(new RegExp(reg, RegExp.NONE).toAutomaton(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      final List<BytesRef> matchedTerms = new ArrayList<>();\n      for(BytesRef t : terms) {\n        if (Operations.run(automaton, t.utf8ToString())) {\n          matchedTerms.add(t);\n        }\n      }\n\n      Automaton alternate = Automata.makeStringUnion(matchedTerms);\n      //System.out.println(\"match \" + matchedTerms.size() + \" \" + alternate.getNumberOfStates() + \" states, sigma=\" + alternate.getStartPoints().length);\n      //AutomatonTestUtil.minimizeSimple(alternate);\n      //System.out.println(\"minmize done\");\n      AutomatonQuery a1 = new AutomatonQuery(new Term(\"field\", \"\"), automaton);\n      AutomatonQuery a2 = new AutomatonQuery(new Term(\"field\", \"\"), alternate);\n\n      ScoreDoc[] origHits = searcher.search(a1, 25).scoreDocs;\n      ScoreDoc[] newHits = searcher.search(a2, 25).scoreDocs;\n      CheckHits.checkEqual(a1, origHits, newHits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"afa43c2280907c22d8a132b79a2873becc002870":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afa43c2280907c22d8a132b79a2873becc002870"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["afa43c2280907c22d8a132b79a2873becc002870"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"afa43c2280907c22d8a132b79a2873becc002870":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}