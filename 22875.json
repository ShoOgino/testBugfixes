{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(BKDConfig,int,int[]).mjava","commits":[{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(BKDConfig,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int,int,int[]).mjava","sourceNew":"  private static Point[] createRandomPoints(BKDConfig config, int maxDoc, int[] commonPrefixLengths) {\n    assertTrue(commonPrefixLengths.length == config.numDims);\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    if (random().nextInt(5) != 0) {\n      for (int i = 0; i < numPoints; ++i) {\n        byte[] value = new byte[config.packedBytesLength];\n        random().nextBytes(value);\n        points[i] = new Point(value, random().nextInt(maxDoc));\n      }\n      for (int i = 0; i < config.numDims; ++i) {\n        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, config.bytesPerDim);\n      }\n      BytesRef firstValue = points[0].packedValue;\n      for (int i = 1; i < points.length; ++i) {\n        for (int dim = 0; dim < config.numDims; ++dim) {\n          int offset = dim * config.bytesPerDim;\n          BytesRef packedValue = points[i].packedValue;\n          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);\n        }\n      }\n    } else {\n      //index dim are equal, data dims different\n      int numDataDims = config.numDims - config.numIndexDims;\n      byte[] indexDims = new byte[config.packedIndexBytesLength];\n      random().nextBytes(indexDims);\n      byte[] dataDims = new byte[numDataDims * config.bytesPerDim];\n      for (int i = 0; i < numPoints; ++i) {\n        byte[] value = new byte[config.packedBytesLength];\n        System.arraycopy(indexDims, 0, value, 0, config.packedIndexBytesLength);\n        random().nextBytes(dataDims);\n        System.arraycopy(dataDims, 0, value, config.packedIndexBytesLength, numDataDims * config.bytesPerDim);\n        points[i] = new Point(value, random().nextInt(maxDoc));\n      }\n      for (int i = 0; i < config.numIndexDims; ++i) {\n        commonPrefixLengths[i] = config.bytesPerDim;\n      }\n      for (int i = config.numIndexDims; i < config.numDims; ++i) {\n        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, config.bytesPerDim);\n      }\n      BytesRef firstValue = points[0].packedValue;\n      for (int i = 1; i < points.length; ++i) {\n        for (int dim = config.numIndexDims; dim < config.numDims; ++dim) {\n          int offset = dim * config.bytesPerDim;\n          BytesRef packedValue = points[i].packedValue;\n          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);\n        }\n      }\n    }\n    return points;\n  }\n\n","sourceOld":"  private static Point[] createRandomPoints(int numDataDims, int numIndexdims, int bytesPerDim, int maxDoc, int[] commonPrefixLengths) {\n    assertTrue(commonPrefixLengths.length == numDataDims);\n    final int packedBytesLength = numDataDims * bytesPerDim;\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    if (random().nextInt(5) != 0) {\n      for (int i = 0; i < numPoints; ++i) {\n        byte[] value = new byte[packedBytesLength];\n        random().nextBytes(value);\n        points[i] = new Point(value, random().nextInt(maxDoc));\n      }\n      for (int i = 0; i < numDataDims; ++i) {\n        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, bytesPerDim);\n      }\n      BytesRef firstValue = points[0].packedValue;\n      for (int i = 1; i < points.length; ++i) {\n        for (int dim = 0; dim < numDataDims; ++dim) {\n          int offset = dim * bytesPerDim;\n          BytesRef packedValue = points[i].packedValue;\n          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);\n        }\n      }\n    } else {\n      //index dim are equal, data dims different\n      byte[] indexDims = new byte[numIndexdims * bytesPerDim];\n      random().nextBytes(indexDims);\n      byte[] dataDims = new byte[(numDataDims - numIndexdims) * bytesPerDim];\n      for (int i = 0; i < numPoints; ++i) {\n        byte[] value = new byte[packedBytesLength];\n        System.arraycopy(indexDims, 0, value, 0, numIndexdims * bytesPerDim);\n        random().nextBytes(dataDims);\n        System.arraycopy(dataDims, 0, value, numIndexdims * bytesPerDim, (numDataDims - numIndexdims) * bytesPerDim);\n        points[i] = new Point(value, random().nextInt(maxDoc));\n      }\n      for (int i = 0; i < numIndexdims; ++i) {\n        commonPrefixLengths[i] = bytesPerDim;\n      }\n      for (int i = numDataDims; i < numDataDims; ++i) {\n        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, bytesPerDim);\n      }\n      BytesRef firstValue = points[0].packedValue;\n      for (int i = 1; i < points.length; ++i) {\n        for (int dim = numIndexdims; dim < numDataDims; ++dim) {\n          int offset = dim * bytesPerDim;\n          BytesRef packedValue = points[i].packedValue;\n          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);\n        }\n      }\n    }\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}