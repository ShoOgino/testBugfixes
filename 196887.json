{"path":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#doTestCustomScore(FunctionQuery,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(FunctionQuery functionQuery, double dboost) throws Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, functionQuery);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, functionQuery);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, functionQuery, functionQuery);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":null,"sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":null,"sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["c8fda790e002fff32e201cbd0f7bed4c2b333a64","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}