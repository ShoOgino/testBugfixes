{"path":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(\"shards\");\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(\"start\",\"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(\"rows\", rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if (rb.getSortSpec().includesScore()) {\n      sreq.params.set(\"fl\",  rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(\"fl\",  rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1af58bfae0521d6b9609c701909e824291964c14","0fd29060ef78d73cb2d3f2ba2b318785363e3a4e","0fd29060ef78d73cb2d3f2ba2b318785363e3a4e","0fd29060ef78d73cb2d3f2ba2b318785363e3a4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6c6e4e06160d2ad231072e8743988a623ab14c9","date":1213500516,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(CommonParams.START, \"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if (rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(\"shards\");\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(\"start\",\"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(\"rows\", rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if (rb.getSortSpec().includesScore()) {\n      sreq.params.set(\"fl\",  rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(\"fl\",  rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af58bfae0521d6b9609c701909e824291964c14","date":1216088694,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(CommonParams.START, \"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(CommonParams.START, \"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if (rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"640a5451d6e0dbabae390cc687e7d0c1a130d0b9","date":1252348096,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    sreq.params.set(CommonParams.START, \"0\");\n\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/QueryComponent#createMainQuery(ResponseBuilder).mjava","sourceNew":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","sourceOld":"  private void createMainQuery(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(ResponseBuilder.FIELD_SORT_VALUES,\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());      \n    }\n\n    rb.addRequest(this, sreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"640a5451d6e0dbabae390cc687e7d0c1a130d0b9":["1af58bfae0521d6b9609c701909e824291964c14"],"1af58bfae0521d6b9609c701909e824291964c14":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["640a5451d6e0dbabae390cc687e7d0c1a130d0b9"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"640a5451d6e0dbabae390cc687e7d0c1a130d0b9":["ad94625fb8d088209f46650c8097196fec67f00c"],"1af58bfae0521d6b9609c701909e824291964c14":["640a5451d6e0dbabae390cc687e7d0c1a130d0b9"],"a6c6e4e06160d2ad231072e8743988a623ab14c9":["1af58bfae0521d6b9609c701909e824291964c14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["a6c6e4e06160d2ad231072e8743988a623ab14c9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}