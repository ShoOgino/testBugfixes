{"path":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFielAndDocBoosts().mjava","commits":[{"id":"6d8777a0e10e1e79c0a4aca9faf92867422dd411","date":1348525183,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFielAndDocBoosts().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedFielAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setDocumentBoost(3.0f);\n    SolrInputField field = new SolrInputField( \"foo_t\" );\n    field.addValue( \"summer time\" , 1.0f );\n    field.addValue( \"in the city\" , 5.0f ); // using boost\n    field.addValue( \"living is easy\" , 1.0f );\n    doc.put( field.getName(), field );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    IndexableField[] outF = out.getFields( field.getName() );\n    assertEquals(\"wrong number of field values\",\n                 3, outF.length);\n\n    // since Lucene no longer has native documnt boosts, we should find\n    // the doc boost multiplied into the boost o nthe first field value\n    // all other field values should be 1.0f\n    // (lucene will multiply all of the field boosts later)\n    assertEquals(15.0f, outF[0].boost(), 0.0f);\n    assertEquals(1.0f, outF[1].boost(), 0.0f);\n    assertEquals(1.0f, outF[2].boost(), 0.0f);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4148af0b1a0b6991d37fc16a075d88fc63068f9","date":1351120943,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFieldAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFielAndDocBoosts().mjava","sourceNew":"  public void testMultiValuedFieldAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setDocumentBoost(3.0f);\n    SolrInputField field = new SolrInputField( \"foo_t\" );\n    field.addValue( \"summer time\" , 1.0f );\n    field.addValue( \"in the city\" , 5.0f ); // using boost\n    field.addValue( \"living is easy\" , 1.0f );\n    doc.put( field.getName(), field );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    IndexableField[] outF = out.getFields( field.getName() );\n    assertEquals(\"wrong number of field values\",\n                 3, outF.length);\n\n    // since Lucene no longer has native documnt boosts, we should find\n    // the doc boost multiplied into the boost o nthe first field value\n    // all other field values should be 1.0f\n    // (lucene will multiply all of the field boosts later)\n    assertEquals(15.0f, outF[0].boost(), 0.0f);\n    assertEquals(1.0f, outF[1].boost(), 0.0f);\n    assertEquals(1.0f, outF[2].boost(), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testMultiValuedFielAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setDocumentBoost(3.0f);\n    SolrInputField field = new SolrInputField( \"foo_t\" );\n    field.addValue( \"summer time\" , 1.0f );\n    field.addValue( \"in the city\" , 5.0f ); // using boost\n    field.addValue( \"living is easy\" , 1.0f );\n    doc.put( field.getName(), field );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    IndexableField[] outF = out.getFields( field.getName() );\n    assertEquals(\"wrong number of field values\",\n                 3, outF.length);\n\n    // since Lucene no longer has native documnt boosts, we should find\n    // the doc boost multiplied into the boost o nthe first field value\n    // all other field values should be 1.0f\n    // (lucene will multiply all of the field boosts later)\n    assertEquals(15.0f, outF[0].boost(), 0.0f);\n    assertEquals(1.0f, outF[1].boost(), 0.0f);\n    assertEquals(1.0f, outF[2].boost(), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFieldAndDocBoosts().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/DocumentBuilderTest#testMultiValuedFielAndDocBoosts().mjava","sourceNew":"  public void testMultiValuedFieldAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setDocumentBoost(3.0f);\n    SolrInputField field = new SolrInputField( \"foo_t\" );\n    field.addValue( \"summer time\" , 1.0f );\n    field.addValue( \"in the city\" , 5.0f ); // using boost\n    field.addValue( \"living is easy\" , 1.0f );\n    doc.put( field.getName(), field );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    IndexableField[] outF = out.getFields( field.getName() );\n    assertEquals(\"wrong number of field values\",\n                 3, outF.length);\n\n    // since Lucene no longer has native documnt boosts, we should find\n    // the doc boost multiplied into the boost o nthe first field value\n    // all other field values should be 1.0f\n    // (lucene will multiply all of the field boosts later)\n    assertEquals(15.0f, outF[0].boost(), 0.0f);\n    assertEquals(1.0f, outF[1].boost(), 0.0f);\n    assertEquals(1.0f, outF[2].boost(), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testMultiValuedFielAndDocBoosts() throws Exception {\n    SolrCore core = h.getCore();\n    IndexSchema schema = core.getSchema();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setDocumentBoost(3.0f);\n    SolrInputField field = new SolrInputField( \"foo_t\" );\n    field.addValue( \"summer time\" , 1.0f );\n    field.addValue( \"in the city\" , 5.0f ); // using boost\n    field.addValue( \"living is easy\" , 1.0f );\n    doc.put( field.getName(), field );\n\n    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );\n    IndexableField[] outF = out.getFields( field.getName() );\n    assertEquals(\"wrong number of field values\",\n                 3, outF.length);\n\n    // since Lucene no longer has native documnt boosts, we should find\n    // the doc boost multiplied into the boost o nthe first field value\n    // all other field values should be 1.0f\n    // (lucene will multiply all of the field boosts later)\n    assertEquals(15.0f, outF[0].boost(), 0.0f);\n    assertEquals(1.0f, outF[1].boost(), 0.0f);\n    assertEquals(1.0f, outF[2].boost(), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4148af0b1a0b6991d37fc16a075d88fc63068f9":["6d8777a0e10e1e79c0a4aca9faf92867422dd411"],"6d8777a0e10e1e79c0a4aca9faf92867422dd411":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2126b84bd093fa3d921582a109a0ee578c28126":["6d8777a0e10e1e79c0a4aca9faf92867422dd411","d4148af0b1a0b6991d37fc16a075d88fc63068f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4148af0b1a0b6991d37fc16a075d88fc63068f9"]},"commit2Childs":{"d4148af0b1a0b6991d37fc16a075d88fc63068f9":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8777a0e10e1e79c0a4aca9faf92867422dd411":["d4148af0b1a0b6991d37fc16a075d88fc63068f9","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d8777a0e10e1e79c0a4aca9faf92867422dd411"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}