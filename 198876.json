{"path":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","commits":[{"id":"295b91d4ec18af5246b31b5e7d5f17bc6f51e203","date":1132652158,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"/dev/null","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    String segName = \"test\";\n    writer.addDocument(segName, doc);\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.segmentInfos.info(writer.segmentInfos.size()-1);\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    String segName = \"test\";\n    writer.addDocument(segName, doc);\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.segmentInfos.info(writer.segmentInfos.size()-1);\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d6229c48c0cbc7849950f7a240f07739812b2f","date":1199345558,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.TOKENIZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(info);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testPositionIncrementGap().mjava","sourceNew":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testPositionIncrementGap() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader);\n      }\n\n      @Override\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n\n    Document doc = new Document();\n    doc.add(new Field(\"repeated\", \"repeated one\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"repeated\", \"repeated two\", Field.Store.YES, Field.Index.ANALYZED));\n\n    writer.addDocument(doc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n    TermPositions termPositions = reader.termPositions(new Term(\"repeated\", \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["295b91d4ec18af5246b31b5e7d5f17bc6f51e203"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"295b91d4ec18af5246b31b5e7d5f17bc6f51e203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["295b91d4ec18af5246b31b5e7d5f17bc6f51e203"],"295b91d4ec18af5246b31b5e7d5f17bc6f51e203":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}