{"path":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      indexDir.mkdirs(); // required for this MockFSDir since we don't commit on IW creation anymore.\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      indexDir.mkdirs(); // required for this MockFSDir since we don't commit on IW creation anymore.\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, newRandom());\n      try {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE));\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(new Field(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = new File(TEMP_DIR, \"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":null,"sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cc5d33c4ecf450c71edad489df69de68a73a11","date":1323189401,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"/dev/null","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52fe11939bbea61107ebe245eae35038988768ca","date":1323211817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n        writer.close();\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(dir, false);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        Term ccc = new Term(\"content\", \"ccc\");\n        assertEquals(37, reader.docFreq(ccc));\n        reader.deleteDocument(0);\n        assertEquals(37, reader.docFreq(aaa));\n        dir.tweakBufferSizes();\n        reader.deleteDocument(4);\n        assertEquals(reader.docFreq(bbb), 37);\n        dir.tweakBufferSizes();\n\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        searcher.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        searcher.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testSetBufferSize().mjava","sourceNew":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","sourceOld":"    public void testSetBufferSize() throws IOException {\n      File indexDir = _TestUtil.getTempDir(\"testSetBufferSize\");\n      MockFSDirectory dir = new MockFSDirectory(indexDir, random);\n      try {\n        IndexWriter writer = new IndexWriter(\n            dir,\n            new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                setOpenMode(OpenMode.CREATE).\n                setMergePolicy(newLogMergePolicy(false))\n        );\n        for(int i=0;i<37;i++) {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa bbb ccc ddd\" + i, TextField.TYPE_STORED));\n          doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n          writer.addDocument(doc);\n        }\n\n        dir.allIndexInputs.clear();\n\n        IndexReader reader = IndexReader.open(writer, true);\n        Term aaa = new Term(\"content\", \"aaa\");\n        Term bbb = new Term(\"content\", \"bbb\");\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"0\"));\n        reader = IndexReader.open(writer, true);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(36, hits.length);\n        \n        reader.close();\n        \n        dir.tweakBufferSizes();\n        writer.deleteDocuments(new Term(\"id\", \"4\"));\n        reader = IndexReader.open(writer, true);\n        searcher = newSearcher(reader);\n\n        hits = searcher.search(new TermQuery(bbb), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        dir.tweakBufferSizes();\n        hits = searcher.search(new TermQuery(new Term(\"id\", \"33\")), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(1, hits.length);\n        hits = searcher.search(new TermQuery(aaa), null, 1000).scoreDocs;\n        dir.tweakBufferSizes();\n        assertEquals(35, hits.length);\n        writer.close();\n        reader.close();\n      } finally {\n        _TestUtil.rmDir(indexDir);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"77cc5d33c4ecf450c71edad489df69de68a73a11":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["d572389229127c297dd1fa5ce4758e1cec41e799"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3741149a89925c02f14dbeef8365b896798d91fc"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"52fe11939bbea61107ebe245eae35038988768ca":["77cc5d33c4ecf450c71edad489df69de68a73a11"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3741149a89925c02f14dbeef8365b896798d91fc"],"d572389229127c297dd1fa5ce4758e1cec41e799":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","3741149a89925c02f14dbeef8365b896798d91fc"],"3741149a89925c02f14dbeef8365b896798d91fc":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","52fe11939bbea61107ebe245eae35038988768ca"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["77cc5d33c4ecf450c71edad489df69de68a73a11"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"77cc5d33c4ecf450c71edad489df69de68a73a11":["52fe11939bbea61107ebe245eae35038988768ca"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["962d04139994fce5193143ef35615499a9a96d78","3741149a89925c02f14dbeef8365b896798d91fc"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"52fe11939bbea61107ebe245eae35038988768ca":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["d572389229127c297dd1fa5ce4758e1cec41e799"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"3741149a89925c02f14dbeef8365b896798d91fc":["d493718201f0d0c54c773fb323d87bbd2fbffe41","1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d493718201f0d0c54c773fb323d87bbd2fbffe41","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}