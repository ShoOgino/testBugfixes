{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","commits":[{"id":"3af8c90c5e965a1a8011e827ab59de734c7dfb79","date":1368108782,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexWriter,SegmentInfos,List[#-extends-AtomicReader],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, termInfosIndexDivisor, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos, IndexWriter)} */\n  private static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, writer, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,SegmentInfos,List[#-extends-AtomicReader],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged(SegmentInfos)} */\n  private static DirectoryReader open(Directory directory, SegmentInfos infos, List<? extends AtomicReader> oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0, c = oldReaders.size(); i < c; i++) {\n        final SegmentReader sr = (SegmentReader) oldReaders.get(i);\n        segmentReaders.put(sr.getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).info.name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders.get(oldReaderIndex.intValue());\n      }\n\n      boolean success = false;\n      Throwable prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).info.getUseCompoundFile() != newReaders[i].getSegmentInfo().info.getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).info.dir == newReaders[i].getSegmentInfo().info.dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (Throwable ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (Throwable t) {\n                if (prior == null) prior = t;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) {\n          if (prior instanceof IOException) throw (IOException) prior;\n          if (prior instanceof RuntimeException) throw (RuntimeException) prior;\n          if (prior instanceof Error) throw (Error) prior;\n          throw new RuntimeException(prior);\n        }\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, null, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}