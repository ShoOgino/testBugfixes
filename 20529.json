{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","commits":[{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   */\n  public PhraseHelper(Query query, String field, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field; // if null then don't require field match\n    // filter terms to those we want\n    positionInsensitiveTerms = field != null ? new FieldFilteringTermHashSet(field) : new HashSet<>();\n    // requireFieldMatch optional\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        if (field != null) {\n          // if this span query isn't for this field, skip it.\n          Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n          collectSpanQueryFields(spanQuery, fieldNameSet);\n          if (!fieldNameSet.contains(field)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, false, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new HashSet<>();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // When we call Weight.extractTerms, we do it on clauses that are NOT position sensitive.\n    // We only want the to track a Set of bytes for the Term, not Term class with field part.\n    Set<Term> extractPosInsensitiveTermsTarget = new TreeSet<Term>() {\n      @Override\n      public boolean add(Term term) {\n        // don't call super.add; we don't actually use the superclass\n        if (fieldMatcher.test(term.field())) {\n          return positionInsensitiveTerms.add(term.bytes());\n        } else {\n          return false;\n        }\n      }\n    };\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      // called on Query types that are NOT position sensitive, e.g. TermQuery\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(extractPosInsensitiveTermsTarget);\n      }\n\n      // called on SpanQueries. Some other position-sensitive queries like PhraseQuery are converted beforehand\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new HashSet<>();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // When we call Weight.extractTerms, we do it on clauses that are NOT position sensitive.\n    // We only want the to track a Set of bytes for the Term, not Term class with field part.\n    Set<Term> extractPosInsensitiveTermsTarget = new TreeSet<Term>() {\n      @Override\n      public boolean add(Term term) {\n        // don't call super.add; we don't actually use the superclass\n        if (fieldMatcher.test(term.field())) {\n          return positionInsensitiveTerms.add(term.bytes());\n        } else {\n          return false;\n        }\n      }\n    };\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      // called on Query types that are NOT position sensitive, e.g. TermQuery\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(extractPosInsensitiveTermsTarget);\n      }\n\n      // called on SpanQueries. Some other position-sensitive queries like PhraseQuery are converted beforehand\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new FieldFilteringTermSet();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(positionInsensitiveTerms);\n      }\n\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        // TODO allow users to override the answer to mustRewriteQuery\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/PhraseHelper#PhraseHelper(Query,String,Predicate[String],Function[SpanQuery,Boolean],Function[Query,Collection[Query]],boolean).mjava","sourceNew":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new HashSet<>();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      // called on Query types that are NOT position sensitive, e.g. TermQuery\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost) {\n        query.visit(new QueryVisitor() {\n          @Override\n          public boolean acceptField(String field) {\n            return fieldMatcher.test(field);\n          }\n          @Override\n          public void consumeTerms(Query query, Term... terms) {\n            for (Term term : terms) {\n              positionInsensitiveTerms.add(term.bytes());\n            }\n          }\n        });\n      }\n\n      // called on SpanQueries. Some other position-sensitive queries like PhraseQuery are converted beforehand\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","sourceOld":"  /**\n   * Constructor.\n   * {@code rewriteQueryPred} is an extension hook to override the default choice of\n   * {@link WeightedSpanTermExtractor#mustRewriteQuery(SpanQuery)}. By default unknown query types are rewritten,\n   * so use this to return {@link Boolean#FALSE} if you know the query doesn't need to be rewritten.\n   * Similarly, {@code preExtractRewriteFunction} is also an extension hook for extract to allow different queries\n   * to be set before the {@link WeightedSpanTermExtractor}'s extraction is invoked.\n   * {@code ignoreQueriesNeedingRewrite} effectively ignores any query clause that needs to be \"rewritten\", which is\n   * usually limited to just a {@link SpanMultiTermQueryWrapper} but could be other custom ones.\n   * {@code fieldMatcher} The field name predicate to use for extracting the query part that must be highlighted.\n   */\n  public PhraseHelper(Query query, String field, Predicate<String> fieldMatcher, Function<SpanQuery, Boolean> rewriteQueryPred,\n                      Function<Query, Collection<Query>> preExtractRewriteFunction,\n                      boolean ignoreQueriesNeedingRewrite) {\n    this.fieldName = field;\n    this.fieldMatcher = fieldMatcher;\n    // filter terms to those we want\n    positionInsensitiveTerms = new HashSet<>();\n    spanQueries = new HashSet<>();\n\n    // TODO Have toSpanQuery(query) Function as an extension point for those with custom Query impls\n\n    boolean[] mustRewriteHolder = {false}; // boolean wrapped in 1-ary array so it's mutable from inner class\n\n    // When we call Weight.extractTerms, we do it on clauses that are NOT position sensitive.\n    // We only want the to track a Set of bytes for the Term, not Term class with field part.\n    Set<Term> extractPosInsensitiveTermsTarget = new TreeSet<Term>() {\n      @Override\n      public boolean add(Term term) {\n        // don't call super.add; we don't actually use the superclass\n        if (fieldMatcher.test(term.field())) {\n          return positionInsensitiveTerms.add(term.bytes());\n        } else {\n          return false;\n        }\n      }\n    };\n\n    // For TermQueries or other position insensitive queries, collect the Terms.\n    // For other Query types, WSTE will convert to an equivalent SpanQuery.  NOT extracting position spans here.\n    new WeightedSpanTermExtractor(field) {\n      //anonymous constructor\n      {\n        setExpandMultiTermQuery(true); //necessary for mustRewriteQuery(spanQuery) to work.\n\n        try {\n          extract(query, 1f, null); // null because we won't actually extract right now; we're not collecting\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      protected void extract(Query query, float boost, Map<String, WeightedSpanTerm> terms) throws IOException {\n        Collection<Query> newQueriesToExtract = preExtractRewriteFunction.apply(query);\n        if (newQueriesToExtract != null) {\n          for (Query newQuery : newQueriesToExtract) {\n            extract(newQuery, boost, terms);\n          }\n        } else {\n          super.extract(query, boost, terms);\n        }\n      }\n\n      @Override\n      protected boolean isQueryUnsupported(Class<? extends Query> clazz) {\n        if (clazz.isAssignableFrom(MultiTermQuery.class)) {\n          return true; //We do MTQ processing separately in MultiTermHighlighting.java\n        }\n        return true; //TODO set to false and provide a hook to customize certain queries.\n      }\n\n      // called on Query types that are NOT position sensitive, e.g. TermQuery\n      @Override\n      protected void extractWeightedTerms(Map<String, WeightedSpanTerm> terms, Query query, float boost)\n          throws IOException {\n        query.createWeight(UnifiedHighlighter.EMPTY_INDEXSEARCHER, ScoreMode.COMPLETE_NO_SCORES, boost)\n            .extractTerms(extractPosInsensitiveTermsTarget);\n      }\n\n      // called on SpanQueries. Some other position-sensitive queries like PhraseQuery are converted beforehand\n      @Override\n      protected void extractWeightedSpanTerms(Map<String, WeightedSpanTerm> terms, SpanQuery spanQuery,\n                                              float boost) throws IOException {\n        // if this span query isn't for this field, skip it.\n        Set<String> fieldNameSet = new HashSet<>();//TODO reuse.  note: almost always size 1\n        collectSpanQueryFields(spanQuery, fieldNameSet);\n        for (String spanField : fieldNameSet) {\n          if (!fieldMatcher.test(spanField)) {\n            return;\n          }\n        }\n\n        boolean mustRewriteQuery = mustRewriteQuery(spanQuery);\n        if (ignoreQueriesNeedingRewrite && mustRewriteQuery) {\n          return;// ignore this query\n        }\n        mustRewriteHolder[0] |= mustRewriteQuery;\n\n        spanQueries.add(spanQuery);\n      }\n\n      @Override\n      protected boolean mustRewriteQuery(SpanQuery spanQuery) {\n        Boolean rewriteQ = rewriteQueryPred.apply(spanQuery);// allow to override\n        return rewriteQ != null ? rewriteQ : super.mustRewriteQuery(spanQuery);\n      }\n    }; // calling the constructor triggered the extraction/visiting we want.  Hacky; yes.\n\n    willRewrite = mustRewriteHolder[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["417142ff08fda9cf0b72d5133e63097a166c6458","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"417142ff08fda9cf0b72d5133e63097a166c6458":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["9856095f7afb5a607bf5e65077615ed91273508c","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","9856095f7afb5a607bf5e65077615ed91273508c"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}