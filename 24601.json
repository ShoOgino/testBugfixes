{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"/dev/null","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().updateClusterState();\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().updateClusterState();\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      new CollectionAdminRequest.Create()\n          .setCollectionName(\"testClusterStateMigration\")\n          .setNumShards(1)\n          .setReplicationFactor(1)\n          .setConfigName(\"conf1\")\n          .setStateFormat(1)\n          .process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      new CollectionAdminRequest.MigrateClusterState()\n          .setCollectionName(\"testClusterStateMigration\")\n          .process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#testClusterStateMigration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#testClusterStateMigration().mjava","sourceNew":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","sourceOld":"  private void testClusterStateMigration() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n\n      CollectionAdminRequest.createCollection(\"testClusterStateMigration\",\"conf1\",1,1).setStateFormat(1).process(client);\n\n      waitForRecoveriesToFinish(\"testClusterStateMigration\", true);\n\n      assertEquals(1, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      for (int i = 0; i < 10; i++) {\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.addField(\"id\", \"id_\" + i);\n        client.add(\"testClusterStateMigration\", doc);\n      }\n      client.commit(\"testClusterStateMigration\");\n\n      CollectionAdminRequest.migrateCollectionFormat(\"testClusterStateMigration\").process(client);\n\n      client.getZkStateReader().forceUpdateCollection(\"testClusterStateMigration\");\n\n      assertEquals(2, client.getZkStateReader().getClusterState().getCollection(\"testClusterStateMigration\").getStateFormat());\n\n      QueryResponse response = client.query(\"testClusterStateMigration\", new SolrQuery(\"*:*\"));\n      assertEquals(10, response.getResults().getNumFound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3217321f3e1d7922898c6c633d17acfa840d6875","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","ac97ea104d893f16aab430d9904473bc1f233f3c"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}