{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, null);\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(AtomicReaderContext,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#explain(IndexReader.AtomicReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader().getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(IndexReader.AtomicReaderContext context, int doc) throws IOException {\n      Scorer scorer = scorer(context, true, false, context.reader.getLiveDocs());\n      boolean exists = scorer.advance(doc) == doc;\n\n      ComplexExplanation result = new ComplexExplanation();\n\n      if (exists) {\n        result.setDescription(this.toString()\n        + \" , product of:\");\n        result.setValue(queryWeight);\n        result.setMatch(Boolean.TRUE);\n        result.addDetail(new Explanation(getBoost(), \"boost\"));\n        result.addDetail(new Explanation(queryNorm,\"queryNorm\"));\n      } else {\n        result.setDescription(this.toString()\n        + \" doesn't match id \" + doc);\n        result.setValue(0);\n        result.setMatch(Boolean.FALSE);\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"c26f00b574427b55127e869b935845554afde1fa":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}