{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() throws IOException {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefArray#iterator(Comparator[BytesRef]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/BytesRefList#iterator(Comparator[BytesRef]).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a {@link BytesRefIterator} with point in time semantics. The\n   * iterator provides access to all so far appended {@link BytesRef} instances.\n   * </p>\n   * <p>\n   * If a non <code>null</code> {@link Comparator} is provided the iterator will\n   * iterate the byte values in the order specified by the comparator. Otherwise\n   * the order is the same as the values were appended.\n   * </p>\n   * <p>\n   * This is a non-destructive operation.\n   * </p>\n   */\n  public BytesRefIterator iterator(final Comparator<BytesRef> comp) {\n    final BytesRef spare = new BytesRef();\n    final int size = size();\n    final int[] ords = comp == null ? null : sort(comp);\n    return new BytesRefIterator() {\n      int pos = 0;\n      \n      @Override\n      public BytesRef next() {\n        if (pos < size) {\n          return get(spare, ords == null ? pos++ : ords[pos++]);\n        }\n        return null;\n      }\n      \n      @Override\n      public Comparator<BytesRef> getComparator() {\n        return comp;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ce73f585d17f53055185a19beb46db23d76e0ad9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["ce73f585d17f53055185a19beb46db23d76e0ad9","d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}