{"path":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"a88da65f7210ad629e64c0553232a63d5d1bdc7c","date":1285779929,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues latVals = latSource.getValues(context, reader);\n    final DocValues lonVals = lonSource.getValues(context, reader);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues latVals = latSource.getValues(context, reader);\n    final DocValues lonVals = lonSource.getValues(context, reader);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final DocValues latVals = latSource.getValues(context, readerContext);\n    final DocValues lonVals = lonSource.getValues(context, readerContext);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues latVals = latSource.getValues(context, reader);\n    final DocValues lonVals = lonSource.getValues(context, reader);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues latVals = latSource.getValues(context, reader);\n    final DocValues lonVals = lonSource.getValues(context, reader);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/HaversineConstFunction#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues latVals = latSource.getValues(context, reader);\n    final DocValues lonVals = lonSource.getValues(context, reader);\n    final double latCenterRad = this.latCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double lonCenterRad = this.lonCenter * DistanceUtils.DEGREES_TO_RADIANS;\n    final double latCenterRad_cos = this.latCenterRad_cos;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n        return (float) doubleVal(doc);\n      }\n\n      public int intVal(int doc) {\n        return (int) doubleVal(doc);\n      }\n\n      public long longVal(int doc) {\n        return (long) doubleVal(doc);\n      }\n\n      public double doubleVal(int doc) {\n        double latRad = latVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double lonRad = lonVals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;\n        double diffX = latCenterRad - latRad;\n        double diffY = lonCenterRad - lonRad;\n        double hsinX = Math.sin(diffX * 0.5);\n        double hsinY = Math.sin(diffY * 0.5);\n        double h = hsinX * hsinX +\n                (latCenterRad_cos * Math.cos(latRad) * hsinY * hsinY);\n        return (EARTH_MEAN_DIAMETER * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n      }\n\n      public String strVal(int doc) {\n        return Double.toString(doubleVal(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return name() + '(' + latVals.toString(doc) + ',' + lonVals.toString(doc) + ',' + latCenter + ',' + lonCenter + ')';\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c220849f876de24a79f756f65b3eb045db59f63f":["a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a88da65f7210ad629e64c0553232a63d5d1bdc7c","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a88da65f7210ad629e64c0553232a63d5d1bdc7c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"a88da65f7210ad629e64c0553232a63d5d1bdc7c":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}