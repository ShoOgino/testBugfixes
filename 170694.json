{"path":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cb179b2fab2183d2f6041e450ff8022c592ecf0","date":1229553695,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(\"tag\");\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e42a045f2fc4d67aa1fdfed0ff391aa44ce01f6","date":1241585160,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(\"tag\");\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab9c682f64c2e2abeee2433e62654b93b89bd95","date":1258644010,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The whole query string\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3b531acead13ad5a924aad03c04dd7fb117ac76","date":1258644367,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The whole query string\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/search/QParser#QParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","sourceOld":"  /**\n   * Constructor for the QParser\n   * @param qstr The part of the query string specific to this parser\n   * @param localParams The set of parameters that are specific to this QParser.  See http://wiki.apache.org/solr/LocalParams\n   * @param params The rest of the {@link org.apache.solr.common.params.SolrParams}\n   * @param req The original {@link org.apache.solr.request.SolrQueryRequest}.\n   */\n  public QParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    this.qstr = qstr;\n    this.localParams = localParams;\n\n    // insert tags into tagmap.\n    // WARNING: the internal representation of tagged objects in the request context is\n    // experimental and subject to change!\n    if (localParams != null) {\n      String tagStr = localParams.get(CommonParams.TAG);\n      if (tagStr != null) {\n        Map context = req.getContext();\n        Map<String,Collection<Object>> tagMap = (Map<String, Collection<Object>>)req.getContext().get(\"tags\");\n        if (tagMap == null) {\n          tagMap = new HashMap<String,Collection<Object>>();\n          context.put(\"tags\", tagMap);          \n        }\n        if (tagStr.indexOf(',') >= 0) {\n          List<String> tags = StrUtils.splitSmart(tagStr, ',');\n          for (String tag : tags) {\n            addTag(tagMap, tag, this);\n          }\n        } else {\n          addTag(tagMap, tagStr, this);\n        }\n      }\n    }\n\n    this.params = params;\n    this.req = req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3b531acead13ad5a924aad03c04dd7fb117ac76":["7ab9c682f64c2e2abeee2433e62654b93b89bd95"],"5e42a045f2fc4d67aa1fdfed0ff391aa44ce01f6":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"7ab9c682f64c2e2abeee2433e62654b93b89bd95":["5e42a045f2fc4d67aa1fdfed0ff391aa44ce01f6"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"ad94625fb8d088209f46650c8097196fec67f00c":["d3b531acead13ad5a924aad03c04dd7fb117ac76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3b531acead13ad5a924aad03c04dd7fb117ac76":["ad94625fb8d088209f46650c8097196fec67f00c"],"5e42a045f2fc4d67aa1fdfed0ff391aa44ce01f6":["7ab9c682f64c2e2abeee2433e62654b93b89bd95"],"7ab9c682f64c2e2abeee2433e62654b93b89bd95":["d3b531acead13ad5a924aad03c04dd7fb117ac76"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["9cb179b2fab2183d2f6041e450ff8022c592ecf0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9cb179b2fab2183d2f6041e450ff8022c592ecf0":["5e42a045f2fc4d67aa1fdfed0ff391aa44ce01f6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}