{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        if (lastActionExecutedAt.get() != 0)  {\n          log.info(\"last action at \" + lastActionExecutedAt.get() + \" time = \" + cluster.getTimeSource().getTime());\n          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTime() - lastActionExecutedAt.get()) <\n              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {\n            log.info(\"action executed again before minimum wait time from {}\", event.getSource());\n            fail(\"TriggerListener was fired before the throttling period\");\n          }\n        }\n        if (onlyOnce.compareAndSet(false, true)) {\n          log.info(\"action executed from {}\", event.getSource());\n          lastActionExecutedAt.set(cluster.getTimeSource().getTime());\n          getTriggerFiredLatch().countDown();\n        } else  {\n          log.info(\"action executed more than once from {}\", event.getSource());\n          fail(\"Trigger should not have fired more than once!\");\n        }\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        if (lastActionExecutedAt.get() != 0)  {\n          log.info(\"last action at \" + lastActionExecutedAt.get() + \" time = \" + cluster.getTimeSource().getTimeNs());\n          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTimeNs() - lastActionExecutedAt.get()) <\n              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {\n            log.info(\"action executed again before minimum wait time from {}\", event.getSource());\n            fail(\"TriggerListener was fired before the throttling period\");\n          }\n        }\n        if (onlyOnce.compareAndSet(false, true)) {\n          log.info(\"action executed from {}\", event.getSource());\n          lastActionExecutedAt.set(cluster.getTimeSource().getTimeNs());\n          getTriggerFiredLatch().countDown();\n        } else  {\n          log.info(\"action executed more than once from {}\", event.getSource());\n          fail(\"Trigger should not have fired more than once!\");\n        }\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        if (lastActionExecutedAt.get() != 0)  {\n          log.info(\"last action at \" + lastActionExecutedAt.get() + \" time = \" + cluster.getTimeSource().getTime());\n          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTime() - lastActionExecutedAt.get()) <\n              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {\n            log.info(\"action executed again before minimum wait time from {}\", event.getSource());\n            fail(\"TriggerListener was fired before the throttling period\");\n          }\n        }\n        if (onlyOnce.compareAndSet(false, true)) {\n          log.info(\"action executed from {}\", event.getSource());\n          lastActionExecutedAt.set(cluster.getTimeSource().getTime());\n          getTriggerFiredLatch().countDown();\n        } else  {\n          log.info(\"action executed more than once from {}\", event.getSource());\n          fail(\"Trigger should not have fired more than once!\");\n        }\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration.ThrottlingTesterAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        if (lastActionExecutedAt.get() != 0)  {\n          log.info(\"last action at \" + lastActionExecutedAt.get() + \" time = \" + cluster.getTimeSource().getTimeNs());\n          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTimeNs() - lastActionExecutedAt.get()) <\n              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {\n            log.info(\"action executed again before minimum wait time from {}\", event.getSource());\n            fail(\"TriggerListener was fired before the throttling period\");\n          }\n        }\n        if (onlyOnce.compareAndSet(false, true)) {\n          log.info(\"action executed from {}\", event.getSource());\n          lastActionExecutedAt.set(cluster.getTimeSource().getTimeNs());\n          getTriggerFiredLatch().countDown();\n        } else  {\n          log.info(\"action executed more than once from {}\", event.getSource());\n          fail(\"Trigger should not have fired more than once!\");\n        }\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(TriggerEvent event, ActionContext actionContext) {\n      boolean locked = lock.tryLock();\n      if (!locked)  {\n        log.info(\"We should never have a tryLock fail because actions are never supposed to be executed concurrently\");\n        return;\n      }\n      try {\n        if (lastActionExecutedAt.get() != 0)  {\n          log.info(\"last action at \" + lastActionExecutedAt.get() + \" time = \" + cluster.getTimeSource().getTimeNs());\n          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTimeNs() - lastActionExecutedAt.get()) <\n              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {\n            log.info(\"action executed again before minimum wait time from {}\", event.getSource());\n            fail(\"TriggerListener was fired before the throttling period\");\n          }\n        }\n        if (onlyOnce.compareAndSet(false, true)) {\n          log.info(\"action executed from {}\", event.getSource());\n          lastActionExecutedAt.set(cluster.getTimeSource().getTimeNs());\n          getTriggerFiredLatch().countDown();\n        } else  {\n          log.info(\"action executed more than once from {}\", event.getSource());\n          fail(\"Trigger should not have fired more than once!\");\n        }\n      } finally {\n        lock.unlock();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}