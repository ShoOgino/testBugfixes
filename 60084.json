{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException#getMessage().mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException#getMessage().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/parser/ParseException#getMessage().mjava","sourceNew":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  public String getMessage() {\n    if (!specialConstructor) {\n      return super.getMessage();\n    }\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  public String getMessage() {\n    if (!specialConstructor) {\n      return super.getMessage();\n    }\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException#getMessage().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException#getMessage().mjava","sourceNew":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  public String getMessage() {\n    if (!specialConstructor) {\n      return super.getMessage();\n    }\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","sourceOld":"  /**\n   * This method has the standard behavior when this object has been\n   * created using the standard constructors.  Otherwise, it uses\n   * \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser), then this method is called during the printing\n   * of the final stack trace, and hence the correct error message\n   * gets displayed.\n   */\n  public String getMessage() {\n    if (!specialConstructor) {\n      return super.getMessage();\n    }\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n      }\n      expected.append(eol).append(\"    \");\n    }\n    String retval = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) retval += \" \";\n      if (tok.kind == 0) {\n        retval += tokenImage[0];\n        break;\n      }\n      retval += \" \" + tokenImage[tok.kind];\n      retval += \" \\\"\";\n      retval += add_escapes(tok.image);\n      retval += \" \\\"\";\n      tok = tok.next;\n    }\n    retval += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    retval += \".\" + eol;\n    if (expectedTokenSequences.length == 1) {\n      retval += \"Was expecting:\" + eol + \"    \";\n    } else {\n      retval += \"Was expecting one of:\" + eol + \"    \";\n    }\n    retval += expected.toString();\n    return retval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}