{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","commits":[{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, IndexDocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(ValueType.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarSortedBytesImpl.Writer#merge(MergeState,IndexDocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, IndexDocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(ValueType.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarSortedBytesImpl.Writer#merge(MergeState,DocValues[]).mjava","sourceNew":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","sourceOld":"    @Override\n    public void merge(MergeState mergeState, DocValues[] docValues)\n        throws IOException {\n      boolean success = false;\n      try {\n        MergeContext ctx = SortedBytesMergeUtils.init(Type.BYTES_VAR_SORTED, docValues, comp, mergeState);\n        final List<SortedSourceSlice> slices = SortedBytesMergeUtils.buildSlices(mergeState, docValues, ctx);\n        IndexOutput datOut = getOrCreateDataOut();\n        \n        ctx.offsets = new long[1];\n        final int maxOrd = SortedBytesMergeUtils.mergeRecords(ctx, datOut, slices);\n        final long[] offsets = ctx.offsets;\n        maxBytes = offsets[maxOrd-1];\n        final IndexOutput idxOut = getOrCreateIndexOut();\n        \n        idxOut.writeLong(maxBytes);\n        final PackedInts.Writer offsetWriter = PackedInts.getWriter(idxOut, maxOrd+1,\n            PackedInts.bitsRequired(maxBytes));\n        offsetWriter.add(0);\n        for (int i = 0; i < maxOrd; i++) {\n          offsetWriter.add(offsets[i]);\n        }\n        offsetWriter.finish();\n        \n        final PackedInts.Writer ordsWriter = PackedInts.getWriter(idxOut, ctx.docToEntry.length,\n            PackedInts.bitsRequired(maxOrd-1));\n        for (SortedSourceSlice slice : slices) {\n          slice.writeOrds(ordsWriter);\n        }\n        ordsWriter.finish();\n        success = true;\n      } finally {\n        releaseResources();\n        if (success) {\n          IOUtils.close(getIndexOut(), getDataOut());\n        } else {\n          IOUtils.closeWhileHandlingException(getIndexOut(), getDataOut());\n        }\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}