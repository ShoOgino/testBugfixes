{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","sourceNew":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","sourceOld":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551a8665af55f08d0001b0d58ed4bd81a8b8258f","date":1354706854,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","sourceNew":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    // the code below tries to achieve non-uniform distribution of\n    // categories. Perhaps we can use random.nextGaussian() instead,\n    // something like nextGaussian() * stdev + maxCategory/2. Or\n    // try to generate a Zipf distribution.\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","sourceOld":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","sourceNew":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    // the code below tries to achieve non-uniform distribution of\n    // categories. Perhaps we can use random.nextGaussian() instead,\n    // something like nextGaussian() * stdev + maxCategory/2. Or\n    // try to generate a Zipf distribution.\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","sourceOld":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","sourceNew":null,"sourceOld":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    // the code below tries to achieve non-uniform distribution of\n    // categories. Perhaps we can use random.nextGaussian() instead,\n    // something like nextGaussian() * stdev + maxCategory/2. Or\n    // try to generate a Zipf distribution.\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/BaseTestTopK#nextInt(int).mjava","sourceNew":null,"sourceOld":"  /** prepare the next random int */\n  private void nextInt(int doc) {\n    if (currDoc == doc ) {\n      return;\n    }\n    currDoc = doc;\n    // the code below tries to achieve non-uniform distribution of\n    // categories. Perhaps we can use random.nextGaussian() instead,\n    // something like nextGaussian() * stdev + maxCategory/2. Or\n    // try to generate a Zipf distribution.\n    nextInt = random().nextInt(categoriesPow2);\n    nextInt = (int)Math.sqrt(nextInt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["551a8665af55f08d0001b0d58ed4bd81a8b8258f","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["551a8665af55f08d0001b0d58ed4bd81a8b8258f","407687e67faf6e1f02a211ca078d8e3eed631027"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["d33e19a97046248623a7591aeaa6547233fd15e2","407687e67faf6e1f02a211ca078d8e3eed631027","3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}