{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = new Runnable() {\n      @Override\n      public void run() {\n        logReplayFinish.release();\n      }\n    };\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core no longer replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":5,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core no longer replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":5,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testExistOldBufferLog().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testBufferingFlags().mjava","sourceNew":"  @Test\n  public void testExistOldBufferLog() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      // the core no longer replay updates from buffer tlog on startup\n      assertTrue(ulog.existOldBufferLog());   // since we died while buffering, we should see this last\n\n      // buffer tlog won't be removed on restart\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue(ulog.existOldBufferLog());\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertFalse(ulog.existOldBufferLog());\n      // Timeout for Q7 get replayed, because it was added on tlog, therefore it will be replayed on restart\n      TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      timeout.waitFor(\"Timeout waiting for finish replay updates\",\n          () -> h.getCore().getUpdateHandler().getUpdateLog().getState() == UpdateLog.State.ACTIVE);\n      assertJQ(req(\"qt\",\"/get\", \"id\", \"Q7\") ,\"/doc/id==Q7\");\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testBufferingFlags() throws Exception {\n\n    DirectUpdateHandler2.commitOnClose = false;\n    final Semaphore logReplayFinish = new Semaphore(0);\n\n    UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n    SolrQueryRequest req = req();\n    UpdateHandler uhandler = req.getCore().getUpdateHandler();\n    UpdateLog ulog = uhandler.getUpdateLog();\n\n    try {\n      clearIndex();\n      assertU(commit());\n\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());\n      ulog.bufferUpdates();\n\n      // simulate updates from a leader\n      updateJ(jsonAdd(sdoc(\"id\",\"Q1\", \"_version_\",\"101\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q2\", \"_version_\",\"102\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q3\", \"_version_\",\"103\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      logReplayFinish.acquire();  // wait for replay to finish\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);   // since we died while buffering, we should see this last\n\n      //\n      // Try again to ensure that the previous log replay didn't wipe out our flags\n      //\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) != 0);\n\n      // now do some normal non-buffered adds\n      updateJ(jsonAdd(sdoc(\"id\",\"Q4\", \"_version_\",\"114\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q5\", \"_version_\",\"115\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"Q6\", \"_version_\",\"116\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      assertU(commit());\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0);\n\n      ulog.bufferUpdates();\n      // simulate receiving no updates\n      ulog.applyBufferedUpdates();\n      updateJ(jsonAdd(sdoc(\"id\",\"Q7\", \"_version_\",\"117\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER)); // do another add to make sure flags are back to normal\n\n      req.close();\n      h.close();\n      createCore();\n\n      req = req();\n      uhandler = req.getCore().getUpdateHandler();\n      ulog = uhandler.getUpdateLog();\n\n      assertTrue((ulog.getStartingOperation() & UpdateLog.FLAG_GAP) == 0); // check flags on Q7\n\n      logReplayFinish.acquire();\n      assertEquals(UpdateLog.State.ACTIVE, ulog.getState()); // leave each test method in a good state\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n\n      req().close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["3a0c04b71951333291abc7f317109a6a5957bd28","1455c941cc4ce652efc776fc23471b0e499246f6"],"f592209545c71895260367152601e9200399776d":["3a0c04b71951333291abc7f317109a6a5957bd28","1455c941cc4ce652efc776fc23471b0e499246f6"],"3a0c04b71951333291abc7f317109a6a5957bd28":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["3a0c04b71951333291abc7f317109a6a5957bd28"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","3a0c04b71951333291abc7f317109a6a5957bd28"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"3a0c04b71951333291abc7f317109a6a5957bd28":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","1455c941cc4ce652efc776fc23471b0e499246f6"],"1455c941cc4ce652efc776fc23471b0e499246f6":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}