{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDeletedDocsEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDeletedDocsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertDeletedDocs(IndexReader,IndexReader).mjava","sourceNew":"  // TODO: this is kinda stupid, we don't delete documents in the test.\n  public void assertDeletedDocsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.numDeletedDocs() == rightReader.numDeletedDocs();\n    Bits leftBits = MultiFields.getLiveDocs(leftReader);\n    Bits rightBits = MultiFields.getLiveDocs(rightReader);\n    \n    if (leftBits == null || rightBits == null) {\n      assertNull(info, leftBits);\n      assertNull(info, rightBits);\n      return;\n    }\n    \n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    assertEquals(info, leftBits.length(), rightBits.length());\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      assertEquals(info, leftBits.get(i), rightBits.get(i));\n    }\n  }\n\n","sourceOld":"  // TODO: this is kinda stupid, we don't delete documents in the test.\n  public void assertDeletedDocs(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    assert leftReader.numDeletedDocs() == rightReader.numDeletedDocs();\n    Bits leftBits = MultiFields.getLiveDocs(leftReader);\n    Bits rightBits = MultiFields.getLiveDocs(rightReader);\n    \n    if (leftBits == null || rightBits == null) {\n      assertNull(info, leftBits);\n      assertNull(info, rightBits);\n      return;\n    }\n    \n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    assertEquals(info, leftBits.length(), rightBits.length());\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      assertEquals(info, leftBits.get(i), rightBits.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDeletedDocsEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertDeletedDocsEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  // TODO: this is kinda stupid, we don't delete documents in the test.\n  public void assertDeletedDocsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.numDeletedDocs() == rightReader.numDeletedDocs();\n    Bits leftBits = MultiBits.getLiveDocs(leftReader);\n    Bits rightBits = MultiBits.getLiveDocs(rightReader);\n    \n    if (leftBits == null || rightBits == null) {\n      assertNull(info, leftBits);\n      assertNull(info, rightBits);\n      return;\n    }\n    \n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    assertEquals(info, leftBits.length(), rightBits.length());\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      assertEquals(info, leftBits.get(i), rightBits.get(i));\n    }\n  }\n\n","sourceOld":"  // TODO: this is kinda stupid, we don't delete documents in the test.\n  public void assertDeletedDocsEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    assert leftReader.numDeletedDocs() == rightReader.numDeletedDocs();\n    Bits leftBits = MultiFields.getLiveDocs(leftReader);\n    Bits rightBits = MultiFields.getLiveDocs(rightReader);\n    \n    if (leftBits == null || rightBits == null) {\n      assertNull(info, leftBits);\n      assertNull(info, rightBits);\n      return;\n    }\n    \n    assert leftReader.maxDoc() == rightReader.maxDoc();\n    assertEquals(info, leftBits.length(), rightBits.length());\n    for (int i = 0; i < leftReader.maxDoc(); i++) {\n      assertEquals(info, leftBits.get(i), rightBits.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}