{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","commits":[{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\");\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\");\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64);\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length);\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final AtomicLong trackBytes = new AtomicLong(0);\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, ValueType.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, ValueType.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, ValueType.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    IndexDocValues r = Ints.getValues(dir, \"test\", sourceArray.length, ValueType.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testGetInt64Array().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#testGetInt64Array().mjava","sourceNew":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetInt64Array() throws IOException {\n    long[] sourceArray = new long[] {1,2,3};\n    Directory dir = newDirectory();\n    final Counter trackBytes = Counter.newCounter();\n    Writer w = Ints.getWriter(dir, \"test\", trackBytes, Type.FIXED_INTS_64, newIOContext(random));\n    for (int i = 0; i < sourceArray.length; i++) {\n      w.add(i, sourceArray[i]);\n    }\n    w.finish(sourceArray.length);\n    DocValues r = Ints.getValues(dir, \"test\", sourceArray.length, Type.FIXED_INTS_64, newIOContext(random));\n    Source source = r.getSource();\n    assertTrue(source.hasArray());\n    long[] loaded = ((long[])source.getArray());\n    assertEquals(loaded.length, sourceArray.length);\n    for (int i = 0; i < loaded.length; i++) {\n      assertEquals(\"value didn't match at index \" + i, sourceArray[i], loaded[i]);\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["85eb75e0c0203e44dcf686f35876cf6080f3a671","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"17cc1e690c31c800f83860fbfd0423462962ef01":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["17cc1e690c31c800f83860fbfd0423462962ef01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"17cc1e690c31c800f83860fbfd0423462962ef01":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["17cc1e690c31c800f83860fbfd0423462962ef01","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}