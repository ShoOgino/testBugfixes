{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2.0\");\n    assertQueryEquals(\"term~0.7\", null, \"term~0.7\");\n    assertQueryEquals(\"term~^3\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2.0^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(0.7f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2.0f, fq.getMinSimilarity(), 0.1f);\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2.0\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2.0\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"term*^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"term~2^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"term*germ^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    try {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n      fail();\n    } catch (ParseException pe) {\n      // expected exception\n    }\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","de78a3a2b1c56fcb670ee23d8c50ce678b7c1b1c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", true, \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", true, \"term*\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"term*\", false, \"term*\");\n    assertWildcardQueryEquals(\"Term*\", false, \"Term*\");\n    assertWildcardQueryEquals(\"TERM*\", false, \"TERM*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", true, \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", true, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", true, \"te?m*germ\");\n    // explicitly disable lowercase conversion:\n    assertWildcardQueryEquals(\"te?m\", false, \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", false, \"Te?m\");\n    assertWildcardQueryEquals(\"TE?M\", false, \"TE?M\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", false, \"Te?m*gerM\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", true, \"term~2\");\n    assertWildcardQueryEquals(\"Term~\", false, \"Term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", true, \"[a TO c]\");\n    assertWildcardQueryEquals(\"[A TO C]\", false, \"[A TO C]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testWildcard().mjava","sourceNew":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n  }\n\n","sourceOld":"  public void testWildcard() throws Exception {\n    assertQueryEquals(\"term*\", null, \"term*\");\n    assertQueryEquals(\"term*^2\", null, \"(term*)^2.0\");\n    assertQueryEquals(\"term~\", null, \"term~2\");\n    assertQueryEquals(\"term~0.7\", null, \"term~1\");\n    assertQueryEquals(\"term~^3\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term^3~\", null, \"(term~2)^3.0\");\n    assertQueryEquals(\"term*germ\", null, \"term*germ\");\n    assertQueryEquals(\"term*germ^3\", null, \"(term*germ)^3.0\");\n\n    assertTrue(getQuery(\"term*\", null) instanceof PrefixQuery);\n    assertTrue(getQuery(\"term*^2\", null) instanceof BoostQuery);\n    assertTrue(((BoostQuery) getQuery(\"term*^2\", null)).getQuery() instanceof PrefixQuery);\n    assertTrue(getQuery(\"term~\", null) instanceof FuzzyQuery);\n    assertTrue(getQuery(\"term~0.7\", null) instanceof FuzzyQuery);\n    FuzzyQuery fq = (FuzzyQuery) getQuery(\"term~0.7\", null);\n    assertEquals(1, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    fq = (FuzzyQuery) getQuery(\"term~\", null);\n    assertEquals(2, fq.getMaxEdits());\n    assertEquals(FuzzyQuery.defaultPrefixLength, fq.getPrefixLength());\n    expectThrows(ParseException.class, () -> {\n      getQuery(\"term~1.1\", null); // value > 1, throws exception\n    });\n    assertTrue(getQuery(\"term*germ\", null) instanceof WildcardQuery);\n\n    /*\n     * Tests to see that wild card terms are (or are not) properly lower-cased\n     * with propery parser configuration\n     */\n    // First prefix queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"term*\", \"term*\");\n    assertWildcardQueryEquals(\"Term*\", \"term*\");\n    assertWildcardQueryEquals(\"TERM*\", \"term*\");\n    // Then 'full' wildcard queries:\n    // by default, convert to lowercase:\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    // explicitly set lowercase:\n    assertWildcardQueryEquals(\"te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m\", \"te?m\");\n    assertWildcardQueryEquals(\"TE?M\", \"te?m\");\n    assertWildcardQueryEquals(\"Te?m*gerM\", \"te?m*germ\");\n    // Fuzzy queries:\n    assertWildcardQueryEquals(\"Term~\", \"term~2\");\n    // Range queries:\n    assertWildcardQueryEquals(\"[A TO C]\", \"[a TO c]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["ea4107f60b9f95623c16025c9c247412ff809092"],"ea4107f60b9f95623c16025c9c247412ff809092":["05fe562aa248790944d43cdd478f512572835ba0"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05fe562aa248790944d43cdd478f512572835ba0":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["05fe562aa248790944d43cdd478f512572835ba0"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea4107f60b9f95623c16025c9c247412ff809092":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}