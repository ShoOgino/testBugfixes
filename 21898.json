{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","commits":[{"id":"190779ba7de3fda15afd1bbafbc383720a4b0966","date":1384747256,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!indexDir.fileExists((String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String,Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!indexDir.fileExists((String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String,Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!indexDir.fileExists((String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!indexDir.fileExists((String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<String,Object>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!slowFileExists(indexDir, (String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!indexDir.fileExists((String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738","date":1423258737,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      CompareResult compareResult = compareFile(indexDir, filename, (Long) file.get(SIZE), (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || (!compareResult.checkSummed && (filename.endsWith(\".si\") || filename.endsWith(\".liv\")\n          || filename.startsWith(\"segments_\")))) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex,\n      Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      if (!slowFileExists(indexDir, (String) file.get(NAME))\n          || downloadCompleteIndex) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cef15a56c64f46175c1d6df43f47d4b09f44d57b","date":1423328408,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfChecksumFails(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      CompareResult compareResult = compareFile(indexDir, filename, (Long) file.get(SIZE), (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || (!compareResult.checkSummed && (filename.endsWith(\".si\") || filename.endsWith(\".liv\")\n          || filename.startsWith(\"segments_\")))) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59a3dc516228da9c3062b639c3aa88a79ae9a185","date":1423367621,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfChecksumFails(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#downloadIndexFiles(boolean,Directory,Directory,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#downloadIndexFiles(boolean,Directory,Directory,long).mjava","sourceNew":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Download the index files. If a new index is needed, download all the files.\n   *\n   * @param downloadCompleteIndex is it a fresh index copy\n   * @param tmpIndexDir              the directory to which files need to be downloadeed to\n   * @param indexDir                 the indexDir to be merged to\n   * @param latestGeneration         the version number\n   */\n  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)\n      throws Exception {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Download files to dir: \" + Arrays.asList(indexDir.listAll()));\n    }\n    for (Map<String,Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      long size = (Long) file.get(SIZE);\n      CompareResult compareResult = compareFile(indexDir, filename, size, (Long) file.get(CHECKSUM));\n      if (!compareResult.equal || downloadCompleteIndex\n          || filesToAlwaysDownloadIfNoChecksums(filename, size, compareResult)) {\n        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,\n            (String) file.get(NAME), false, latestGeneration);\n        currentFile = file;\n        dirFileFetcher.fetchFile();\n        filesDownloaded.add(new HashMap<>(file));\n      } else {\n        LOG.info(\"Skipping download for \" + file.get(NAME)\n            + \" because it already exists\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["190779ba7de3fda15afd1bbafbc383720a4b0966"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["59a3dc516228da9c3062b639c3aa88a79ae9a185","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["59a3dc516228da9c3062b639c3aa88a79ae9a185"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"59a3dc516228da9c3062b639c3aa88a79ae9a185":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","190779ba7de3fda15afd1bbafbc383720a4b0966"],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"190779ba7de3fda15afd1bbafbc383720a4b0966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738"],"59a3dc516228da9c3062b639c3aa88a79ae9a185":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"8d50ba1695a40ff11a41bbfc1ad45c7bfd6a5738":["cef15a56c64f46175c1d6df43f47d4b09f44d57b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","190779ba7de3fda15afd1bbafbc383720a4b0966"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cef15a56c64f46175c1d6df43f47d4b09f44d57b":["59a3dc516228da9c3062b639c3aa88a79ae9a185"],"190779ba7de3fda15afd1bbafbc383720a4b0966":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}