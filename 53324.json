{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Iterator<IndexDocument> iterator() {\n    return new Iterator<IndexDocument>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public IndexDocument next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Iterator<IndexDocument> iterator() {\n    return new Iterator<IndexDocument>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public IndexDocument next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<IndexDocument> iterator() {\n    return new Iterator<IndexDocument>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public IndexDocument next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb97f106bc2b1b54e7d348a30004f77e5a4c8ac2","date":1475239647,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        SchemaField uniq = req.getSchema().getUniqueKeyField();\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407b2e02aedce6b9118323ef204a08acfd83add7","date":1487217081,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(VersionInfo.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(VersionInfo.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(VersionInfo.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(\"_root_\", idField);      // should this be a string or the same type as the ID?\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ce7c704ca874aa623a99f2669737b52ec71cfc","date":1528728510,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#iterator().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Iterator<Document> iterator() {\n    return new Iterator<Document>() {\n      Iterator<SolrInputDocument> iter;\n\n      {\n        List<SolrInputDocument> all = flatten(solrDoc);\n\n        String idField = getHashableId();\n\n        boolean isVersion = version != 0;\n\n        for (SolrInputDocument sdoc : all) {\n          sdoc.setField(IndexSchema.ROOT_FIELD_NAME, idField);\n          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);\n          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)\n          // then we could add this field to the generated lucene document instead.\n        }\n\n        iter = all.iterator();\n     }\n\n      @Override\n      public boolean hasNext() {\n        return iter.hasNext();\n      }\n\n      @Override\n      public Document next() {\n        return DocumentBuilder.toDocument(iter.next(), req.getSchema());\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["407b2e02aedce6b9118323ef204a08acfd83add7"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"28288370235ed02234a64753cdbf0c6ec096304a":["6d2dadc1f5ca8703d8659f4964961f9967935d75","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"407b2e02aedce6b9118323ef204a08acfd83add7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["407b2e02aedce6b9118323ef204a08acfd83add7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"fb97f106bc2b1b54e7d348a30004f77e5a4c8ac2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","fb97f106bc2b1b54e7d348a30004f77e5a4c8ac2"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e5fa6615014cd2288fe930f8c8bb726f9504961d","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ce7c704ca874aa623a99f2669737b52ec71cfc"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","c5ce7c704ca874aa623a99f2669737b52ec71cfc"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c5ce7c704ca874aa623a99f2669737b52ec71cfc","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"407b2e02aedce6b9118323ef204a08acfd83add7":["6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fb97f106bc2b1b54e7d348a30004f77e5a4c8ac2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","407b2e02aedce6b9118323ef204a08acfd83add7"],"c5ce7c704ca874aa623a99f2669737b52ec71cfc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fb97f106bc2b1b54e7d348a30004f77e5a4c8ac2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}