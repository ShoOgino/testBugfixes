{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(Automaton,RunAutomaton,Term,IndexReader,boolean).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDestUTF8InUTF16Order);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. This constructor allows the\n   * (dangerous) option of passing in a pre-compiled RunAutomaton. If you use \n   * this ctor and compile your own RunAutomaton, you are responsible for \n   * ensuring it is in sync with the Automaton object, including internal\n   * State numbering, or you will get undefined behavior.\n   * <p>\n   * @param preCompiled optional pre-compiled RunAutomaton (can be null)\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(Automaton automaton, RunAutomaton preCompiled,\n      Term queryTerm, IndexReader reader, boolean finite)\n      throws IOException {\n    super(reader, queryTerm.field());\n    this.automaton = automaton;\n    this.finite = finite;\n\n    /* \n     * tableize the automaton. this also ensures it is deterministic, and has no \n     * transitions to dead states. it also invokes Automaton.setStateNumbers to\n     * number the original states (this is how they are tableized)\n     */\n    if (preCompiled == null)\n      runAutomaton = new RunAutomaton(this.automaton);\n    else\n      runAutomaton = preCompiled;\n\n    commonSuffixRef = finite ? null : new BytesRef(getValidUTF16Suffix(SpecialOperations\n        .getCommonSuffix(automaton)));\n    \n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getStates())\n      allTransitions[state.getNumber()] = state.getSortedTransitionArray(false);\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDestUTF8InUTF16Order);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDestUTF8InUTF16Order);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"780a676adba1080a3bb08ca427a08ff996227ecd","date":1285561731,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"705cdca081fbf23193d7ff6db22fedef9dd7c54f","date":1285601541,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0642d39c870c765418f1602c99bbdffc1019ae8b","date":1290101307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,TermsEnum,boolean,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     TermsEnum tenum,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(tenum);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = this.automaton.getSortedTransitions();\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  public AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(ByteRunAutomaton,String,IndexReader,boolean,BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Expert ctor:\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied reader.\n   * <p>\n   * @lucene.internal Use the public ctor instead. \n   * <p>\n   * @param runAutomaton pre-compiled ByteRunAutomaton\n   * @param finite true if the automaton accepts a finite language\n   */\n  AutomatonTermsEnum(ByteRunAutomaton runAutomaton,\n                     String field, IndexReader reader,\n                     boolean finite, BytesRef commonSuffixRef)\n      throws IOException {\n    super(reader, field);\n    this.automaton = runAutomaton.getAutomaton();\n    this.finite = finite;\n\n    this.runAutomaton = runAutomaton;\n    if (finite) {\n      // don't use suffix w/ finite DFAs\n      this.commonSuffixRef = null;\n    } else if (commonSuffixRef == null) {\n      // compute now\n      this.commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(automaton);\n    } else {\n      // precomputed\n      this.commonSuffixRef = commonSuffixRef;\n    }\n\n    // build a cache of sorted transitions for every state\n    allTransitions = new Transition[runAutomaton.getSize()][];\n    for (State state : this.automaton.getNumberedStates()) {\n      state.sortTransitions(Transition.CompareByMinMaxThenDest);\n      state.trimTransitionsArray();\n      allTransitions[state.getNumber()] = state.transitionsArray;\n    }\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    setUseTermsCache(finite);\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"705cdca081fbf23193d7ff6db22fedef9dd7c54f":["780a676adba1080a3bb08ca427a08ff996227ecd"],"08932c793647a36953d1816b1060121f48820d3f":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0642d39c870c765418f1602c99bbdffc1019ae8b":["705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"5f4e87790277826a2aea119328600dfb07761f32":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","08932c793647a36953d1816b1060121f48820d3f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["0642d39c870c765418f1602c99bbdffc1019ae8b"],"780a676adba1080a3bb08ca427a08ff996227ecd":["08932c793647a36953d1816b1060121f48820d3f"],"3bb13258feba31ab676502787ab2e1779f129b7a":["705cdca081fbf23193d7ff6db22fedef9dd7c54f","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"705cdca081fbf23193d7ff6db22fedef9dd7c54f":["0642d39c870c765418f1602c99bbdffc1019ae8b","3bb13258feba31ab676502787ab2e1779f129b7a"],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","780a676adba1080a3bb08ca427a08ff996227ecd"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"0642d39c870c765418f1602c99bbdffc1019ae8b":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"780a676adba1080a3bb08ca427a08ff996227ecd":["705cdca081fbf23193d7ff6db22fedef9dd7c54f"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}