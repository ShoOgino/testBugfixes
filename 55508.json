{"path":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","commits":[{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues, true);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType, true);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues, true);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType, true);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ada808d1fd6b1afb13af55a1dee4c15527af578","date":1337156389,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues, true);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType, true);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MutableFieldInfos#addOrUpdateInternal(String,int,boolean,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":null,"sourceOld":"  synchronized private FieldInfo addOrUpdateInternal(String name, int preferredFieldNumber, boolean isIndexed,\n      boolean storeTermVector,\n      boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normType) {\n    if (globalFieldNumbers == null) {\n      throw new IllegalStateException(\"FieldInfos are read-only, create a new instance with a global field map to make modifications to FieldInfos\");\n    }\n    FieldInfo fi = fieldInfo(name);\n    if (fi == null) {\n      final int fieldNumber = nextFieldNumber(name, preferredFieldNumber);\n      fi = addInternal(name, fieldNumber, isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions, docValues, normType);\n    } else {\n      fi.update(isIndexed, storeTermVector, omitNorms, storePayloads, indexOptions);\n      if (docValues != null) {\n        fi.setDocValuesType(docValues);\n      }\n      if (normType != null) {\n        fi.setNormValueType(normType);\n      }\n    }\n    version++;\n    return fi;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"a851824c09818632c94eba41e60ef5e72e323c8e":["2ada808d1fd6b1afb13af55a1dee4c15527af578"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ada808d1fd6b1afb13af55a1dee4c15527af578":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a851824c09818632c94eba41e60ef5e72e323c8e":[],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["2ada808d1fd6b1afb13af55a1dee4c15527af578"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a851824c09818632c94eba41e60ef5e72e323c8e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}