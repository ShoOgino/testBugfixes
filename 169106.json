{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#matchesStatusFilter(Map[String,Object],Set[String]).mjava","commits":[{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#matchesStatusFilter(Map[String,Object],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.PageOfCollections#matchesStatusFilter(Map[String,Object],Set[String]).mjava","sourceNew":"    /**\n     * Walk the collection state JSON object to see if it has any replicas that match\n     * the state the user is filtering by.\n     */\n    @SuppressWarnings(\"unchecked\")\n    final boolean matchesStatusFilter(Map<String, Object> collectionState, Set<String> liveNodes) {\n\n      if (filterType != FilterType.status || filter == null || filter.length() == 0)\n        return true; // no status filter, so all match\n\n      boolean isHealthy = true; // means all replicas for all shards active\n      boolean hasDownedShard = false; // means one or more shards is down\n      boolean replicaInRecovery = false;\n\n      Map<String, Object> shards = (Map<String, Object>) collectionState.get(\"shards\");\n      for (String shardId : shards.keySet()) {\n        boolean hasActive = false;\n        Map<String, Object> shard = (Map<String, Object>) shards.get(shardId);\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        for (String replicaId : replicas.keySet()) {\n          Map<String, Object> replicaState = (Map<String, Object>) replicas.get(replicaId);\n          Replica.State coreState = Replica.State.getState((String) replicaState.get(ZkStateReader.STATE_PROP));\n          String nodeName = (String) replicaState.get(\"node_name\");\n\n          // state can lie to you if the node is offline, so need to reconcile with live_nodes too\n          if (!liveNodes.contains(nodeName))\n            coreState = Replica.State.DOWN; // not on a live node, so must be down\n\n          if (coreState == Replica.State.ACTIVE) {\n            hasActive = true; // assumed no replicas active and found one that is for this shard\n          } else {\n            if (coreState == Replica.State.RECOVERING) {\n              replicaInRecovery = true;\n            }\n            isHealthy = false; // assumed healthy and found one replica that is not\n          }\n        }\n\n        if (!hasActive)\n          hasDownedShard = true; // this is bad\n      }\n\n      if (\"healthy\".equals(filter)) {\n        return isHealthy;\n      } else if (\"degraded\".equals(filter)) {\n        return !hasDownedShard && !isHealthy; // means no shards offline but not 100% healthy either\n      } else if (\"downed_shard\".equals(filter)) {\n        return hasDownedShard;\n      } else if (Replica.State.getState(filter) == Replica.State.RECOVERING) {\n        return !isHealthy && replicaInRecovery;\n      }\n\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Walk the collection state JSON object to see if it has any replicas that match\n     * the state the user is filtering by. \n     */\n    @SuppressWarnings(\"unchecked\")\n    final boolean matchesStatusFilter(Map<String,Object> collectionState, Set<String> liveNodes) {\n      \n      if (filterType != FilterType.status || filter == null || filter.length() == 0)\n        return true; // no status filter, so all match\n      \n      boolean isHealthy = true; // means all replicas for all shards active\n      boolean hasDownedShard = false; // means one or more shards is down\n      boolean replicaInRecovery = false;\n      \n      Map<String,Object> shards = (Map<String,Object>)collectionState.get(\"shards\");\n      for (String shardId : shards.keySet()) {\n        boolean hasActive = false;\n        Map<String,Object> shard = (Map<String,Object>)shards.get(shardId);\n        Map<String,Object> replicas = (Map<String,Object>)shard.get(\"replicas\");\n        for (String replicaId : replicas.keySet()) {\n          Map<String,Object> replicaState = (Map<String,Object>)replicas.get(replicaId);\n          Replica.State coreState = Replica.State.getState((String)replicaState.get(ZkStateReader.STATE_PROP));\n          String nodeName = (String)replicaState.get(\"node_name\");\n          \n          // state can lie to you if the node is offline, so need to reconcile with live_nodes too\n          if (!liveNodes.contains(nodeName))\n            coreState = Replica.State.DOWN; // not on a live node, so must be down\n          \n          if (coreState == Replica.State.ACTIVE) {\n            hasActive = true; // assumed no replicas active and found one that is for this shard\n          } else {\n            if (coreState == Replica.State.RECOVERING) {\n              replicaInRecovery = true;\n            }\n            isHealthy = false; // assumed healthy and found one replica that is not\n          }          \n        }\n        \n        if (!hasActive)\n          hasDownedShard = true; // this is bad\n      }\n      \n      if (\"healthy\".equals(filter)) {\n        return isHealthy;\n      } else if (\"degraded\".equals(filter)) {\n        return !hasDownedShard && !isHealthy; // means no shards offline but not 100% healthy either\n      } else if (\"downed_shard\".equals(filter)) {\n        return hasDownedShard;\n      } else if (Replica.State.getState(filter) == Replica.State.RECOVERING) {\n        return !isHealthy && replicaInRecovery;\n      }\n      \n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#matchesStatusFilter(Map[String,Object],Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.PageOfCollections#matchesStatusFilter(Map[String,Object],Set[String]).mjava","sourceNew":"    /**\n     * Walk the collection state JSON object to see if it has any replicas that match\n     * the state the user is filtering by.\n     */\n    @SuppressWarnings(\"unchecked\")\n    final boolean matchesStatusFilter(Map<String, Object> collectionState, Set<String> liveNodes) {\n\n      if (filterType != FilterType.status || filter == null || filter.length() == 0)\n        return true; // no status filter, so all match\n\n      boolean isHealthy = true; // means all replicas for all shards active\n      boolean hasDownedShard = false; // means one or more shards is down\n      boolean replicaInRecovery = false;\n\n      Map<String, Object> shards = (Map<String, Object>) collectionState.get(\"shards\");\n      for (Object o : shards.values()) {\n        boolean hasActive = false;\n        Map<String, Object> shard = (Map<String, Object>) o;\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        for (Object value : replicas.values()) {\n          Map<String, Object> replicaState = (Map<String, Object>) value;\n          Replica.State coreState = Replica.State.getState((String) replicaState.get(ZkStateReader.STATE_PROP));\n          String nodeName = (String) replicaState.get(\"node_name\");\n\n          // state can lie to you if the node is offline, so need to reconcile with live_nodes too\n          if (!liveNodes.contains(nodeName))\n            coreState = Replica.State.DOWN; // not on a live node, so must be down\n\n          if (coreState == Replica.State.ACTIVE) {\n            hasActive = true; // assumed no replicas active and found one that is for this shard\n          } else {\n            if (coreState == Replica.State.RECOVERING) {\n              replicaInRecovery = true;\n            }\n            isHealthy = false; // assumed healthy and found one replica that is not\n          }\n        }\n\n        if (!hasActive)\n          hasDownedShard = true; // this is bad\n      }\n\n      if (\"healthy\".equals(filter)) {\n        return isHealthy;\n      } else if (\"degraded\".equals(filter)) {\n        return !hasDownedShard && !isHealthy; // means no shards offline but not 100% healthy either\n      } else if (\"downed_shard\".equals(filter)) {\n        return hasDownedShard;\n      } else if (Replica.State.getState(filter) == Replica.State.RECOVERING) {\n        return !isHealthy && replicaInRecovery;\n      }\n\n      return true;\n    }\n\n","sourceOld":"    /**\n     * Walk the collection state JSON object to see if it has any replicas that match\n     * the state the user is filtering by.\n     */\n    @SuppressWarnings(\"unchecked\")\n    final boolean matchesStatusFilter(Map<String, Object> collectionState, Set<String> liveNodes) {\n\n      if (filterType != FilterType.status || filter == null || filter.length() == 0)\n        return true; // no status filter, so all match\n\n      boolean isHealthy = true; // means all replicas for all shards active\n      boolean hasDownedShard = false; // means one or more shards is down\n      boolean replicaInRecovery = false;\n\n      Map<String, Object> shards = (Map<String, Object>) collectionState.get(\"shards\");\n      for (String shardId : shards.keySet()) {\n        boolean hasActive = false;\n        Map<String, Object> shard = (Map<String, Object>) shards.get(shardId);\n        Map<String, Object> replicas = (Map<String, Object>) shard.get(\"replicas\");\n        for (String replicaId : replicas.keySet()) {\n          Map<String, Object> replicaState = (Map<String, Object>) replicas.get(replicaId);\n          Replica.State coreState = Replica.State.getState((String) replicaState.get(ZkStateReader.STATE_PROP));\n          String nodeName = (String) replicaState.get(\"node_name\");\n\n          // state can lie to you if the node is offline, so need to reconcile with live_nodes too\n          if (!liveNodes.contains(nodeName))\n            coreState = Replica.State.DOWN; // not on a live node, so must be down\n\n          if (coreState == Replica.State.ACTIVE) {\n            hasActive = true; // assumed no replicas active and found one that is for this shard\n          } else {\n            if (coreState == Replica.State.RECOVERING) {\n              replicaInRecovery = true;\n            }\n            isHealthy = false; // assumed healthy and found one replica that is not\n          }\n        }\n\n        if (!hasActive)\n          hasDownedShard = true; // this is bad\n      }\n\n      if (\"healthy\".equals(filter)) {\n        return isHealthy;\n      } else if (\"degraded\".equals(filter)) {\n        return !hasDownedShard && !isHealthy; // means no shards offline but not 100% healthy either\n      } else if (\"downed_shard\".equals(filter)) {\n        return hasDownedShard;\n      } else if (Replica.State.getState(filter) == Replica.State.RECOVERING) {\n        return !isHealthy && replicaInRecovery;\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}