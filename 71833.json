{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getCanonicalName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getCanonicalName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getCanonicalName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getCanonicalName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","sourceNew":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","sourceOld":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getCanonicalName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getCanonicalName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","bugFix":["a03034a121f635bebacef74693404e3273b614a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/store/rest/TestModelManagerPersistence#testWrapperModelPersistence().mjava","sourceNew":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","sourceOld":"  @Test\n  public void testWrapperModelPersistence() throws Exception {\n    final String modelName = \"linear\";\n    final String FS_NAME = \"testWrapper\";\n\n    // check whether models and features are empty\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // setup features\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), FS_NAME, \"{\\\"value\\\":5}\");\n\n    // setup base model\n    String baseModelJson = getModelInJson(modelName, LinearModel.class.getCanonicalName(),\n                                          new String[] {\"popularity\", \"const\"}, FS_NAME,\n                                          \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    File baseModelFile = new File(tmpConfDir, \"baseModelForPersistence.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n\n    // setup wrapper model\n    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getCanonicalName(),\n                                             new String[0], FS_NAME,\n                                             \"{\\\"resource\\\":\\\"\" + baseModelFile.getName() + \"\\\"}\");\n    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, \"/responseHeader/status==0\");\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after reload\n    restTestHarness.reload();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // check persistence after restart\n    jetty.stop();\n    jetty.start();\n    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());\n\n    // delete test settings\n    restTestHarness.delete(ManagedModelStore.REST_END_POINT + \"/\" + modelName);\n    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME);\n    assertJQ(ManagedModelStore.REST_END_POINT,\n             \"/models/==[]\");\n    assertJQ(ManagedFeatureStore.REST_END_POINT + \"/\" + FS_NAME,\n             \"/features/==[]\");\n\n    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["1aad05eeff7818b0833c02ac6b743aa72054963b","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","3f906c3206e7eb174774f938416460e39170d819"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}