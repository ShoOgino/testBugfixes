{"path":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      if (!termEnum.next()) {\n        fail(\"Should not have run out of terms.\");\n      }\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}