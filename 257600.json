{"path":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeNoDecay().mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeNoDecay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeNoDecay() {\n\n    ConcurrentLFUCache<Integer, String> cacheNoDecay = new ConcurrentLFUCache<Integer, String>(10, 9,\n        (int) Math.floor((9 + 10) / 2), (int) Math.ceil(0.75 * 10), false, false, null, false);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheNoDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsNoDecay;\n\n      //11-20 now in cache.\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsNoDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 10; ++jdx) {\n          cacheNoDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts but that shouldn't matter since timeDecay=false\n      cacheNoDecay.put(22, \"22\");\n      cacheNoDecay.put(23, \"23\");\n      cacheNoDecay.put(24, \"24\");\n      cacheNoDecay.put(25, \"25\");\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int idx = 15; idx < 25; ++idx) {\n        assertNotNull(itemsNoDecay.get(15));\n      }\n    } finally {\n      cacheNoDecay.destroy();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeNoDecay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeNoDecay().mjava","sourceNew":"  @Test\n  public void testTimeNoDecay() {\n\n    ConcurrentLFUCache<Integer, String> cacheNoDecay = new ConcurrentLFUCache<>(10, 9,\n        (int) Math.floor((9 + 10) / 2), (int) Math.ceil(0.75 * 10), false, false, null, false);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheNoDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsNoDecay;\n\n      //11-20 now in cache.\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsNoDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 10; ++jdx) {\n          cacheNoDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts but that shouldn't matter since timeDecay=false\n      cacheNoDecay.put(22, \"22\");\n      cacheNoDecay.put(23, \"23\");\n      cacheNoDecay.put(24, \"24\");\n      cacheNoDecay.put(25, \"25\");\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int idx = 15; idx < 25; ++idx) {\n        assertNotNull(itemsNoDecay.get(15));\n      }\n    } finally {\n      cacheNoDecay.destroy();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTimeNoDecay() {\n\n    ConcurrentLFUCache<Integer, String> cacheNoDecay = new ConcurrentLFUCache<Integer, String>(10, 9,\n        (int) Math.floor((9 + 10) / 2), (int) Math.ceil(0.75 * 10), false, false, null, false);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheNoDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsNoDecay;\n\n      //11-20 now in cache.\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsNoDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 10; ++jdx) {\n          cacheNoDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts but that shouldn't matter since timeDecay=false\n      cacheNoDecay.put(22, \"22\");\n      cacheNoDecay.put(23, \"23\");\n      cacheNoDecay.put(24, \"24\");\n      cacheNoDecay.put(25, \"25\");\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int idx = 15; idx < 25; ++idx) {\n        assertNotNull(itemsNoDecay.get(15));\n      }\n    } finally {\n      cacheNoDecay.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestLFUCache#testTimeNoDecay().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTimeNoDecay() {\n\n    ConcurrentLFUCache<Integer, String> cacheNoDecay = new ConcurrentLFUCache<>(10, 9,\n        (int) Math.floor((9 + 10) / 2), (int) Math.ceil(0.75 * 10), false, false, null, false);\n    try {\n      for (int i = 1; i < 21; i++) {\n        cacheNoDecay.put(i, Integer.toString(i));\n      }\n      Map<Integer, String> itemsNoDecay;\n\n      //11-20 now in cache.\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int i = 11; i < 21; ++i) {\n        assertNotNull(itemsNoDecay.get(i));\n      }\n\n      // Now increase the freq count for 5 items\n      for (int i = 0; i < 5; ++i) {\n        for (int jdx = 0; jdx < 10; ++jdx) {\n          cacheNoDecay.get(i + 13);\n        }\n      }\n      // OK, 13 - 17 should have larger counts but that shouldn't matter since timeDecay=false\n      cacheNoDecay.put(22, \"22\");\n      cacheNoDecay.put(23, \"23\");\n      cacheNoDecay.put(24, \"24\");\n      cacheNoDecay.put(25, \"25\");\n      itemsNoDecay = cacheNoDecay.getMostUsedItems(10);\n      for (int idx = 15; idx < 25; ++idx) {\n        assertNotNull(itemsNoDecay.get(15));\n      }\n    } finally {\n      cacheNoDecay.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"4d7d3943904804560937e6239effeebda0f920e4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}