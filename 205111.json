{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n\t\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguilemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"francoi\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habitabl\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"element\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïaöuaä\",\n\t\t\t\t\"anticonstitutionel\",\n\t\t\t\t\"java\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","sourceOld":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n\t\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguilemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"francoi\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habitabl\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"element\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïaöuaä\",\n\t\t\t\t\"anticonstitutionel\",\n\t\t\t\t\"java\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","sourceOld":"\tpublic void testAnalyzer() throws Exception {\n\t\tFrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n\t\n\t\tassertAnalyzesTo(fa, \"\", new String[] {\n\t\t});\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien chat cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"chien CHAT CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"  chien  ,? + = -  CHAT /: > CHEVAL\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\tassertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"mot \\\"entreguillemet\\\"\",\n\t\t\tnew String[] { \"mot\", \"entreguilemet\" });\n\n\t\t// let's do some french specific tests now\t\n\n\t\t/* 1. couldn't resist\n\t\t I would expect this to stay one term as in French the minus \n\t\tsign is often used for composing words */\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"Jean-François\",\n\t\t\tnew String[] { \"jean\", \"francoi\" });\n\n\t\t// 2. stopwords\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"le la chien les aux chat du des à cheval\",\n\t\t\tnew String[] { \"chien\", \"chat\", \"cheval\" });\n\n\t\t// some nouns and adjectives\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"lances chismes habitable chiste éléments captifs\",\n\t\t\tnew String[] {\n\t\t\t\t\"lanc\",\n\t\t\t\t\"chism\",\n\t\t\t\t\"habitabl\",\n\t\t\t\t\"chist\",\n\t\t\t\t\"element\",\n\t\t\t\t\"captif\" });\n\n\t\t// some verbs\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"finissions souffrirent rugissante\",\n\t\t\tnew String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n\t\t// some everything else\n\t\t// aujourd'hui stays one term which is OK\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n\t\t\tnew String[] {\n\t\t\t\t\"c3po\",\n\t\t\t\t\"aujourd'hui\",\n\t\t\t\t\"oeuf\",\n\t\t\t\t\"ïaöuaä\",\n\t\t\t\t\"anticonstitutionel\",\n\t\t\t\t\"java\" });\n\n\t\t// some more everything else\n\t\t// here 1940-1945 stays as one term, 1940:1945 not ?\n\t\tassertAnalyzesTo(\n\t\t\tfa,\n\t\t\t\"33Bis 1940-1945 1940:1945 (---i+++)*\",\n\t\t\tnew String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer(TEST_VERSION_CURRENT);\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n    fa.close();\n  }\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer#testAnalyzer().mjava","sourceNew":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n    fa.close();\n  }\n\n","sourceOld":"  public void testAnalyzer() throws Exception {\n    FrenchAnalyzer fa = new FrenchAnalyzer();\n  \n    assertAnalyzesTo(fa, \"\", new String[] {\n    });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien chat cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"chien CHAT CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"  chien  ,? + = -  CHAT /: > CHEVAL\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    assertAnalyzesTo(fa, \"chien++\", new String[] { \"chien\" });\n\n    assertAnalyzesTo(\n      fa,\n      \"mot \\\"entreguillemet\\\"\",\n      new String[] { \"mot\", \"entreguilemet\" });\n\n     // let's do some french specific tests now   \n          /* 1. couldn't resist\n      I would expect this to stay one term as in French the minus \n    sign is often used for composing words */\n    assertAnalyzesTo(\n      fa,\n      \"Jean-François\",\n      new String[] { \"jean\", \"francoi\" });\n\n    // 2. stopwords\n    assertAnalyzesTo(\n      fa,\n      \"le la chien les aux chat du des à cheval\",\n      new String[] { \"chien\", \"chat\", \"cheval\" });\n\n    // some nouns and adjectives\n    assertAnalyzesTo(\n      fa,\n      \"lances chismes habitable chiste éléments captifs\",\n      new String[] {\n        \"lanc\",\n        \"chism\",\n        \"habitabl\",\n        \"chist\",\n        \"element\",\n        \"captif\" });\n\n    // some verbs\n    assertAnalyzesTo(\n      fa,\n      \"finissions souffrirent rugissante\",\n      new String[] { \"finision\", \"soufrirent\", \"rugisant\" });\n\n    // some everything else\n    // aujourd'hui stays one term which is OK\n    assertAnalyzesTo(\n      fa,\n      \"C3PO aujourd'hui oeuf ïâöûàä anticonstitutionnellement Java++ \",\n      new String[] {\n        \"c3po\",\n        \"aujourd'hui\",\n        \"oeuf\",\n        \"ïaöuaä\",\n        \"anticonstitutionel\",\n        \"java\" });\n\n    // some more everything else\n    // here 1940-1945 stays as one term, 1940:1945 not ?\n    assertAnalyzesTo(\n      fa,\n      \"33Bis 1940-1945 1940:1945 (---i+++)*\",\n      new String[] { \"33bi\", \"1940\", \"1945\", \"1940\", \"1945\", \"i\" });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}