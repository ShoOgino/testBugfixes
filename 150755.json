{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c2635332d49f7c5a0b484950462a01775512628e","date":1331332806,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    \n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f33a9f9d57985c031534cce17b9443ff99ee3e5","date":1331546215,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tint\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    \n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5","date":1331546992,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tint\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<?> c = schema.getResourceLoader().findClass(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      // TODO: Are we using correct classloader?\n      Class<?> c = Class.forName(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<?> c = schema.getResourceLoader().findClass(exchangeRateProviderClass);\n      Object clazz = c.newInstance();\n      if (clazz instanceof ExchangeRateProvider) {\n        provider = (ExchangeRateProvider) clazz;\n        provider.init(args);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"exchangeRateProvider \"+exchangeRateProviderClass+\" needs to implement ExchangeRateProvider\");\n      }\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba","date":1347404545,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff","date":1362189123,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exhange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instansiating exhange rate provider \"+exchangeRateProviderClass+\". Please check your FieldType configuration\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f89666b1fd39d54fa5b9447165fc6e59cbe6bddf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12dafe10e13e4a09ad16f617b6c5013460fd7c58","date":1362255003,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exhange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (java.util.Currency.getInstance(this.defaultCurrency) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid currency code \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exhange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":["c2635332d49f7c5a0b484950462a01775512628e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f89666b1fd39d54fa5b9447165fc6e59cbe6bddf","date":1380961429,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exhange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":["e5500c5115c2ccc55ff23f7f96adcb1857cd4bff"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<String,String>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    \n    // Fail if amountLongSuffix or codeStrSuffix are specified\n    List<String> unknownParams = new ArrayList<>();\n    fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n    if (fieldSuffixAmountRaw != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_AMOUNT_RAW); \n    }\n    fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n    if (fieldSuffixCurrency != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_CURRENCY);\n    }\n    if ( ! unknownParams.isEmpty()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unknown parameter(s): \" + unknownParams);\n    }\n    \n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    } else {\n      args.remove(PARAM_PRECISION_STEP);\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(FIELD_TYPE_AMOUNT_RAW);\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    fieldSuffixAmountRaw = FIELD_SUFFIX_AMOUNT_RAW;\n\n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(FIELD_TYPE_CURRENCY);\n    fieldTypeCurrency.init(schema, Collections.emptyMap());\n    fieldSuffixCurrency = FIELD_SUFFIX_CURRENCY;\n\n    super.init(schema, args); // Must be called last so that field types are not doubly created\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    \n    // Fail if amountLongSuffix or codeStrSuffix are specified\n    List<String> unknownParams = new ArrayList<>();\n    fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n    if (fieldSuffixAmountRaw != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_AMOUNT_RAW); \n    }\n    fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n    if (fieldSuffixCurrency != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_CURRENCY);\n    }\n    if ( ! unknownParams.isEmpty()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unknown parameter(s): \" + unknownParams);\n    }\n    \n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    } else {\n      args.remove(PARAM_PRECISION_STEP);\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(FIELD_TYPE_AMOUNT_RAW);\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    fieldSuffixAmountRaw = FIELD_SUFFIX_AMOUNT_RAW;\n\n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(FIELD_TYPE_CURRENCY);\n    fieldTypeCurrency.init(schema, Collections.emptyMap());\n    fieldSuffixCurrency = FIELD_SUFFIX_CURRENCY;\n\n    super.init(schema, args); // Must be called last so that field types are not doubly created\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    \n    // Fail if amountLongSuffix or codeStrSuffix are specified\n    List<String> unknownParams = new ArrayList<>();\n    fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n    if (fieldSuffixAmountRaw != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_AMOUNT_RAW); \n    }\n    fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n    if (fieldSuffixCurrency != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_CURRENCY);\n    }\n    if ( ! unknownParams.isEmpty()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unknown parameter(s): \" + unknownParams);\n    }\n    \n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    } else {\n      args.remove(PARAM_PRECISION_STEP);\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(FIELD_TYPE_AMOUNT_RAW);\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    fieldSuffixAmountRaw = FIELD_SUFFIX_AMOUNT_RAW;\n\n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(FIELD_TYPE_CURRENCY);\n    fieldTypeCurrency.init(schema, Collections.emptyMap());\n    fieldSuffixCurrency = FIELD_SUFFIX_CURRENCY;\n\n    super.init(schema, args); // Must be called last so that field types are not doubly created\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) { \n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \n                              \"CurrencyField types can not be multiValued: \" + \n                              this.typeName);\n    }\n    this.schema = schema;\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    }\n    \n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    }\n\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(\"amount_raw_type_tlong\");\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    \n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(\"currency_type_string\");\n    fieldTypeCurrency.init(schema, new HashMap<String,String>());\n    \n    args.remove(PARAM_RATE_PROVIDER_CLASS);\n    args.remove(PARAM_DEFAULT_CURRENCY);\n    args.remove(PARAM_PRECISION_STEP);\n\n    try {\n      Class<? extends ExchangeRateProvider> c = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Error instantiating exchange rate provider \"+exchangeRateProviderClass+\": \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    \n    // Fail if amountLongSuffix or codeStrSuffix are specified\n    List<String> unknownParams = new ArrayList<>();\n    fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n    if (fieldSuffixAmountRaw != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_AMOUNT_RAW); \n    }\n    fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n    if (fieldSuffixCurrency != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_CURRENCY);\n    }\n    if ( ! unknownParams.isEmpty()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unknown parameter(s): \" + unknownParams);\n    }\n    \n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    } else {\n      args.remove(PARAM_PRECISION_STEP);\n    }\n\n    // NOTE: because we're not using the PluginLoader to register these field types, they aren't \"real\"\n    // field types and never get Schema default properties (based on schema.xml's version attribute)\n    // so only the properties explicitly set here (or on the SchemaField's we create from them) are used.\n    //\n    // In theory we should fix this, but since this class is already deprecated, we'll leave it alone\n    // to simplify the risk of back-compat break for existing users.\n    \n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(FIELD_TYPE_AMOUNT_RAW);\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    fieldSuffixAmountRaw = FIELD_SUFFIX_AMOUNT_RAW;\n\n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(FIELD_TYPE_CURRENCY);\n    fieldTypeCurrency.init(schema, Collections.emptyMap());\n    fieldSuffixCurrency = FIELD_SUFFIX_CURRENCY;\n\n    super.init(schema, args); // Must be called last so that field types are not doubly created\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    \n    // Fail if amountLongSuffix or codeStrSuffix are specified\n    List<String> unknownParams = new ArrayList<>();\n    fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n    if (fieldSuffixAmountRaw != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_AMOUNT_RAW); \n    }\n    fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n    if (fieldSuffixCurrency != null) {\n      unknownParams.add(PARAM_FIELD_SUFFIX_CURRENCY);\n    }\n    if ( ! unknownParams.isEmpty()) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unknown parameter(s): \" + unknownParams);\n    }\n    \n    String precisionStepString = args.get(PARAM_PRECISION_STEP);\n    if (precisionStepString == null) {\n      precisionStepString = DEFAULT_PRECISION_STEP;\n    } else {\n      args.remove(PARAM_PRECISION_STEP);\n    }\n\n    // Initialize field type for amount\n    fieldTypeAmountRaw = new TrieLongField();\n    fieldTypeAmountRaw.setTypeName(FIELD_TYPE_AMOUNT_RAW);\n    Map<String,String> map = new HashMap<>(1);\n    map.put(\"precisionStep\", precisionStepString);\n    fieldTypeAmountRaw.init(schema, map);\n    fieldSuffixAmountRaw = FIELD_SUFFIX_AMOUNT_RAW;\n\n    // Initialize field type for currency string\n    fieldTypeCurrency = new StrField();\n    fieldTypeCurrency.setTypeName(FIELD_TYPE_CURRENCY);\n    fieldTypeCurrency.init(schema, Collections.emptyMap());\n    fieldSuffixCurrency = FIELD_SUFFIX_CURRENCY;\n\n    super.init(schema, args); // Must be called last so that field types are not doubly created\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f89666b1fd39d54fa5b9447165fc6e59cbe6bddf"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["e5500c5115c2ccc55ff23f7f96adcb1857cd4bff"],"f89666b1fd39d54fa5b9447165fc6e59cbe6bddf":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","f107636c2cc82350a2607d774c092da5b73152e5"],"f107636c2cc82350a2607d774c092da5b73152e5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5":["6f33a9f9d57985c031534cce17b9443ff99ee3e5"],"6f33a9f9d57985c031534cce17b9443ff99ee3e5":["c2635332d49f7c5a0b484950462a01775512628e"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"c2635332d49f7c5a0b484950462a01775512628e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["f89666b1fd39d54fa5b9447165fc6e59cbe6bddf"],"f89666b1fd39d54fa5b9447165fc6e59cbe6bddf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5":["38e3b736c7ca086d61b7dbb841c905ee115490da","7a62481aacca928b5c069e6f825ef49c7b6586d8"],"6f33a9f9d57985c031534cce17b9443ff99ee3e5":["01ca3c19d12760b1e70c4a4a86e54a240f6dd4b5"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","c2635332d49f7c5a0b484950462a01775512628e"],"c2635332d49f7c5a0b484950462a01775512628e":["6f33a9f9d57985c031534cce17b9443ff99ee3e5"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["4caa441bee6bff2e56042e9ad2c8ffc6b2729cba"],"e5500c5115c2ccc55ff23f7f96adcb1857cd4bff":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"4caa441bee6bff2e56042e9ad2c8ffc6b2729cba":["e5500c5115c2ccc55ff23f7f96adcb1857cd4bff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}