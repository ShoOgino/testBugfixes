{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","pathOld":"/dev/null","sourceNew":"    public static Report fromMap(Map<?, ?> map) {\n      String groupPattern = (String)map.get(\"group\");\n      String labelPattern = (String)map.get(\"label\");\n      String registryPattern = (String)map.get(\"registry\");\n      Object oFilters = map.get(\"filter\");\n      Collection<String> metricFilters = Collections.emptyList();\n      if (oFilters != null) {\n        if (oFilters instanceof String) {\n          metricFilters = Collections.singletonList((String)oFilters);\n        } else if (oFilters instanceof Collection) {\n          metricFilters = (Collection<String>)oFilters;\n        } else {\n          log.warn(\"Invalid report filters, ignoring: \" + oFilters);\n        }\n      }\n      if (groupPattern == null || registryPattern == null) {\n        log.warn(\"Invalid report configuration, group and registry required!: \" + map);\n        return null;\n      }\n      return new Report(groupPattern, labelPattern, registryPattern, metricFilters);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","sourceNew":"    public static Report fromMap(Map<?, ?> map) {\n      String groupPattern = (String)map.get(\"group\");\n      String labelPattern = (String)map.get(\"label\");\n      String registryPattern = (String)map.get(\"registry\");\n      Object oFilters = map.get(\"filter\");\n      Collection<String> metricFilters = Collections.emptyList();\n      if (oFilters != null) {\n        if (oFilters instanceof String) {\n          metricFilters = Collections.singletonList((String)oFilters);\n        } else if (oFilters instanceof Collection) {\n          metricFilters = (Collection<String>)oFilters;\n        } else {\n          log.warn(\"Invalid report filters, ignoring: {}\", oFilters);\n        }\n      }\n      if (groupPattern == null || registryPattern == null) {\n        log.warn(\"Invalid report configuration, group and registry required!: {}\", map);\n        return null;\n      }\n      return new Report(groupPattern, labelPattern, registryPattern, metricFilters);\n    }\n\n","sourceOld":"    public static Report fromMap(Map<?, ?> map) {\n      String groupPattern = (String)map.get(\"group\");\n      String labelPattern = (String)map.get(\"label\");\n      String registryPattern = (String)map.get(\"registry\");\n      Object oFilters = map.get(\"filter\");\n      Collection<String> metricFilters = Collections.emptyList();\n      if (oFilters != null) {\n        if (oFilters instanceof String) {\n          metricFilters = Collections.singletonList((String)oFilters);\n        } else if (oFilters instanceof Collection) {\n          metricFilters = (Collection<String>)oFilters;\n        } else {\n          log.warn(\"Invalid report filters, ignoring: \" + oFilters);\n        }\n      }\n      if (groupPattern == null || registryPattern == null) {\n        log.warn(\"Invalid report configuration, group and registry required!: \" + map);\n        return null;\n      }\n      return new Report(groupPattern, labelPattern, registryPattern, metricFilters);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter.Report#fromMap(Map[#,#]).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    public static Report fromMap(Map<?, ?> map) {\n      String groupPattern = (String)map.get(\"group\");\n      String labelPattern = (String)map.get(\"label\");\n      String registryPattern = (String)map.get(\"registry\");\n      Object oFilters = map.get(\"filter\");\n      Collection<String> metricFilters = Collections.emptyList();\n      if (oFilters != null) {\n        if (oFilters instanceof String) {\n          metricFilters = Collections.singletonList((String)oFilters);\n        } else if (oFilters instanceof Collection) {\n          metricFilters = (Collection<String>)oFilters;\n        } else {\n          log.warn(\"Invalid report filters, ignoring: {}\", oFilters);\n        }\n      }\n      if (groupPattern == null || registryPattern == null) {\n        log.warn(\"Invalid report configuration, group and registry required!: {}\", map);\n        return null;\n      }\n      return new Report(groupPattern, labelPattern, registryPattern, metricFilters);\n    }\n\n","sourceOld":"    public static Report fromMap(Map<?, ?> map) {\n      String groupPattern = (String)map.get(\"group\");\n      String labelPattern = (String)map.get(\"label\");\n      String registryPattern = (String)map.get(\"registry\");\n      Object oFilters = map.get(\"filter\");\n      Collection<String> metricFilters = Collections.emptyList();\n      if (oFilters != null) {\n        if (oFilters instanceof String) {\n          metricFilters = Collections.singletonList((String)oFilters);\n        } else if (oFilters instanceof Collection) {\n          metricFilters = (Collection<String>)oFilters;\n        } else {\n          log.warn(\"Invalid report filters, ignoring: {}\", oFilters);\n        }\n      }\n      if (groupPattern == null || registryPattern == null) {\n        log.warn(\"Invalid report configuration, group and registry required!: {}\", map);\n        return null;\n      }\n      return new Report(groupPattern, labelPattern, registryPattern, metricFilters);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"9df8125ba9193a2e2e285ed92157810b1952a244":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9df8125ba9193a2e2e285ed92157810b1952a244"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9df8125ba9193a2e2e285ed92157810b1952a244":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}