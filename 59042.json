{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrServer().query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrServer().query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    // use the distributed solrj client\n    if (solrj == null) {\n      synchronized(this) {\n        try {\n          CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());\n          server.setDefaultCollection(DEFAULT_COLLECTION);\n          solrj = server;\n        } catch (MalformedURLException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = solrj.query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrClient().query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrServer().query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException, IOException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrClient().query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrClient().query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#queryServer(ModifiableSolrParams).mjava","sourceNew":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException, IOException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrClient().query(params);\n    return rsp;\n  }\n\n","sourceOld":"  @Override\n  protected QueryResponse queryServer(ModifiableSolrParams params) throws SolrServerException {\n\n    if (r.nextBoolean())\n      return super.queryServer(params);\n\n    if (r.nextBoolean())\n      params.set(\"collection\",DEFAULT_COLLECTION);\n\n    QueryResponse rsp = getCommonCloudSolrClient().query(params);\n    return rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"c215736a9e29403edd2132d9f0829a287b428df4":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","c215736a9e29403edd2132d9f0829a287b428df4"],"bafca15d8e408346a67f4282ad1143b88023893b":["c215736a9e29403edd2132d9f0829a287b428df4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c215736a9e29403edd2132d9f0829a287b428df4","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}