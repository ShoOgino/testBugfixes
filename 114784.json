{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f69a077aa0edfe2a493dbd264bccf9b44af3d17c","date":1356330270,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/OrdinalMappingReaderTest#verifyResults(Directory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/FacetsPayloadProcessorProviderTest#verifyResults(Directory,Directory).mjava","sourceNew":null,"sourceOld":"  private void verifyResults(Directory dir, Directory taxDir) throws IOException {\n    DirectoryReader reader1 = DirectoryReader.open(dir);\n    DirectoryTaxonomyReader taxReader = new DirectoryTaxonomyReader(taxDir);\n    IndexSearcher searcher = newSearcher(reader1);\n    FacetSearchParams fsp = new FacetSearchParams();\n    fsp.addFacetRequest(new CountFacetRequest(new CategoryPath(\"tag\"), NUM_DOCS));\n    FacetsCollector collector = new FacetsCollector(fsp, reader1, taxReader);\n    searcher.search(new MatchAllDocsQuery(), collector);\n    FacetResult result = collector.getFacetResults().get(0);\n    FacetResultNode node = result.getFacetResultNode();\n    for (FacetResultNode facet: node.getSubResults()) {\n      int weight = (int)facet.getValue();\n      int label = Integer.parseInt(facet.getLabel().getComponent(1));\n      //System.out.println(label + \": \" + weight);\n      if (VERBOSE) {\n        System.out.println(label + \": \" + weight);\n      }\n      assertEquals(NUM_DOCS ,weight);\n    }\n    reader1.close();\n    taxReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f69a077aa0edfe2a493dbd264bccf9b44af3d17c"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f69a077aa0edfe2a493dbd264bccf9b44af3d17c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["f69a077aa0edfe2a493dbd264bccf9b44af3d17c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}