{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","commits":[{"id":"6cd656819156111d2111b919176c715576e96d03","date":1421222563,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00748ebfbde21e764e13026b3349323a4c4a76c6","date":1421240201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","sourceNew":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"p.q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"p.q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","sourceNew":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"p.q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"p.q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"p.q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(new ByteArrayInputStream(json.getBytes(\"UTF-8\")), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"p.q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrSchemalessExampleTest#testFieldMutating().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"p.q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"p.q\",\n        \"x_y\");\n    @SuppressWarnings({\"rawtypes\"})\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testFieldMutating() throws Exception {\n    HttpSolrClient client = (HttpSolrClient) getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    assertNumFound(\"*:*\", 0); // make sure it got in\n    // two docs, one with uniqueKey, another without it\n    String json = \"{\\\"name one\\\": \\\"name\\\"} \" +\n        \"{\\\"name  two\\\" : \\\"name\\\"}\" +\n        \"{\\\"first-second\\\" : \\\"name\\\"}\" +\n        \"{\\\"x+y\\\" : \\\"name\\\"}\" +\n        \"{\\\"p%q\\\" : \\\"name\\\"}\" +\n        \"{\\\"p.q\\\" : \\\"name\\\"}\" +\n        \"{\\\"a&b\\\" : \\\"name\\\"}\"\n        ;\n    HttpClient httpClient = client.getHttpClient();\n    HttpPost post = new HttpPost(client.getBaseURL() + \"/update/json/docs\");\n    post.setHeader(\"Content-Type\", \"application/json\");\n    post.setEntity(new InputStreamEntity(\n        new ByteArrayInputStream(json.getBytes(StandardCharsets.UTF_8)), -1));\n    HttpResponse response = httpClient.execute(post);\n    assertEquals(200, response.getStatusLine().getStatusCode());\n    client.commit();\n    List<String> expected = Arrays.asList(\n        \"name_one\",\n        \"name__two\",\n        \"first-second\",\n        \"a_b\",\n        \"p_q\",\n        \"p.q\",\n        \"x_y\");\n    HashSet set = new HashSet();\n    QueryResponse rsp = assertNumFound(\"*:*\", expected.size());\n    for (SolrDocument doc : rsp.getResults()) set.addAll(doc.getFieldNames());\n    for (String s : expected) {\n      assertTrue(s+\" not created \"+ rsp ,set.contains(s) );\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"6cd656819156111d2111b919176c715576e96d03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["00748ebfbde21e764e13026b3349323a4c4a76c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"00748ebfbde21e764e13026b3349323a4c4a76c6":["6cd656819156111d2111b919176c715576e96d03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6cd656819156111d2111b919176c715576e96d03":["00748ebfbde21e764e13026b3349323a4c4a76c6"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cd656819156111d2111b919176c715576e96d03"],"00748ebfbde21e764e13026b3349323a4c4a76c6":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}