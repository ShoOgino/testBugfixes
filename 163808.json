{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon#orient(double,double,double,double,double,double).mjava","commits":[{"id":"932ec0540b719f95130a329c7a43bfc02ca1c20f","date":1461025360,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#orient(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#orient(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#orient(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#orient(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#orient(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#orient(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a positive value if points a, b, and c are arranged in counter-clockwise order,\n   * negative value if clockwise, zero if collinear.\n   */\n  // see the \"Orient2D\" method described here:\n  // http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf\n  // https://www.cs.cmu.edu/~quake/robust.html\n  // Note that this one does not yet have the floating point tricks to be exact!\n  private static int orient(double ax, double ay, double bx, double by, double cx, double cy) {\n    double v1 = (bx - ax) * (cy - ay);\n    double v2 = (cx - ax) * (by - ay);\n    if (v1 > v2) {\n      return 1;\n    } else if (v1 < v2) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["0e15955b4980562a0c1c81d08654904f3fadb83b","925fce43f3bac029d912b9b7de03c789e258a333"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","932ec0540b719f95130a329c7a43bfc02ca1c20f"],"932ec0540b719f95130a329c7a43bfc02ca1c20f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["0e15955b4980562a0c1c81d08654904f3fadb83b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e15955b4980562a0c1c81d08654904f3fadb83b","932ec0540b719f95130a329c7a43bfc02ca1c20f"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"932ec0540b719f95130a329c7a43bfc02ca1c20f":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}