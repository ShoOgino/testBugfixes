{"path":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#getCodec().mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#getCodec().mjava","pathOld":"/dev/null","sourceNew":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#getCodec().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#getCodec().mjava","sourceNew":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60PointFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public PointFormat pointFormat() {\n          return new PointFormat() {\n            @Override\n            public PointWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60PointWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public PointReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60PointReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","sourceOld":"  private Codec getCodec() {\n    if (Codec.getDefault().getName().equals(\"Lucene60\")) {\n      int maxPointsInLeafNode = TestUtil.nextInt(random(), 50, 500);\n      double maxMBSortInHeap = 0.1 + (3*random().nextDouble());\n      if (VERBOSE) {\n        System.out.println(\"TEST: using Lucene60DimensionalFormat with maxPointsInLeafNode=\" + maxPointsInLeafNode + \" and maxMBSortInHeap=\" + maxMBSortInHeap);\n      }\n\n      return new FilterCodec(\"Lucene60\", Codec.getDefault()) {\n        @Override\n        public DimensionalFormat dimensionalFormat() {\n          return new DimensionalFormat() {\n            @Override\n            public DimensionalWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n              return new Lucene60DimensionalWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap);\n            }\n\n            @Override\n            public DimensionalReader fieldsReader(SegmentReadState readState) throws IOException {\n              return new Lucene60DimensionalReader(readState);\n            }\n          };\n        }\n      };\n    } else {\n      return Codec.getDefault();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}