{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","commits":[{"id":"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","date":1341327930,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        map.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"546049537cdccd28f8500e45543da67235f8e51b","date":1341426072,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        map.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Throwable e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0085a9ec29ebc27be992a3712f4bd5d65d2106","date":1450912573,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        // replicate the deleteByQuery logic.  See deleteByQuery for comments.\n\n        if (map != null) map.clear();\n        if (prevMap != null) prevMap.clear();\n        if (prevMap2 != null) prevMap2.clear();\n\n        try {\n          RefCounted<SolrIndexSearcher> holder = uhandler.core.openNewSearcher(true, true);\n          holder.decref();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error opening realtime searcher for deleteByQuery\", e);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion());\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1455c941cc4ce652efc776fc23471b0e499246f6","date":1528086751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.write(cmd);\n        return;\n      }\n\n      long pos = -1;\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        map.put(cmd.getIndexedId(), ptr);\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.write(cmd);\n        return;\n      }\n\n      long pos = -1;\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        map.put(cmd.getIndexedId(), ptr);\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.write(cmd);\n        return;\n      }\n\n      long pos = -1;\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        map.put(cmd.getIndexedId(), ptr);\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      long pos = -1;\n\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if ((cmd.getFlags() & UpdateCommand.REPLAY) == 0) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer, operationFlags);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        // only update our map if we're not buffering\n        if ((cmd.getFlags() & UpdateCommand.BUFFERING) == 0) {\n          map.put(cmd.getIndexedId(), ptr);\n        }\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#add(AddUpdateCommand,boolean).mjava","sourceNew":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.write(cmd);\n        return;\n      }\n\n      long pos = -1;\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        map.put(cmd.getIndexedId(), ptr);\n\n        if (trace) {\n          log.trace(\"TLOG: added id {} to {} {} map={}\", cmd.getPrintableId(), tlog, ptr, System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (log.isTraceEnabled()) {\n          log.trace(\"TLOG: added id {} to {} clearCaches=true\", cmd.getPrintableId(), tlog);\n        }\n      }\n\n    }\n  }\n\n","sourceOld":"  public void add(AddUpdateCommand cmd, boolean clearCaches) {\n    // don't log if we are replaying from another log\n    // TODO: we currently need to log to maintain correct versioning, rtg, etc\n    // if ((cmd.getFlags() & UpdateCommand.REPLAY) != 0) return;\n\n    synchronized (this) {\n      if ((cmd.getFlags() & UpdateCommand.BUFFERING) != 0) {\n        ensureBufferTlog();\n        bufferTlog.write(cmd);\n        return;\n      }\n\n      long pos = -1;\n      long prevPointer = getPrevPointerForUpdate(cmd);\n\n      // don't log if we are replaying from another log\n      if (!updateFromOldTlogs(cmd)) {\n        ensureLog();\n        pos = tlog.write(cmd, prevPointer);\n      }\n\n      if (!clearCaches) {\n        // TODO: in the future we could support a real position for a REPLAY update.\n        // Only currently would be useful for RTG while in recovery mode though.\n        LogPtr ptr = new LogPtr(pos, cmd.getVersion(), prevPointer);\n\n        map.put(cmd.getIndexedId(), ptr);\n\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" \" + ptr + \" map=\" + System.identityHashCode(map));\n        }\n\n      } else {\n        openRealtimeSearcher();\n        if (trace) {\n          log.trace(\"TLOG: added id \" + cmd.getPrintableId() + \" to \" + tlog + \" clearCaches=true\");\n        }\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106","415bbbe7da8065dd3c477bdc3c703c6425622998"],"740d649f013f07efbeb73ca854f106c60166e7c0":["1455c941cc4ce652efc776fc23471b0e499246f6"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"1455c941cc4ce652efc776fc23471b0e499246f6":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","546049537cdccd28f8500e45543da67235f8e51b"],"546049537cdccd28f8500e45543da67235f8e51b":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["415bbbe7da8065dd3c477bdc3c703c6425622998","1455c941cc4ce652efc776fc23471b0e499246f6"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["546049537cdccd28f8500e45543da67235f8e51b"],"f592209545c71895260367152601e9200399776d":["415bbbe7da8065dd3c477bdc3c703c6425622998","1455c941cc4ce652efc776fc23471b0e499246f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","1455c941cc4ce652efc776fc23471b0e499246f6","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"fb999ed3fc6e419b9104de9ebfe62ace27f31d5f":["546049537cdccd28f8500e45543da67235f8e51b"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b0085a9ec29ebc27be992a3712f4bd5d65d2106":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"1455c941cc4ce652efc776fc23471b0e499246f6":["740d649f013f07efbeb73ca854f106c60166e7c0","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb999ed3fc6e419b9104de9ebfe62ace27f31d5f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"546049537cdccd28f8500e45543da67235f8e51b":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["2b0085a9ec29ebc27be992a3712f4bd5d65d2106"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}