{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","commits":[{"id":"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec","date":1363331426,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#oldToNew(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #compute(int[], List)} to compute the old-to-new permutation\n   * given an array of documents and their corresponding values.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract int[] oldToNew(AtomicReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d1c249f01722fe2de6d60de2f0aade417fbb638","date":1365517193,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be dropped when the index is actually sorted.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036","date":1394123292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b221df109c657b2edfbf4b24f58ed360f1750e00","date":1394123961,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","bugFix":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  public abstract DocMap sort(AtomicReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(AtomicReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b221df109c657b2edfbf4b24f58ed360f1750e00":["3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["4d1c249f01722fe2de6d60de2f0aade417fbb638","4637747f71df783fc2014ef1f1e0418466e3bed6"],"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["4d1c249f01722fe2de6d60de2f0aade417fbb638","b221df109c657b2edfbf4b24f58ed360f1750e00"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b221df109c657b2edfbf4b24f58ed360f1750e00":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":["b221df109c657b2edfbf4b24f58ed360f1750e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87ac1f6aeca005a4532bea348c9a2c416eb0b4ec"],"4d1c249f01722fe2de6d60de2f0aade417fbb638":["96ea64d994d340044e0d57aeb6a5871539d10ca5","3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036","4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"87ac1f6aeca005a4532bea348c9a2c416eb0b4ec":["4d1c249f01722fe2de6d60de2f0aade417fbb638"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}