{"path":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","sourceNew":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator();\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator();\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","sourceNew":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator(null);\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator();\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestSeekExists(Random,List[Term],IndexReader).mjava","sourceNew":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator(null);\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // randomly seeks to term that we know exists, then next's\n  // from there\n  private void doTestSeekExists(Random r, List<Term> fieldTerms, IndexReader reader) throws IOException {\n\n    final Map<String,TermsEnum> tes = new HashMap<String,TermsEnum>();\n\n    // Test random seek to existing term, then enum:\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now seek\");\n    }\n\n    int num = atLeast(100);\n    for (int iter = 0; iter < num; iter++) {\n\n      // pick random field+term\n      int spot = r.nextInt(fieldTerms.size());\n      Term term = fieldTerms.get(spot);\n      String field = term.field();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: exist seek field=\" + field + \" term=\" + UnicodeUtil.toHexString(term.text()));\n      }\n\n      // seek to it\n      TermsEnum te = tes.get(field);\n      if (te == null) {\n        te = MultiFields.getTerms(reader, field).iterator(null);\n        tes.put(field, te);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  done get enum\");\n      }\n\n      // seek should find the term\n      assertEquals(TermsEnum.SeekStatus.FOUND,\n                   te.seekCeil(term.bytes()));\n      \n      // now .next() this many times:\n      int ct = _TestUtil.nextInt(r, 5, 100);\n      for(int i=0;i<ct;i++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now next()\");\n        }\n        if (1+spot+i >= fieldTerms.size()) {\n          break;\n        }\n        term = fieldTerms.get(1+spot+i);\n        if (!term.field().equals(field)) {\n          assertNull(te.next());\n          break;\n        } else {\n          BytesRef t = te.next();\n\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + (t == null ? null : UnicodeUtil.toHexString(t.utf8ToString())));\n            System.out.println(\"       exp=\" + UnicodeUtil.toHexString(term.text().toString()));\n          }\n\n          assertEquals(term.bytes(), t);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}