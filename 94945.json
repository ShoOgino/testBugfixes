{"path":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection.EstablishConnection#run().mjava","commits":[{"id":"bc6055f4a2e8e9f9caaec2297010c9502480ed69","date":1050060580,"type":0,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection.EstablishConnection#run().mjava","pathOld":"/dev/null","sourceNew":"        /**\n         * Main processing method for the EstablishConnection object\n         */\n        public void run()\n        {\n            try\n            {\n                if (Socks_client != null)\n                {\n                    sock = Socks_client.getSocket(actual_host, actual_port);\n                }\n                else\n                {\n                    // try all A records\n                    InetAddress[] addr_list = InetAddress.getAllByName(actual_host);\n                    for (int idx = 0; idx < addr_list.length; idx++)\n                    {\n                        try\n                        {\n                            if (LocalAddr == null)\n                            {\n                                sock = new Socket(addr_list[idx], actual_port);\n                            }\n                            else\n                            {\n                                sock = new Socket(addr_list[idx], actual_port,\n                                        LocalAddr, LocalPort);\n                            }\n                            break;\n                            // success\n                        }\n                        catch (SocketException se)\n                        {\n                            if (idx == addr_list.length - 1 || close)\n                            {\n                                throw se;\n                            }\n                            // we tried them all\n                        }\n                    }\n                }\n            }\n            catch (IOException ioe)\n            {\n                exception = ioe;\n            }\n\n            if (close && sock != null)\n            {\n                try\n                {\n                    sock.close();\n                }\n                catch (IOException ioe)\n                {\n                }\n                sock = null;\n            }\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/libs/HTTPClient-patch/HTTPClient/HTTPConnection.EstablishConnection#run().mjava","sourceNew":null,"sourceOld":"        /**\n         * Main processing method for the EstablishConnection object\n         */\n        public void run()\n        {\n            try\n            {\n                if (Socks_client != null)\n                {\n                    sock = Socks_client.getSocket(actual_host, actual_port);\n                }\n                else\n                {\n                    // try all A records\n                    InetAddress[] addr_list = InetAddress.getAllByName(actual_host);\n                    for (int idx = 0; idx < addr_list.length; idx++)\n                    {\n                        try\n                        {\n                            if (LocalAddr == null)\n                            {\n                                sock = new Socket(addr_list[idx], actual_port);\n                            }\n                            else\n                            {\n                                sock = new Socket(addr_list[idx], actual_port,\n                                        LocalAddr, LocalPort);\n                            }\n                            break;\n                            // success\n                        }\n                        catch (SocketException se)\n                        {\n                            if (idx == addr_list.length - 1 || close)\n                            {\n                                throw se;\n                            }\n                            // we tried them all\n                        }\n                    }\n                }\n            }\n            catch (IOException ioe)\n            {\n                exception = ioe;\n            }\n\n            if (close && sock != null)\n            {\n                try\n                {\n                    sock.close();\n                }\n                catch (IOException ioe)\n                {\n                }\n                sock = null;\n            }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"bc6055f4a2e8e9f9caaec2297010c9502480ed69":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc6055f4a2e8e9f9caaec2297010c9502480ed69"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}