{"path":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random.nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","date":1337674113,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":["5af906d697b0a05f75caf94b03a28adb76579c66","edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = IndexReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = IndexReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a199589f8815be5b2c960d0a591ca1ddad8b52b1","date":1342833673,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = dir.getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":["a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer, true);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer, true);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNRTThreads#doSearching(ExecutorService,long).mjava","sourceNew":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 100);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","sourceOld":"  @Override\n  protected void doSearching(ExecutorService es, long stopTime) throws Exception {\n\n    boolean anyOpenDelFiles = false;\n\n    DirectoryReader r = DirectoryReader.open(writer);\n\n    while (System.currentTimeMillis() < stopTime && !failed.get()) {\n      if (random().nextBoolean()) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now reopen r=\" + r);\n        }\n        final DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n        }\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"TEST: now close reader=\" + r);\n        }\n        r.close();\n        writer.commit();\n        final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n        if (openDeletedFiles.size() > 0) {\n          System.out.println(\"OBD files: \" + openDeletedFiles);\n        }\n        anyOpenDelFiles |= openDeletedFiles.size() > 0;\n        //assertEquals(\"open but deleted: \" + openDeletedFiles, 0, openDeletedFiles.size());\n        if (VERBOSE) {\n          System.out.println(\"TEST: now open\");\n        }\n        r = DirectoryReader.open(writer);\n      }\n      if (VERBOSE) {\n        System.out.println(\"TEST: got new reader=\" + r);\n      }\n      //System.out.println(\"numDocs=\" + r.numDocs() + \"\n      //openDelFileCount=\" + dir.openDeleteFileCount());\n\n      if (r.numDocs() > 0) {\n        fixedSearcher = new IndexSearcher(r, es);\n        smokeTestSearcher(fixedSearcher);\n        runSearchThreads(System.currentTimeMillis() + 500);\n      }\n    }\n    r.close();\n\n    //System.out.println(\"numDocs=\" + r.numDocs() + \" openDelFileCount=\" + dir.openDeleteFileCount());\n    final Set<String> openDeletedFiles = ((MockDirectoryWrapper) dir).getOpenDeletedFiles();\n    if (openDeletedFiles.size() > 0) {\n      System.out.println(\"OBD files: \" + openDeletedFiles);\n    }\n    anyOpenDelFiles |= openDeletedFiles.size() > 0;\n\n    assertFalse(\"saw non-zero open-but-deleted count\", anyOpenDelFiles);\n  }\n\n","bugFix":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"2a1862266772deb28cdcb7d996b64d2177022687":["527cc14542789f47d75da436cb4287d1ab887e34"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2","a199589f8815be5b2c960d0a591ca1ddad8b52b1"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["2a1862266772deb28cdcb7d996b64d2177022687"],"2a1862266772deb28cdcb7d996b64d2177022687":["71da933d30aea361ccc224d6544c451cbf49916d"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a199589f8815be5b2c960d0a591ca1ddad8b52b1":["527cc14542789f47d75da436cb4287d1ab887e34","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2":["aba371508186796cc6151d8223a5b4e16d02e26e","a199589f8815be5b2c960d0a591ca1ddad8b52b1","3599646b4d4c346cf74d334813488b8b337b5bf5","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3599646b4d4c346cf74d334813488b8b337b5bf5","7a0bb7b6eeee9103dc4c7cb2dfd62a9a41894fc2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","3599646b4d4c346cf74d334813488b8b337b5bf5","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}