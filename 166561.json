{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","commits":[{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.info(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to the context classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null)\n      parent = Thread.currentThread().getContextClassLoader();\n    this.classLoader = new URLClassLoader(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else {\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /*\n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else{\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /* \n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#SolrResourceLoader(Path,ClassLoader,Properties).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * This loader will delegate to Solr's classloader when possible,\n   * otherwise it will attempt to resolve resources using any jar files\n   * found in the \"lib/\" directory in the specified instance directory.\n   * </p>\n   *\n   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.\n   * @see #locateSolrHome\n   */\n  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {\n    if (instanceDir == null) {\n      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for deduced Solr Home: '{}'\", this.instanceDir);\n    } else {\n      this.instanceDir = instanceDir.toAbsolutePath().normalize();\n      log.debug(\"new SolrResourceLoader for directory: '{}'\", this.instanceDir);\n    }\n\n    if (parent == null) {\n      parent = getClass().getClassLoader();\n    }\n    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);\n\n    /*\n     * Skip the lib subdirectory when we are loading from the solr home.\n     * Otherwise load it, so core lib directories still get loaded.\n     * The default sharedLib will pick this up later, and if the user has\n     * changed sharedLib, then we don't want to load that location anyway.\n     */\n    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {\n      Path libDir = this.instanceDir.resolve(\"lib\");\n      if (Files.exists(libDir)) {\n        try {\n          addToClassLoader(getURLs(libDir));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} to classpath: {}\", libDir, e.getMessage());\n        }\n        reloadLuceneSPI();\n      }\n    }\n    this.coreProperties = coreProperties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a626ec4d1c92e59fe390724d6220081047b03ce7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["28288370235ed02234a64753cdbf0c6ec096304a"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","126d6ad24eed13163ba0959435d5a80e5672837c"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a2748831fb25b0e9d5a4c315047bf877c887460"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a2748831fb25b0e9d5a4c315047bf877c887460"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5a2748831fb25b0e9d5a4c315047bf877c887460","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"28288370235ed02234a64753cdbf0c6ec096304a":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}