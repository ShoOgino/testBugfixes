{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.payTermStartFP = payTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (stats.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset, singletonDocID));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    if (state.totalTermFreq >= BLOCK_SIZE) {\n      state.payTermStartFP = payTermStartFP;\n    } else {\n      state.payTermStartFP = -1;\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.payTermStartFP = payTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75bb5d39efc3017188ad2881bd61b25153a8e3de","date":1378175814,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    if (VERSION_CURRENT >= VERSION_META_ARRAY || state.totalTermFreq >= BLOCK_SIZE) {\n      state.payTermStartFP = payTermStartFP;\n    } else {\n      state.payTermStartFP = -1;\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    if (state.totalTermFreq >= BLOCK_SIZE) {\n      state.payTermStartFP = payTermStartFP;\n    } else {\n      state.payTermStartFP = -1;\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"563ccede63f326b5dfd37df2341608ce1a80075d","date":1378480344,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.payTermStartFP = payTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    if (VERSION_CURRENT >= VERSION_META_ARRAY || state.totalTermFreq >= BLOCK_SIZE) {\n      state.payTermStartFP = payTermStartFP;\n    } else {\n      state.payTermStartFP = -1;\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339d0e916669734510414f62912f1fcf120ecf9d","date":1378483491,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docTermStartFP = docTermStartFP;\n    state.posTermStartFP = posTermStartFP;\n    state.payTermStartFP = payTermStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":1,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(TermStats).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(TermStats stats) throws IOException {\n    assert stats.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert stats.docFreq == docCount: stats.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + stats.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docTermStartFP=\" + docTermStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (stats.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posTermStartFP=\" + posTermStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert stats.totalTermFreq != -1;\n      if (stats.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posTermStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + stats.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docTermStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docTermStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n\n    long payStartFP;\n    if (stats.totalTermFreq >= BLOCK_SIZE) {\n      payStartFP = payTermStartFP;\n    } else {\n      payStartFP = -1;\n    }\n\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n\n    pendingTerms.add(new PendingTerm(docTermStartFP, posTermStartFP, payStartFP, skipOffset, lastPosBlockOffset, singletonDocID));\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + writePayloads + \" hasOffsets=\" + writeOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!fieldHasFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (fieldHasPositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + fieldHasPayloads + \" hasOffsets=\" + fieldHasOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (fieldHasPayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (fieldHasOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (fieldHasPayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + writePayloads + \" hasOffsets=\" + writeOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + writePayloads + \" hasOffsets=\" + writeOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishTerm(BlockTermState).mjava","sourceNew":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + writePayloads + \" hasOffsets=\" + writeOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","sourceOld":"  /** Called when we are done adding docs to this term */\n  @Override\n  public void finishTerm(BlockTermState _state) throws IOException {\n    IntBlockTermState state = (IntBlockTermState) _state;\n    assert state.docFreq > 0;\n\n    // TODO: wasteful we are counting this (counting # docs\n    // for this term) in two places?\n    assert state.docFreq == docCount: state.docFreq + \" vs \" + docCount;\n\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.finishTerm docFreq=\" + state.docFreq);\n    // }\n\n    // if (DEBUG) {\n    //   if (docBufferUpto > 0) {\n    //     System.out.println(\"  write doc/freq vInt block (count=\" + docBufferUpto + \") at fp=\" + docOut.getFilePointer() + \" docStartFP=\" + docStartFP);\n    //   }\n    // }\n    \n    // docFreq == 1, don't write the single docid/freq to a separate file along with a pointer to it.\n    final int singletonDocID;\n    if (state.docFreq == 1) {\n      // pulse the singleton docid into the term dictionary, freq is implicitly totalTermFreq\n      singletonDocID = docDeltaBuffer[0];\n    } else {\n      singletonDocID = -1;\n      // vInt encode the remaining doc deltas and freqs:\n      for(int i=0;i<docBufferUpto;i++) {\n        final int docDelta = docDeltaBuffer[i];\n        final int freq = freqBuffer[i];\n        if (!writeFreqs) {\n          docOut.writeVInt(docDelta);\n        } else if (freqBuffer[i] == 1) {\n          docOut.writeVInt((docDelta<<1)|1);\n        } else {\n          docOut.writeVInt(docDelta<<1);\n          docOut.writeVInt(freq);\n        }\n      }\n    }\n\n    final long lastPosBlockOffset;\n\n    if (writePositions) {\n      // if (DEBUG) {\n      //   if (posBufferUpto > 0) {\n      //     System.out.println(\"  write pos vInt block (count=\" + posBufferUpto + \") at fp=\" + posOut.getFilePointer() + \" posStartFP=\" + posStartFP + \" hasPayloads=\" + writePayloads + \" hasOffsets=\" + writeOffsets);\n      //   }\n      // }\n\n      // totalTermFreq is just total number of positions(or payloads, or offsets)\n      // associated with current term.\n      assert state.totalTermFreq != -1;\n      if (state.totalTermFreq > BLOCK_SIZE) {\n        // record file offset for last pos in last block\n        lastPosBlockOffset = posOut.getFilePointer() - posStartFP;\n      } else {\n        lastPosBlockOffset = -1;\n      }\n      if (posBufferUpto > 0) {       \n        // TODO: should we send offsets/payloads to\n        // .pay...?  seems wasteful (have to store extra\n        // vLong for low (< BLOCK_SIZE) DF terms = vast vast\n        // majority)\n\n        // vInt encode the remaining positions/payloads/offsets:\n        int lastPayloadLength = -1;  // force first payload length to be written\n        int lastOffsetLength = -1;   // force first offset length to be written\n        int payloadBytesReadUpto = 0;\n        for(int i=0;i<posBufferUpto;i++) {\n          final int posDelta = posDeltaBuffer[i];\n          if (writePayloads) {\n            final int payloadLength = payloadLengthBuffer[i];\n            if (payloadLength != lastPayloadLength) {\n              lastPayloadLength = payloadLength;\n              posOut.writeVInt((posDelta<<1)|1);\n              posOut.writeVInt(payloadLength);\n            } else {\n              posOut.writeVInt(posDelta<<1);\n            }\n\n            // if (DEBUG) {\n            //   System.out.println(\"        i=\" + i + \" payloadLen=\" + payloadLength);\n            // }\n\n            if (payloadLength != 0) {\n              // if (DEBUG) {\n              //   System.out.println(\"          write payload @ pos.fp=\" + posOut.getFilePointer());\n              // }\n              posOut.writeBytes(payloadBytes, payloadBytesReadUpto, payloadLength);\n              payloadBytesReadUpto += payloadLength;\n            }\n          } else {\n            posOut.writeVInt(posDelta);\n          }\n\n          if (writeOffsets) {\n            // if (DEBUG) {\n            //   System.out.println(\"          write offset @ pos.fp=\" + posOut.getFilePointer());\n            // }\n            int delta = offsetStartDeltaBuffer[i];\n            int length = offsetLengthBuffer[i];\n            if (length == lastOffsetLength) {\n              posOut.writeVInt(delta << 1);\n            } else {\n              posOut.writeVInt(delta << 1 | 1);\n              posOut.writeVInt(length);\n              lastOffsetLength = length;\n            }\n          }\n        }\n\n        if (writePayloads) {\n          assert payloadBytesReadUpto == payloadByteUpto;\n          payloadByteUpto = 0;\n        }\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  totalTermFreq=\" + state.totalTermFreq + \" lastPosBlockOffset=\" + lastPosBlockOffset);\n      // }\n    } else {\n      lastPosBlockOffset = -1;\n    }\n\n    long skipOffset;\n    if (docCount > BLOCK_SIZE) {\n      skipOffset = skipWriter.writeSkip(docOut) - docStartFP;\n      \n      // if (DEBUG) {\n      //   System.out.println(\"skip packet \" + (docOut.getFilePointer() - (docStartFP + skipOffset)) + \" bytes\");\n      // }\n    } else {\n      skipOffset = -1;\n      // if (DEBUG) {\n      //   System.out.println(\"  no skip: docCount=\" + docCount);\n      // }\n    }\n    // if (DEBUG) {\n    //   System.out.println(\"  payStartFP=\" + payStartFP);\n    // }\n    state.docStartFP = docStartFP;\n    state.posStartFP = posStartFP;\n    state.payStartFP = payStartFP;\n    state.singletonDocID = singletonDocID;\n    state.skipOffset = skipOffset;\n    state.lastPosBlockOffset = lastPosBlockOffset;\n    docBufferUpto = 0;\n    posBufferUpto = 0;\n    lastDocID = 0;\n    docCount = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"339d0e916669734510414f62912f1fcf120ecf9d":["563ccede63f326b5dfd37df2341608ce1a80075d"],"563ccede63f326b5dfd37df2341608ce1a80075d":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99eb4a732d1a908f4636ace52928876136bf1896":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","99eb4a732d1a908f4636ace52928876136bf1896"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","339d0e916669734510414f62912f1fcf120ecf9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"]},"commit2Childs":{"339d0e916669734510414f62912f1fcf120ecf9d":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"563ccede63f326b5dfd37df2341608ce1a80075d":["339d0e916669734510414f62912f1fcf120ecf9d"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["563ccede63f326b5dfd37df2341608ce1a80075d"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}