{"path":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws CorruptIndexException, IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e","98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexCommit,int).mjava","sourceNew":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, false);\n      }\n    }.run(commit);\n  }\n\n","sourceOld":"  /** called from DirectoryReader.open(...) methods */\n  static DirectoryReader open(final Directory directory, final IndexCommit commit,\n                          final int termInfosIndexDivisor) throws IOException {\n    return (DirectoryReader) new SegmentInfos.FindSegmentsFile(directory) {\n      @Override\n      protected Object doBody(String segmentFileName) throws IOException {\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(directory, segmentFileName);\n        final SegmentReader[] readers = new SegmentReader[sis.size()];\n        for (int i = sis.size()-1; i >= 0; i--) {\n          IOException prior = null;\n          boolean success = false;\n          try {\n            readers[i] = new SegmentReader(sis.info(i), termInfosIndexDivisor, IOContext.READ);\n            success = true;\n          } catch(IOException ex) {\n            prior = ex;\n          } finally {\n            if (!success)\n              IOUtils.closeWhileHandlingException(prior, readers);\n          }\n        }\n        return new StandardDirectoryReader(directory, readers, null, sis, termInfosIndexDivisor, false);\n      }\n    }.run(commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["a45bec74b98f6fc05f52770cfb425739e6563960","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}