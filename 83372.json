{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","commits":[{"id":"89f8b19763ea545f1e428dfa5efb8235beaaa05e","date":1151436680,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","pathOld":"/dev/null","sourceNew":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(HttpServletResponse.SC_NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","sourceNew":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","sourceOld":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(HttpServletResponse.SC_NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(HttpServletResponse.SC_BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/servlet/handler/AbstractFeedHandler#createFeedFromRequest(HttpServletRequest).mjava","sourceNew":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","sourceOld":"    protected ServerBaseFeed createFeedFromRequest(HttpServletRequest request) throws ParseException, IOException, FeedHandlerException{\n        GDataServerRegistry registry = GDataServerRegistry.getRegistry();\n        String providedService = request.getParameter(PARAMETER_SERVICE);\n        if(!registry.isServiceRegistered(providedService)){\n            setError(GDataResponse.NOT_FOUND,\"no such service\");\n            throw new FeedHandlerException(\"ProvicdedService is not registered -- Name: \"+providedService);\n         }\n        ProvidedService provServiceInstance = registry.getProvidedService(providedService);  \n        if(providedService == null){\n            setError(GDataResponse.BAD_REQUEST,\"no such service\");\n            throw new FeedHandlerException(\"no such service registered -- \"+providedService);\n        }\n        try{\n            ServerBaseFeed retVal = new ServerBaseFeed(GDataEntityBuilder.buildFeed(request.getReader(),provServiceInstance));\n            retVal.setServiceConfig(provServiceInstance);\n        return retVal;\n        }catch (IOException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"Can not read from input stream - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"Can not read from input stream\");\n            throw e;\n        }catch (ParseException e) {\n            if(LOG.isInfoEnabled())\n                LOG.info(\"feed can not be parsed - \",e);\n            setError(GDataResponse.BAD_REQUEST,\"incoming feed can not be parsed\");\n            throw e;\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"89f8b19763ea545f1e428dfa5efb8235beaaa05e":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f8b19763ea545f1e428dfa5efb8235beaaa05e"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}