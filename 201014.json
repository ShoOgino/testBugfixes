{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":"  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<QueryNode>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/GroupQueryNodeProcessor#process(QueryNode).mjava","sourceNew":null,"sourceOld":"  @Override\n  public QueryNode process(QueryNode queryTree) throws QueryNodeException {\n    Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);\n    \n    if (defaultOperator == null) {\n      throw new IllegalArgumentException(\n          \"DEFAULT_OPERATOR should be set on the QueryConfigHandler\");\n    }\n\n    this.usingAnd = StandardQueryConfigHandler.Operator.AND == defaultOperator;\n\n    if (queryTree instanceof GroupQueryNode) {\n      queryTree = ((GroupQueryNode) queryTree).getChild();\n    }\n\n    this.queryNodeList = new ArrayList<>();\n    this.latestNodeVerified = false;\n    readTree(queryTree);\n\n    List<QueryNode> actualQueryNodeList = this.queryNodeList;\n\n    for (int i = 0; i < actualQueryNodeList.size(); i++) {\n      QueryNode node = actualQueryNodeList.get(i);\n\n      if (node instanceof GroupQueryNode) {\n        actualQueryNodeList.set(i, process(node));\n      }\n\n    }\n\n    this.usingAnd = false;\n\n    if (queryTree instanceof BooleanQueryNode) {\n      queryTree.set(actualQueryNodeList);\n\n      return queryTree;\n\n    } else {\n      return new BooleanQueryNode(actualQueryNodeList);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}