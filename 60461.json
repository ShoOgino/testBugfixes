{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","commits":[{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cafceb8478fa94442a7368e682a9d9b61d8d13","date":1322606288,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * Computes the haversine distance between two points. The arguments are in radians and provided in lat,lon order.\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the haversine formula.\n   */\n  public static double haversine(double y1, double x1, double y2, double x2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinY * hsinY +\n          (Math.cos(y1) * Math.cos(y2) * hsinX * hsinX);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":["bf0f06494833f3935ee69a7e806ce358b324ca0d","5f900d5ce814fc22ea498d3303d1f833f5bf320c","4289a1f64dea17529773bb2e2b0565818bc289df","4ad922eddebc57a54c58f83752607900c0d5afdb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes the haversine distance between two points. The arguments are in radians and provided in lat,lon order.\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the haversine formula.\n   */\n  public static double haversine(double y1, double x1, double y2, double x2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinY * hsinY +\n          (Math.cos(y1) * Math.cos(y2) * hsinX * hsinX);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes the haversine distance between two points. The arguments are in radians and provided in lat,lon order.\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the haversine formula.\n   */\n  public static double haversine(double y1, double x1, double y2, double x2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinY * hsinY +\n          (Math.cos(y1) * Math.cos(y2) * hsinX * hsinX);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15cafceb8478fa94442a7368e682a9d9b61d8d13":["459be89020f9023e3b60066066a892c7edb5de58"],"459be89020f9023e3b60066066a892c7edb5de58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"e47768b261c28e7e6032060e8331475c81057953":["15cafceb8478fa94442a7368e682a9d9b61d8d13","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["15cafceb8478fa94442a7368e682a9d9b61d8d13"]},"commit2Childs":{"15cafceb8478fa94442a7368e682a9d9b61d8d13":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"459be89020f9023e3b60066066a892c7edb5de58":["15cafceb8478fa94442a7368e682a9d9b61d8d13","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459be89020f9023e3b60066066a892c7edb5de58","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}