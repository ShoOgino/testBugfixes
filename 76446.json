{"path":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","commits":[{"id":"62588e300dd0b29f3e8f5d25aa08dc59edd9c354","date":1380712275,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"/dev/null","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrServer().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrServer().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<String, List<Integer>>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrServer().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrServer client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrServer().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrServer(\"\", getBaseUrl((HttpSolrServer) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    server.request(request);\n    server.shutdown();\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0))).request(request);\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    CloudSolrClient client = null;\n    try {\n      client = createCloudClient(null);\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    } finally {\n      if (client != null) client.shutdown();\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)));\n    server.request(request);\n    server.shutdown();\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = ZkNodeProps.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState();\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState(true);\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      zkStateReader.updateClusterState();\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","sourceOld":"  private void testCreateShardRepFactor() throws Exception  {\n    String collectionName = \"testCreateShardRepFactor\";\n    HashMap<String, List<Integer>> collectionInfos = new HashMap<>();\n    try (CloudSolrClient client = createCloudClient(null)) {\n      Map<String, Object> props = Utils.makeMap(\n          REPLICATION_FACTOR, 1,\n          MAX_SHARDS_PER_NODE, 5,\n          NUM_SLICES, 2,\n          \"shards\", \"a,b\",\n          \"router.name\", \"implicit\");\n\n      createCollection(collectionInfos, collectionName, props, client);\n    }\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATESHARD.toString());\n    params.set(\"collection\", collectionName);\n    params.set(\"shard\", \"x\");\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    try (SolrClient server = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      server.request(request);\n    }\n\n    waitForRecoveriesToFinish(collectionName, zkStateReader, false);\n\n    int replicaCount = 0;\n    int attempts = 0;\n    while (true) {\n      if (attempts > 30) fail(\"Not enough active replicas in the shard 'x'\");\n      attempts++;\n      replicaCount = zkStateReader.getClusterState().getSlice(collectionName, \"x\").getReplicas().size();\n      if (replicaCount >= 1) break;\n      Thread.sleep(500);\n    }\n\n    assertEquals(\"CREATESHARD API created more than replicationFactor number of replicas\", 1, replicaCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CustomCollectionTest#testCreateShardRepFactor().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CustomCollectionTest#testCreateShardRepFactor().mjava","sourceNew":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateShardRepFactor() throws Exception  {\n    final String collectionName = \"testCreateShardRepFactor\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest.createShard(collectionName, \"x\")\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Not enough active replicas in shard 'x'\", collectionName, (n, c) -> {\n      return c.getSlice(\"x\").getReplicas().size() == 1;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["62588e300dd0b29f3e8f5d25aa08dc59edd9c354"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"62588e300dd0b29f3e8f5d25aa08dc59edd9c354":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"62588e300dd0b29f3e8f5d25aa08dc59edd9c354":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62588e300dd0b29f3e8f5d25aa08dc59edd9c354"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}