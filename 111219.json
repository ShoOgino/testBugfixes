{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans);\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            LOG.log(Level.SEVERE, msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        LOG.log(Level.SEVERE, \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d22c66b0638c82521891318fc352042c5b86e03"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d22c66b0638c82521891318fc352042c5b86e03","date":1219993248,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            LOG.log(Level.SEVERE, msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        LOG.log(Level.SEVERE, \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans);\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            LOG.log(Level.SEVERE, msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        LOG.log(Level.SEVERE, \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error( msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error( \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            LOG.log(Level.SEVERE, msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        LOG.log(Level.SEVERE, \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62","date":1226483472,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error( msg);\n            throw new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error( \"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorWrapper#loadTransformers().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#loadTransformers().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        if (docBuilder != null && docBuilder.verboseDebug) {\n          transformer = docBuilder.writer.getDebugLogger().wrapTransformer(transformer);\n        }\n        return super.add(transformer);\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  void loadTransformers() {\n    String transClasses = context.getEntityAttribute(TRANSFORMER);\n\n    if (transClasses == null) {\n      transformers = Collections.EMPTY_LIST;\n      return;\n    }\n\n    String[] transArr = transClasses.split(\",\");\n    transformers = new ArrayList<Transformer>() {\n      public boolean add(Transformer transformer) {\n        return super.add(DebugLogger.wrapTransformer(transformer));\n      }\n    };\n    for (String aTransArr : transArr) {\n      String trans = aTransArr.trim();\n      if (trans.startsWith(\"script:\")) {\n        String functionName = trans.substring(\"script:\".length());\n        ScriptTransformer scriptTransformer = new ScriptTransformer();\n        scriptTransformer.setFunctionName(functionName);\n        transformers.add(scriptTransformer);\n        continue;\n      }\n      try {\n        Class clazz = DocBuilder.loadClass(trans, context.getSolrCore());\n        if (clazz.newInstance() instanceof Transformer) {\n          transformers.add((Transformer) clazz.newInstance());\n        } else {\n          final Method meth = clazz.getMethod(TRANSFORM_ROW, Map.class);\n          if (meth == null) {\n            String msg = \"Transformer :\"\n                    + trans\n                    + \"does not implement Transformer interface or does not have a transformRow(Map m)method\";\n            log.error(msg);\n            throw new DataImportHandlerException(\n                    SEVERE, msg);\n          }\n          transformers.add(new ReflectionTransformer(meth, clazz, trans));\n        }\n      } catch (Exception e) {\n        log.error(\"Unable to load Transformer: \" + aTransArr, e);\n        throw new DataImportHandlerException(SEVERE,\n                e);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"8d22c66b0638c82521891318fc352042c5b86e03":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["8d22c66b0638c82521891318fc352042c5b86e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0ed3f47d0f68ca5e5107d28c942fbd1185f44c62":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"8d22c66b0638c82521891318fc352042c5b86e03":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["8d22c66b0638c82521891318fc352042c5b86e03"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":[],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["0ed3f47d0f68ca5e5107d28c942fbd1185f44c62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["758fdd153bb361b47f22db79ace6af6f6b7b9330","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}