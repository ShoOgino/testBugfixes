{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","commits":[{"id":"153701bb378c0b9de64258596aed764ae5775910","date":1360430359,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(\"UTF-8\");\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(\"UTF-8\");\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9d5abf772262a05c74afddcadc95c4bdab07f1f","date":1381747682,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","sourceNew":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(\"UTF-8\");\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(\"UTF-8\");\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    if (minHash > maxHash)  {\n      int temp = maxHash;\n      maxHash = minHash;\n      minHash = temp;\n    }\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","sourceOld":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(\"UTF-8\");\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(\"UTF-8\");\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","sourceNew":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(StandardCharsets.UTF_8);\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(StandardCharsets.UTF_8);\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    if (minHash > maxHash)  {\n      int temp = maxHash;\n      maxHash = minHash;\n      minHash = temp;\n    }\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","sourceOld":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(\"UTF-8\");\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(\"UTF-8\");\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    if (minHash > maxHash)  {\n      int temp = maxHash;\n      maxHash = minHash;\n      minHash = temp;\n    }\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexSplitterTest#getRanges(String,String).mjava","sourceNew":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(StandardCharsets.UTF_8);\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(StandardCharsets.UTF_8);\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    if (minHash > maxHash)  {\n      int temp = maxHash;\n      maxHash = minHash;\n      minHash = temp;\n    }\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","sourceOld":"  private List<DocRouter.Range> getRanges(String id1, String id2) throws UnsupportedEncodingException {\n    // find minHash/maxHash hash ranges\n    byte[] bytes = id1.getBytes(\"UTF-8\");\n    int minHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n    bytes = id2.getBytes(\"UTF-8\");\n    int maxHash = Hash.murmurhash3_x86_32(bytes, 0, bytes.length, 0);\n\n    if (minHash > maxHash)  {\n      int temp = maxHash;\n      maxHash = minHash;\n      minHash = temp;\n    }\n\n    PlainIdRouter router = new PlainIdRouter();\n    DocRouter.Range fullRange = new DocRouter.Range(minHash, maxHash);\n    return router.partitionRange(2, fullRange);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d9d5abf772262a05c74afddcadc95c4bdab07f1f","9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"153701bb378c0b9de64258596aed764ae5775910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["153701bb378c0b9de64258596aed764ae5775910"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d3d365762604952e436b51980101dfc84cc1b3e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["153701bb378c0b9de64258596aed764ae5775910"],"153701bb378c0b9de64258596aed764ae5775910":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}