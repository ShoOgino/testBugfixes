{"path":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    MetricUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), MetricUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), MetricUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    TimerUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), TimerUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), TimerUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), TimerUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    MetricUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), MetricUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), MetricUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = MetricUtils.timerToNamedList(timer);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    MetricUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), MetricUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), MetricUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = MetricUtils.timerToNamedList(timer);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    final NamedList<Object> lst = new SimpleOrderedMap<>();\n    MetricUtils.addMetrics(lst, timer);\n    // check that expected metrics were obtained\n    assertEquals(lst.size(), 9);\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n    assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n    assertEquals(lst.get(\"avgTimePerRequest\"), MetricUtils.nsToMs(snapshot.getMean()));\n    assertEquals(lst.get(\"medianRequestTime\"), MetricUtils.nsToMs(snapshot.getMedian()));\n    assertEquals(lst.get(\"75thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get75thPercentile()));\n    assertEquals(lst.get(\"95thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get95thPercentile()));\n    assertEquals(lst.get(\"99thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get99thPercentile()));\n    assertEquals(lst.get(\"999thPcRequestTime\"), MetricUtils.nsToMs(snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.timerToMap(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = MetricUtils.timerToNamedList(timer);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.convertTimer(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.timerToMap(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.convertTimer(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.timerToMap(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.convertTimer(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.timerToMap(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.convertTimer(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    NamedList lst = new NamedList(MetricUtils.convertTimer(timer, false));\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, \".\", (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, \".\", (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, \".\", (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, \".\", (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/stats/MetricUtilsTest#testSolrTimerGetSnapshot().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.ALL_PROPERTIES, false, false, \".\", (k, v) -> {\n      ((MapWriter) v).toMap(map);\n    });\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testSolrTimerGetSnapshot() {\n    // create a timer with up to 100 data points\n    final Timer timer = new Timer();\n    final int iterations = random().nextInt(100);\n    for (int i = 0; i < iterations; ++i) {\n      timer.update(Math.abs(random().nextInt()) + 1, TimeUnit.NANOSECONDS);\n    }\n    // obtain timer metrics\n    Map<String,Object> map = new HashMap<>();\n    MetricUtils.convertTimer(\"\", timer, MetricUtils.PropertyFilter.ALL, false, false, \".\", (k, v) -> {\n      map.putAll((Map<String,Object>)v);\n    });\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList lst = new NamedList(map);\n    // check that expected metrics were obtained\n    assertEquals(14, lst.size());\n    final Snapshot snapshot = timer.getSnapshot();\n    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n    // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n    assertEquals(timer.getFiveMinuteRate(), lst.get(\"5minRate\"));\n    assertEquals(timer.getFifteenMinuteRate(), lst.get(\"15minRate\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMean()), lst.get(\"mean_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.getMedian()), lst.get(\"median_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get75thPercentile()), lst.get(\"p75_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get95thPercentile()), lst.get(\"p95_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get99thPercentile()), lst.get(\"p99_ms\"));\n    assertEquals(MetricUtils.nsToMs(snapshot.get999thPercentile()), lst.get(\"p999_ms\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["e98520789adb1d5ad05afb4956eca0944a929688"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"e98520789adb1d5ad05afb4956eca0944a929688":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["0265144286422ad99682a00904cc2536b79c8535"],"ab68488225b6a6c357dda72ed11dedca9914a192":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"e98520789adb1d5ad05afb4956eca0944a929688":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["e98520789adb1d5ad05afb4956eca0944a929688"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["f03e4bed5023ec3ef93a771b8888cae991cf448d","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}