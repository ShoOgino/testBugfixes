{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getBinaryDocValues(String,boolean).mjava","commits":[{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getBinaryDocValues(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit shrink the sync'd part to a cache miss\n  synchronized BinaryDocValues getBinaryDocValues(String field, boolean direct) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      return null;\n    }\n    if (!DocValues.isBytes(fi.getDocValuesType())) {\n      throw new IllegalArgumentException(\"field \\\"\" + field + \"\\\" was not indexed as a binary doc values field\");\n    }\n\n    if (direct) {\n      return simpleDVProducer.getDirectBinary(fi);\n    } else {\n      if (!docValuesCache.containsKey(fi)) {\n        BinaryDocValues dv = simpleDVProducer.getBinary(fi);\n        if (dv != null) {\n          docValuesCache.put(fi, dv);\n        }\n      }\n      return (BinaryDocValues) docValuesCache.get(fi);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#getBinaryDocValues(String,boolean).mjava","sourceNew":null,"sourceOld":"  // nocommit shrink the sync'd part to a cache miss\n  synchronized BinaryDocValues getBinaryDocValues(String field, boolean direct) throws IOException {\n    FieldInfo fi = fieldInfos.fieldInfo(field);\n    if (fi == null) {\n      return null;\n    }\n    if (!DocValues.isBytes(fi.getDocValuesType())) {\n      throw new IllegalArgumentException(\"field \\\"\" + field + \"\\\" was not indexed as a binary doc values field\");\n    }\n\n    if (direct) {\n      return simpleDVProducer.getDirectBinary(fi);\n    } else {\n      if (!docValuesCache.containsKey(fi)) {\n        BinaryDocValues dv = simpleDVProducer.getBinary(fi);\n        if (dv != null) {\n          docValuesCache.put(fi, dv);\n        }\n      }\n      return (BinaryDocValues) docValuesCache.get(fi);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cd329bd749496f6c58b586a6c0dd0dc8201206f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4d374b2bebd0d52acaa61038fbf23068620fba7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}