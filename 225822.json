{"path":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","commits":[{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns random string, with a given UTF-8 byte length*/\n  public static String randomFixedByteLengthUnicodeString(Random r, int length) {\n    \n    final char[] buffer = new char[length*3];\n    int bytes = length;\n    int i = 0;\n    for (; i < buffer.length && bytes != 0; i++) {\n      int t;\n      if (bytes >= 4) {\n        t = r.nextInt(5);\n      } else if (bytes >= 3) {\n        t = r.nextInt(4);\n      } else if (bytes >= 2) {\n        t = r.nextInt(2);\n      } else {\n        t = 0;\n      }\n      if (t == 0) {\n        buffer[i] = (char) r.nextInt(0x80);\n        bytes--;\n      } else if (1 == t) {\n        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);\n        bytes -= 2;\n      } else if (2 == t) {\n        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);\n        bytes -= 3;\n      } else if (3 == t) {\n        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);\n        bytes -= 3;\n      } else if (4 == t) {\n        // Make a surrogate pair\n        // High surrogate\n        buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);\n        // Low surrogate\n        buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);\n        bytes -= 4;\n      }\n\n    }\n    return new String(buffer, 0, i);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns random string, with a given UTF-8 byte length*/\n  public static String randomFixedByteLengthUnicodeString(Random r, int length) {\n    \n    final char[] buffer = new char[length*3];\n    int bytes = length;\n    int i = 0;\n    for (; i < buffer.length && bytes != 0; i++) {\n      int t;\n      if (bytes >= 4) {\n        t = r.nextInt(5);\n      } else if (bytes >= 3) {\n        t = r.nextInt(4);\n      } else if (bytes >= 2) {\n        t = r.nextInt(2);\n      } else {\n        t = 0;\n      }\n      if (t == 0) {\n        buffer[i] = (char) r.nextInt(0x80);\n        bytes--;\n      } else if (1 == t) {\n        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);\n        bytes -= 2;\n      } else if (2 == t) {\n        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);\n        bytes -= 3;\n      } else if (3 == t) {\n        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);\n        bytes -= 3;\n      } else if (4 == t) {\n        // Make a surrogate pair\n        // High surrogate\n        buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);\n        // Low surrogate\n        buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);\n        bytes -= 4;\n      }\n\n    }\n    return new String(buffer, 0, i);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns random string, with a given UTF-8 byte length*/\n  public static String randomFixedByteLengthUnicodeString(Random r, int length) {\n    \n    final char[] buffer = new char[length*3];\n    int bytes = length;\n    int i = 0;\n    for (; i < buffer.length && bytes != 0; i++) {\n      int t;\n      if (bytes >= 4) {\n        t = r.nextInt(5);\n      } else if (bytes >= 3) {\n        t = r.nextInt(4);\n      } else if (bytes >= 2) {\n        t = r.nextInt(2);\n      } else {\n        t = 0;\n      }\n      if (t == 0) {\n        buffer[i] = (char) r.nextInt(0x80);\n        bytes--;\n      } else if (1 == t) {\n        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);\n        bytes -= 2;\n      } else if (2 == t) {\n        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);\n        bytes -= 3;\n      } else if (3 == t) {\n        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);\n        bytes -= 3;\n      } else if (4 == t) {\n        // Make a surrogate pair\n        // High surrogate\n        buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);\n        // Low surrogate\n        buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);\n        bytes -= 4;\n      }\n\n    }\n    return new String(buffer, 0, i);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#randomFixedByteLengthUnicodeString(Random,int).mjava","sourceNew":"  /** Returns random string, with a given UTF-8 byte length*/\n  public static String randomFixedByteLengthUnicodeString(Random r, int length) {\n    \n    final char[] buffer = new char[length*3];\n    int bytes = length;\n    int i = 0;\n    for (; i < buffer.length && bytes != 0; i++) {\n      int t;\n      if (bytes >= 4) {\n        t = r.nextInt(5);\n      } else if (bytes >= 3) {\n        t = r.nextInt(4);\n      } else if (bytes >= 2) {\n        t = r.nextInt(2);\n      } else {\n        t = 0;\n      }\n      if (t == 0) {\n        buffer[i] = (char) r.nextInt(0x80);\n        bytes--;\n      } else if (1 == t) {\n        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);\n        bytes -= 2;\n      } else if (2 == t) {\n        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);\n        bytes -= 3;\n      } else if (3 == t) {\n        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);\n        bytes -= 3;\n      } else if (4 == t) {\n        // Make a surrogate pair\n        // High surrogate\n        buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);\n        // Low surrogate\n        buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);\n        bytes -= 4;\n      }\n\n    }\n    return new String(buffer, 0, i);\n  }\n\n","sourceOld":"  /** Returns random string, with a given UTF-8 byte length*/\n  public static String randomFixedByteLengthUnicodeString(Random r, int length) {\n    \n    final char[] buffer = new char[length*3];\n    int bytes = length;\n    int i = 0;\n    for (; i < buffer.length && bytes != 0; i++) {\n      int t;\n      if (bytes >= 4) {\n        t = r.nextInt(5);\n      } else if (bytes >= 3) {\n        t = r.nextInt(4);\n      } else if (bytes >= 2) {\n        t = r.nextInt(2);\n      } else {\n        t = 0;\n      }\n      if (t == 0) {\n        buffer[i] = (char) r.nextInt(0x80);\n        bytes--;\n      } else if (1 == t) {\n        buffer[i] = (char) nextInt(r, 0x80, 0x7ff);\n        bytes -= 2;\n      } else if (2 == t) {\n        buffer[i] = (char) nextInt(r, 0x800, 0xd7ff);\n        bytes -= 3;\n      } else if (3 == t) {\n        buffer[i] = (char) nextInt(r, 0xe000, 0xffff);\n        bytes -= 3;\n      } else if (4 == t) {\n        // Make a surrogate pair\n        // High surrogate\n        buffer[i++] = (char) nextInt(r, 0xd800, 0xdbff);\n        // Low surrogate\n        buffer[i] = (char) nextInt(r, 0xdc00, 0xdfff);\n        bytes -= 4;\n      }\n\n    }\n    return new String(buffer, 0, i);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7b91922b55d15444d554721b352861d028eb8278":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7b91922b55d15444d554721b352861d028eb8278"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}