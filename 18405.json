{"path":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","commits":[{"id":"49b842d0a60b2a5508c9384bcb1b3c484db0fa83","date":1166055345,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   */\n  public static SolrQueryRequest getPingQueryRequest(SolrCore core) {\n\n    // TODO: check for nested tags and parse as a named list instead\n    String urlSnippet = config.get(\"admin/pingQuery\", \"\").trim();\n    \n    StringTokenizer qtokens = new StringTokenizer(urlSnippet,\"&\");\n    String tok;\n    NamedList params = new NamedList();\n    while (qtokens.hasMoreTokens()) {\n      tok = qtokens.nextToken();\n      String[] split = tok.split(\"=\", 2);\n      params.add(split[0], split[1]);\n    }\n    return new LocalSolrQueryRequest(core, params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   */\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","sourceOld":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   */\n  public static SolrQueryRequest getPingQueryRequest(SolrCore core) {\n\n    // TODO: check for nested tags and parse as a named list instead\n    String urlSnippet = config.get(\"admin/pingQuery\", \"\").trim();\n    \n    StringTokenizer qtokens = new StringTokenizer(urlSnippet,\"&\");\n    String tok;\n    NamedList params = new NamedList();\n    while (qtokens.hasMoreTokens()) {\n      tok = qtokens.nextToken();\n      String[] split = tok.split(\"=\", 2);\n      params.add(split[0], split[1]);\n    }\n    return new LocalSolrQueryRequest(core, params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec","date":1194636258,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","sourceOld":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   */\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750ae94a53c48546afa6bcf9b172428e09933da0","date":1216334670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @deprecated use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","sourceOld":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e89d633f82354315faf28f43c9a5bc0b1c9a335","date":1240957428,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @deprecated use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    if(pingQueryParams.size() == 0) {\n      throw new IllegalStateException\n        (\"<pingQuery> not configured (consider registering \" +\n         \"PingRequestHandler with the name '/admin/ping' instead)\");\n    }\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","sourceOld":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @deprecated use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#getPingQueryRequest(SolrCore).mjava","sourceNew":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @deprecated use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    if(pingQueryParams.size() == 0) {\n      throw new IllegalStateException\n        (\"<pingQuery> not configured (consider registering \" +\n         \"PingRequestHandler with the name '/admin/ping' instead)\");\n    }\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","sourceOld":"  /**\n   * Returns a Request object based on the admin/pingQuery section\n   * of the Solr config file.\n   * \n   * @deprecated use {@link PingRequestHandler} instead \n   */\n  @Deprecated\n  public SolrQueryRequest getPingQueryRequest(SolrCore core) {\n    if(pingQueryParams.size() == 0) {\n      throw new IllegalStateException\n        (\"<pingQuery> not configured (consider registering \" +\n         \"PingRequestHandler with the name '/admin/ping' instead)\");\n    }\n    return new LocalSolrQueryRequest(core, pingQueryParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["49b842d0a60b2a5508c9384bcb1b3c484db0fa83"],"2e89d633f82354315faf28f43c9a5bc0b1c9a335":["750ae94a53c48546afa6bcf9b172428e09933da0"],"750ae94a53c48546afa6bcf9b172428e09933da0":["8ddf95246f079e162fbc4ef8f9d5cda419ff7eec"],"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2e89d633f82354315faf28f43c9a5bc0b1c9a335"],"49b842d0a60b2a5508c9384bcb1b3c484db0fa83":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["8ddf95246f079e162fbc4ef8f9d5cda419ff7eec"],"2e89d633f82354315faf28f43c9a5bc0b1c9a335":["ad94625fb8d088209f46650c8097196fec67f00c"],"750ae94a53c48546afa6bcf9b172428e09933da0":["2e89d633f82354315faf28f43c9a5bc0b1c9a335"],"8ddf95246f079e162fbc4ef8f9d5cda419ff7eec":["750ae94a53c48546afa6bcf9b172428e09933da0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["49b842d0a60b2a5508c9384bcb1b3c484db0fa83"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"49b842d0a60b2a5508c9384bcb1b3c484db0fa83":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}