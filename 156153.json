{"path":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","commits":[{"id":"e7a005111928c661ab5d236ed6a3a079b438d2cf","date":1205411670,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7","date":1214673815,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  /**\n   * Asserts that the content of two index readers equal each other.\n   *\n   * @param aprioriIndex the index that is known to be correct\n   * @param testIndex    the index that is supposed to equals the apriori index.\n   * @throws Exception\n   */\n  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84b845bea7b5e25a9e616e0b2b032633489df98b","date":1214679132,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n      aprioriReader.norms((String) field, aprioriNorms, 10);\n\n      testNorms = new byte[testReader.maxDoc() + 10];\n      testReader.norms((String) field, testNorms, 10);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (!aprioriReader.getDisableFakeNorms()) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc()];\n      aprioriReader.norms((String) field, aprioriNorms, 0);\n\n      testNorms = new byte[testReader.maxDoc()];\n      testReader.norms((String) field, testNorms, 0);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n\n      // test norms as used by multireader\n\n      aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n      aprioriReader.norms((String) field, aprioriNorms, 10);\n\n      testNorms = new byte[testReader.maxDoc() + 10];\n      testReader.norms((String) field, testNorms, 10);\n\n      assertEquals(aprioriNorms.length, testNorms.length);\n\n      for (int i = 0; i < aprioriNorms.length; i++) {\n        assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (!aprioriReader.getDisableFakeNorms()) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (!aprioriReader.getDisableFakeNorms()) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (!aprioriReader.getDisableFakeNorms()) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term enumeration seeking\n\n    aprioriTermEnum = aprioriReader.terms();\n\n    TermEnum aprioriTermEnumSeeker = aprioriReader.terms();\n    TermEnum testTermEnumSeeker = testReader.terms();\n\n    while (aprioriTermEnum.next()) {\n      if (aprioriTermEnumSeeker.skipTo(aprioriTermEnum.term())) {\n        assertTrue(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n        assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n      } else {\n        assertFalse(testTermEnumSeeker.skipTo(aprioriTermEnum.term()));\n      }\n    }\n\n    aprioriTermEnum.close();\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // skip to non existing terms\n\n    aprioriTermEnumSeeker = aprioriReader.terms();\n    testTermEnumSeeker = testReader.terms();\n\n    aprioriTermEnum = aprioriReader.terms();\n    aprioriTermEnum.next();\n    Term nonExistingTerm = new Term(aprioriTermEnum.term().field(), \"bzzzzoo993djdj380sdf\");\n    aprioriTermEnum.close();\n\n    assertEquals(aprioriTermEnumSeeker.skipTo(nonExistingTerm), testTermEnumSeeker.skipTo(nonExistingTerm));\n    assertEquals(aprioriTermEnumSeeker.term(), testTermEnumSeeker.term());\n\n    aprioriTermEnumSeeker.close();\n    testTermEnumSeeker.close();\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c41356c8a19fd7493940c7a1d798ede2fe03ddf8","date":1260481087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["84b845bea7b5e25a9e616e0b2b032633489df98b"],"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["4256bc1b3c94786287ccdfc751230374521843cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"4256bc1b3c94786287ccdfc751230374521843cf":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"84b845bea7b5e25a9e616e0b2b032633489df98b":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"]},"commit2Childs":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["4256bc1b3c94786287ccdfc751230374521843cf"],"c41356c8a19fd7493940c7a1d798ede2fe03ddf8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"317c809622a7a74e9257dd0eaf0b7c4dd7399bc7":["84b845bea7b5e25a9e616e0b2b032633489df98b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7a005111928c661ab5d236ed6a3a079b438d2cf"],"e7a005111928c661ab5d236ed6a3a079b438d2cf":["317c809622a7a74e9257dd0eaf0b7c4dd7399bc7"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["c41356c8a19fd7493940c7a1d798ede2fe03ddf8"],"4256bc1b3c94786287ccdfc751230374521843cf":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"84b845bea7b5e25a9e616e0b2b032633489df98b":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}