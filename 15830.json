{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(PlanetModel,double[],double[],double).mjava","commits":[{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(PlanetModel,double[],double[],double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(double[],double[],double).mjava","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final PlanetModel planetModel, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(planetModel, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(planetModel, planetModel.fromMeters(pathWidthMeters), points);\n  }\n\n","sourceOld":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(PlanetModel.WGS84, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, fromMeters(pathWidthMeters), points);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66817073345fa8e6416a3654a58a741c14745c40","date":1583770075,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(PlanetModel,double[],double[],double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DUtil#fromPath(PlanetModel,double[],double[],double).mjava","sourceNew":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final PlanetModel planetModel, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(planetModel, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    double radiusRadians = pathWidthMeters / (planetModel.getMeanRadius() * planetModel.xyScaling);\n    return GeoPathFactory.makeGeoPath(planetModel, radiusRadians, points);\n  }\n\n","sourceOld":"  /**\n   * Convert input parameters to a path.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return the path.\n   */\n  static GeoPath fromPath(final PlanetModel planetModel, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    if (pathLatitudes.length != pathLongitudes.length) {\n      throw new IllegalArgumentException(\"same number of latitudes and longitudes required\");\n    }\n    final GeoPoint[] points = new GeoPoint[pathLatitudes.length];\n    for (int i = 0; i < pathLatitudes.length; i++) {\n      final double latitude = pathLatitudes[i];\n      final double longitude = pathLongitudes[i];\n      GeoUtils.checkLatitude(latitude);\n      GeoUtils.checkLongitude(longitude);\n      points[i] = new GeoPoint(planetModel, fromDegrees(latitude), fromDegrees(longitude));\n    }\n    return GeoPathFactory.makeGeoPath(planetModel, planetModel.fromMeters(pathWidthMeters), points);\n  }\n\n","bugFix":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66817073345fa8e6416a3654a58a741c14745c40":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66817073345fa8e6416a3654a58a741c14745c40"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"66817073345fa8e6416a3654a58a741c14745c40":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["66817073345fa8e6416a3654a58a741c14745c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}