{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    String message = null;\n    while (maxCounter-- > 0) {\n      final NamedList r = sendRequest(params);\n      final NamedList status = (NamedList) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return message;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    String message = null;\n    while (maxCounter-- > 0) {\n      final NamedList r = sendRequest(params);\n      final NamedList status = (NamedList) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return message;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    String message = null;\n    while (maxCounter-- > 0) {\n      final NamedList r = sendRequest(params);\n      final NamedList status = (NamedList) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return message;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    String message = null;\n    while (maxCounter-- > 0) {\n      final NamedList r = sendRequest(params);\n      final NamedList status = (NamedList) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return message;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestRequestStatusCollectionAPI#sendStatusRequestWithRetry(ModifiableSolrParams,int).mjava","sourceNew":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private NamedList<Object> sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    NamedList<Object> r = null;\n    while (maxCounter-- > 0) {\n      r = sendRequest(params);\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<Object> status = (NamedList<Object>) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return r;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Helper method to send a status request with specific retry limit and return\n   * the message/null from the success response.\n   */\n  private String sendStatusRequestWithRetry(ModifiableSolrParams params, int maxCounter)\n      throws SolrServerException, IOException{\n    String message = null;\n    while (maxCounter-- > 0) {\n      final NamedList r = sendRequest(params);\n      final NamedList status = (NamedList) r.get(\"status\");\n      final RequestStatusState state = RequestStatusState.fromKey((String) status.get(\"state\"));\n      message = (String) status.get(\"msg\");\n\n      if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n        return message;\n      }\n\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n      }\n\n    }\n    // Return last state?\n    return message;\n  }\n\n","bugFix":["3088cdaa24ffe3ef44713ac9484114bd56eca2af","058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["69e6520a21709190413a63084ed135271aab1a7c"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}