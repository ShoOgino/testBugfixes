{"path":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","commits":[{"id":"8560794cda5bcd510c60e38ed553e9c5a6204983","date":1196807382,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"/dev/null","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"appendPostings\".equals(trace[i].getMethodName()) && count++ == 30) {\n            doFail = false;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9a0deca56efc5191d6b3c41047fd538f3fae1d8","date":1198156049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.DocumentsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()) && count++ == 30) {\n            doFail = false;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"appendPostings\".equals(trace[i].getMethodName()) && count++ == 30) {\n            doFail = false;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.DocumentsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.DocumentsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()) && count++ == 30) {\n            doFail = false;\n            throw new IOException(\"now failing during flush\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.DocumentsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyOnFlush#eval(MockRAMDirectory).mjava","sourceNew":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockRAMDirectory dir)  throws IOException {\n      if (doFail) {\n        StackTraceElement[] trace = new Exception().getStackTrace();\n        boolean sawAppend = false;\n        boolean sawFlush = false;\n        for (int i = 0; i < trace.length; i++) {\n          if (\"org.apache.lucene.index.FreqProxTermsWriter\".equals(trace[i].getClassName()) && \"appendPostings\".equals(trace[i].getMethodName()))\n            sawAppend = true;\n          if (\"doFlush\".equals(trace[i].getMethodName()))\n            sawFlush = true;\n        }\n\n        if (sawAppend && sawFlush && count++ >= 30) {\n          doFail = false;\n          throw new IOException(\"now failing during flush\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["5350389bf83287111f7760b9e3db3af8e3648474"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"8560794cda5bcd510c60e38ed553e9c5a6204983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5350389bf83287111f7760b9e3db3af8e3648474":["e82780afe6097066eb5befb86e9432f077667e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c9a0deca56efc5191d6b3c41047fd538f3fae1d8":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"8560794cda5bcd510c60e38ed553e9c5a6204983":["c9a0deca56efc5191d6b3c41047fd538f3fae1d8"],"e82780afe6097066eb5befb86e9432f077667e3d":["5350389bf83287111f7760b9e3db3af8e3648474"],"5350389bf83287111f7760b9e3db3af8e3648474":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}