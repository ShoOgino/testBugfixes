{"path":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n      res.add(FACETS, nl);\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd87688d42377075c163529dd14ecd7827f9f45f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd87688d42377075c163529dd14ecd7827f9f45f","date":1345059867,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n      res.add(FACETS, nl);\n    }\n    return res;\n  }\n\n","bugFix":["11982a7b6834a8571852448312db4624c32990b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n      res.add(FACETS, nl);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n      res.add(FACETS, nl);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<Object>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<NamedList<?>>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<NamedList<?>>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n\n      // add the facet stats\n     NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n     for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n       NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n       nl.add(entry.getKey(), nl2);\n       for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n         nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n       }\n     }\n     res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n\n      // add the facet stats\n     NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n     for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n       NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n       nl.add(entry.getKey(), nl2);\n       for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n         nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n       }\n     }\n     res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    res.add(\"min\", min);\n    res.add(\"max\", max);\n    res.add(\"count\", count);\n    res.add(\"missing\", missing);\n    if (calcDistinct) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n\n    addTypeSpecificStats(res);\n\n     // add the facet stats\n    NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n    for (Map.Entry<String, Map<String, StatsValues>> entry : facets.entrySet()) {\n      NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n      nl.add(entry.getKey(), nl2);\n      for (Map.Entry<String, StatsValues> e2 : entry.getValue().entrySet()) {\n        nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n      }\n    }\n    res.add(FACETS, nl);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a4e2c829188fb99886a64558664d79c9ac0fdf1","date":1431021538,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e7062fc1cf235b04a88adfc21dc68e040c82561","date":1431110643,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.calcdistinct)) {\n      res.add(\"distinctValues\", distinctValues);\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":"  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/AbstractStatsValues[StatsValuesFactory]#getStatsValues().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<?> getStatsValues() {\n    NamedList<Object> res = new SimpleOrderedMap<>();\n\n    if (statsField.includeInResponse(Stat.min)) {\n      res.add(\"min\", min);\n    }\n    if (statsField.includeInResponse(Stat.max)) {\n      res.add(\"max\", max);\n    }\n    if (statsField.includeInResponse(Stat.count)) {\n      res.add(\"count\", count);\n    }\n    if (statsField.includeInResponse(Stat.missing)) {\n      res.add(\"missing\", missing);\n    }\n    if (statsField.includeInResponse(Stat.distinctValues)) {\n      res.add(\"distinctValues\", distinctValues);\n    }\n    if (statsField.includeInResponse(Stat.countDistinct)) {\n      res.add(\"countDistinct\", countDistinct);\n    }\n    if (statsField.includeInResponse(Stat.cardinality)) {\n      if (statsField.getIsShard()) {\n        res.add(\"cardinality\", hll.toBytes());\n      } else {\n        res.add(\"cardinality\", hll.cardinality());\n      }\n    }\n    \n    addTypeSpecificStats(res);\n    \n    if (!facets.isEmpty()) {\n      \n      // add the facet stats\n      NamedList<NamedList<?>> nl = new SimpleOrderedMap<>();\n      for (Map.Entry<String,Map<String,StatsValues>> entry : facets.entrySet()) {\n        NamedList<NamedList<?>> nl2 = new SimpleOrderedMap<>();\n        nl.add(entry.getKey(), nl2);\n        for (Map.Entry<String,StatsValues> e2 : entry.getValue().entrySet()) {\n          nl2.add(e2.getKey(), e2.getValue().getStatsValues());\n        }\n      }\n\n      res.add(FACETS, nl);\n    }\n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["fd87688d42377075c163529dd14ecd7827f9f45f","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bf795ee457272965bd751f513787065bbf0a650a"],"b94236357aaa22b76c10629851fe4e376e0cea82":["2e7062fc1cf235b04a88adfc21dc68e040c82561","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["11982a7b6834a8571852448312db4624c32990b5","fd87688d42377075c163529dd14ecd7827f9f45f"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["2e7062fc1cf235b04a88adfc21dc68e040c82561"],"bf795ee457272965bd751f513787065bbf0a650a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"fd87688d42377075c163529dd14ecd7827f9f45f":["11982a7b6834a8571852448312db4624c32990b5"],"2e7062fc1cf235b04a88adfc21dc68e040c82561":["4a4e2c829188fb99886a64558664d79c9ac0fdf1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1002283cfd29923d517db7c33e07bb54aac7acd4"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["11982a7b6834a8571852448312db4624c32990b5","fd87688d42377075c163529dd14ecd7827f9f45f"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7530de27b87b961b51f01bd1299b7004d46e8823","bf795ee457272965bd751f513787065bbf0a650a"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["fd87688d42377075c163529dd14ecd7827f9f45f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"4a4e2c829188fb99886a64558664d79c9ac0fdf1":["2e7062fc1cf235b04a88adfc21dc68e040c82561"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bf795ee457272965bd751f513787065bbf0a650a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"fd87688d42377075c163529dd14ecd7827f9f45f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","7530de27b87b961b51f01bd1299b7004d46e8823"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["4a4e2c829188fb99886a64558664d79c9ac0fdf1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"2e7062fc1cf235b04a88adfc21dc68e040c82561":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bf795ee457272965bd751f513787065bbf0a650a","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"11982a7b6834a8571852448312db4624c32990b5":["616c1830142ff5c1ddedec1ed898733b73c8e23b","fd87688d42377075c163529dd14ecd7827f9f45f","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}