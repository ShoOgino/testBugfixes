{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/OffsetsEnum.OfMatchesIteratorWithSubs#nextWhenMatchesIterator(OfMatchesIterator).mjava","commits":[{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/OffsetsEnum.OfMatchesIteratorWithSubs#nextWhenMatchesIterator(OfMatchesIterator).mjava","pathOld":"/dev/null","sourceNew":"    private void nextWhenMatchesIterator(OfMatchesIterator miOE) throws IOException {\n      boolean isHead = miOE == pendingQueue.peek();\n      MatchesIterator subMatches = miOE.matchesIterator.getSubMatches();\n      if (subMatches != null) {\n        // remove this miOE from the queue, add it's submatches, next() it, then re-enqueue it\n        if (isHead) {\n          pendingQueue.poll(); // remove\n        }\n\n        enqueueCachedMatches(subMatches);\n\n        if (miOE.nextPosition()) {\n          pendingQueue.add(miOE);\n          assert pendingQueue.peek() != miOE; // miOE should follow cached entries\n        }\n\n      } else { // else has no subMatches.  It will stay enqueued.\n        if (!isHead) {\n          pendingQueue.add(miOE);\n        } // else it's *already* in pendingQueue\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}