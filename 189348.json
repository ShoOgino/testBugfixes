{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,Map[String,BinaryDocValuesFieldUpdates],TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]]).mjava","sourceNew":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private void handleBinaryDVUpdates(FieldInfos infos, Map<String,BinaryDocValuesFieldUpdates> updates, \n      TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader, Map<Integer,Set<String>> fieldFiles) throws IOException {\n    for (Entry<String,BinaryDocValuesFieldUpdates> e : updates.entrySet()) {\n      final String field = e.getKey();\n      final BinaryDocValuesFieldUpdates fieldUpdates = e.getValue();\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final long estUpdatesSize = fieldUpdates.ramBytesPerDoc() * info.info.maxDoc();\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), estUpdatesSize));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              final BinaryDocValuesFieldUpdates.Iterator updatesIter = fieldUpdates.iterator();\n              updatesIter.reset();\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,Map[String,BinaryDocValuesFieldUpdates],TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]]).mjava","sourceNew":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private void handleBinaryDVUpdates(FieldInfos infos, Map<String,BinaryDocValuesFieldUpdates> updates, \n      TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader, Map<Integer,Set<String>> fieldFiles) throws IOException {\n    for (Entry<String,BinaryDocValuesFieldUpdates> e : updates.entrySet()) {\n      final String field = e.getKey();\n      final BinaryDocValuesFieldUpdates fieldUpdates = e.getValue();\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final long estUpdatesSize = fieldUpdates.ramBytesPerDoc() * info.info.maxDoc();\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), estUpdatesSize));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              final BinaryDocValuesFieldUpdates.Iterator updatesIter = fieldUpdates.iterator();\n              updatesIter.reset();\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee0394b8176abd7c90a4be8c05465be1879db79","date":1522842314,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n        pendingDeletes.onDocValuesUpdate(fieldInfo, updatesToApply);\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              final int maxDoc = reader.maxDoc();\n\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n        pendingDeletes.onDocValuesUpdate(fieldInfo);\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n        pendingDeletes.onDocValuesUpdate(fieldInfo, updatesToApply);\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c088100f7646827db17ea080925f7a0a916b1cd","date":1524662254,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#handleBinaryDVUpdates(FieldInfos,TrackingDirectoryWrapper,DocValuesFormat,SegmentReader,Map[Integer,Set[String]],long,InfoStream).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"synthetic-access\")\n  private synchronized void handleBinaryDVUpdates(FieldInfos infos,\n                                                  TrackingDirectoryWrapper dir, DocValuesFormat dvFormat, final SegmentReader reader,\n                                                  Map<Integer,Set<String>> fieldFiles, long maxDelGen, InfoStream infoStream) throws IOException {\n    for (Entry<String,List<DocValuesFieldUpdates>> ent : pendingDVUpdates.entrySet()) {\n      final String field = ent.getKey();\n      final List<DocValuesFieldUpdates> updates = ent.getValue();\n      if (updates.get(0).type != DocValuesType.BINARY) {\n        continue;\n      }\n\n      final List<DocValuesFieldUpdates> updatesToApply = new ArrayList<>();\n      long bytes = 0;\n      for(DocValuesFieldUpdates update : updates) {\n        if (update.delGen <= maxDelGen) {\n          // safe to apply this one\n          bytes += update.ramBytesUsed();\n          updatesToApply.add(update);\n        }\n      }\n      if (updatesToApply.isEmpty()) {\n        // nothing to apply yet\n        continue;\n      }\n\n      if (infoStream.isEnabled(\"BD\")) {\n        infoStream.message(\"BD\", String.format(Locale.ROOT,\n                                               \"now write %d pending binary DV updates for field=%s, seg=%s, bytes=%.3fMB\",\n                                               updatesToApply.size(),\n                                               field,\n                                               info,\n                                               bytes/1024./1024.));\n      }\n\n      final long nextDocValuesGen = info.getNextDocValuesGen();\n      final String segmentSuffix = Long.toString(nextDocValuesGen, Character.MAX_RADIX);\n      final IOContext updatesContext = new IOContext(new FlushInfo(info.info.maxDoc(), bytes));\n      final FieldInfo fieldInfo = infos.fieldInfo(field);\n      assert fieldInfo != null;\n      fieldInfo.setDocValuesGen(nextDocValuesGen);\n      final FieldInfos fieldInfos = new FieldInfos(new FieldInfo[] { fieldInfo });\n      // separately also track which files were created for this gen\n      final TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);\n      final SegmentWriteState state = new SegmentWriteState(null, trackingDir, info.info, fieldInfos, null, updatesContext, segmentSuffix);\n      try (final DocValuesConsumer fieldsConsumer = dvFormat.fieldsConsumer(state)) {\n        // write the binary updates to a new gen'd docvalues file\n        pendingDeletes.onDocValuesUpdate(fieldInfo);\n        fieldsConsumer.addBinaryField(fieldInfo, new EmptyDocValuesProducer() {\n            @Override\n            public BinaryDocValues getBinary(FieldInfo fieldInfoIn) throws IOException {\n              if (fieldInfoIn != fieldInfo) {\n                throw new IllegalArgumentException(\"wrong fieldInfo\");\n              }\n              DocValuesFieldUpdates.Iterator[] subs = new DocValuesFieldUpdates.Iterator[updatesToApply.size()];\n              for(int i=0;i<subs.length;i++) {\n                subs[i] = updatesToApply.get(i).iterator();\n              }\n\n              final DocValuesFieldUpdates.Iterator updatesIter = DocValuesFieldUpdates.mergedIterator(subs);\n\n              final BinaryDocValues currentValues = reader.getBinaryDocValues(field);\n\n              // Merge sort of the original doc values with updated doc values:\n              return new BinaryDocValues() {\n                // merged docID\n                private int docIDOut = -1;\n\n                // docID from our original doc values\n                private int docIDIn = -1;\n\n                // docID from our updates\n                private int updateDocID = -1;\n\n                private BytesRef value;\n\n                @Override\n                public int docID() {\n                  return docIDOut;\n                }\n\n                @Override\n                public int advance(int target) {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public boolean advanceExact(int target) throws IOException {\n                  throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public long cost() {\n                  return currentValues.cost();\n                }\n\n                @Override\n                public BytesRef binaryValue() {\n                  return value;\n                }\n\n                @Override\n                public int nextDoc() throws IOException {\n                  if (docIDIn == docIDOut) {\n                    if (currentValues == null) {\n                      docIDIn = NO_MORE_DOCS;\n                    } else {\n                      docIDIn = currentValues.nextDoc();\n                    }\n                  }\n                  if (updateDocID == docIDOut) {\n                    updateDocID = updatesIter.nextDoc();\n                  }\n                  if (docIDIn < updateDocID) {\n                    // no update to this doc\n                    docIDOut = docIDIn;\n                    value = currentValues.binaryValue();\n                  } else {\n                    docIDOut = updateDocID;\n                    if (docIDOut != NO_MORE_DOCS) {\n                      value = (BytesRef) updatesIter.value();\n                    }\n                  }\n                  return docIDOut;\n                }\n              };\n            }\n          });\n      }\n      info.advanceDocValuesGen();\n      assert !fieldFiles.containsKey(fieldInfo.number);\n      fieldFiles.put(fieldInfo.number, trackingDir.getCreatedFiles());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c088100f7646827db17ea080925f7a0a916b1cd":["36d13f271b6649357e07f71f7e46559479f69b5b"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c088100f7646827db17ea080925f7a0a916b1cd"]},"commit2Childs":{"4c088100f7646827db17ea080925f7a0a916b1cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5ee0394b8176abd7c90a4be8c05465be1879db79":["36d13f271b6649357e07f71f7e46559479f69b5b"],"36d13f271b6649357e07f71f7e46559479f69b5b":["4c088100f7646827db17ea080925f7a0a916b1cd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["5ee0394b8176abd7c90a4be8c05465be1879db79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}