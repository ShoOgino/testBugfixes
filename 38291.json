{"path":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","pathOld":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryId().mjava","sourceNew":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryId() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", null, minIP, F, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, null, T, F, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["8b20609f6fb2cd074bd08115b0c3280b9646af7c","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}