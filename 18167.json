{"path":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = r.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = r.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[r.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(new Field(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestThreadSafe#buildDir(Directory,int,int,int).mjava","sourceNew":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n                                                                TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        d.add(newField(\"f\"+i, sb.toString(), TextField.TYPE_STORED));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","sourceOld":"  void buildDir(Directory dir, int nDocs, int maxFields, int maxFieldLen) throws IOException {\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    for (int j=0; j<nDocs; j++) {\n      Document d = new Document();\n      int nFields = random.nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n        int flen = random.nextInt(maxFieldLen);\n        StringBuilder sb = new StringBuilder(\"^ \");\n        while (sb.length() < flen) sb.append(' ').append(words[random.nextInt(words.length)]);\n        sb.append(\" $\");\n        Field.Store store = Field.Store.YES;  // make random later\n        Field.Index index = Field.Index.ANALYZED;  // make random later\n        d.add(newField(\"f\"+i, sb.toString(), store, index));\n      }\n      iw.addDocument(d);\n    }\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}