{"path":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String,Reader).mjava","commits":[{"id":"8fc124c122e036588c7ea5159c03c3715fb80824","date":1252854522,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String,Reader).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String,CharStream).mjava","sourceNew":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   */\n  public static List<Token> split( Matcher matcher, String input, Reader stream )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( newToken( stream, match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( newToken( stream, input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( newToken( stream, match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","sourceOld":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   */\n  public static List<Token> split( Matcher matcher, String input, CharStream stream )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( newToken( stream, match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( newToken( stream, input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( newToken( stream, match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28e349236232860728fc91596fa4a1ec2c64bde6","date":1253259442,"type":4,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/analysis/PatternTokenizerFactory#split(Matcher,String,Reader).mjava","sourceNew":null,"sourceOld":"  /**\n   * This behaves just like String.split( ), but returns a list of Tokens\n   * rather then an array of strings\n   */\n  public static List<Token> split( Matcher matcher, String input, Reader stream )\n  {\n    int index = 0;\n    int lastNonEmptySize = Integer.MAX_VALUE;\n    ArrayList<Token> matchList = new ArrayList<Token>();\n\n    // Add segments before each match found\n    while(matcher.find()) {\n      String match = input.subSequence(index, matcher.start()).toString();\n      matchList.add( newToken( stream, match, index, matcher.start()) );\n      index = matcher.end();\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n\n    // If no match is found, return the full string\n    if (index == 0) {\n      matchList.add( newToken( stream, input, 0, input.length()) );\n    }\n    else { \n      String match = input.subSequence(index, input.length()).toString();\n      matchList.add( newToken( stream, match, index, input.length()) );\n      if( match.length() > 0 ) {\n        lastNonEmptySize = matchList.size();\n      }\n    }\n    \n    // Don't use trailing empty strings.  This behavior matches String.split();\n    if( lastNonEmptySize < matchList.size() ) {\n      return matchList.subList( 0, lastNonEmptySize );\n    }\n    return matchList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28e349236232860728fc91596fa4a1ec2c64bde6":["8fc124c122e036588c7ea5159c03c3715fb80824"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fc124c122e036588c7ea5159c03c3715fb80824":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28e349236232860728fc91596fa4a1ec2c64bde6":[],"8fc124c122e036588c7ea5159c03c3715fb80824":["28e349236232860728fc91596fa4a1ec2c64bde6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8fc124c122e036588c7ea5159c03c3715fb80824"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["28e349236232860728fc91596fa4a1ec2c64bde6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}