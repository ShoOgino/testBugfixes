{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new Payload((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d673420224c5154fd8d6f55d8230c36ac23783fd","date":1341692649,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes()));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(StandardCharsets.UTF_8)));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(StandardCharsets.UTF_8)));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(\"UTF-8\")));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.SimplePayloadFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (input.incrementToken()) {\n        payloadAttr.setPayload(new BytesRef((\"pos: \" + pos).getBytes(StandardCharsets.UTF_8)));\n        pos++;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"5eb2511ababf862ea11e10761c70ee560cd84510":["2acf500f78aa12b92e371fd89c719291986b6b90","7d89d7e4e5101347833eea558851bf4209218619"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["76fa9933adb0556e752e8af9734c4d0ae14622ff","d673420224c5154fd8d6f55d8230c36ac23783fd"],"7d89d7e4e5101347833eea558851bf4209218619":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"46d8ada1fff8d18cb197c38c7983225162599948":["76fa9933adb0556e752e8af9734c4d0ae14622ff","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d673420224c5154fd8d6f55d8230c36ac23783fd":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d673420224c5154fd8d6f55d8230c36ac23783fd","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","7d89d7e4e5101347833eea558851bf4209218619","46d8ada1fff8d18cb197c38c7983225162599948"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}