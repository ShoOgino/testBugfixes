{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a60ec39bd57efcc33334c405a8a63bdaefa512c","date":1305309033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.reusableTokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a60ec39bd57efcc33334c405a8a63bdaefa512c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["9454a6510e2db155fb01faa5c049b06ece95fab9","1a60ec39bd57efcc33334c405a8a63bdaefa512c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","1a60ec39bd57efcc33334c405a8a63bdaefa512c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69e043c521d4e8db770cc140c63f5ef51f03426a":["1a60ec39bd57efcc33334c405a8a63bdaefa512c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1a60ec39bd57efcc33334c405a8a63bdaefa512c":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","69e043c521d4e8db770cc140c63f5ef51f03426a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1a60ec39bd57efcc33334c405a8a63bdaefa512c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}