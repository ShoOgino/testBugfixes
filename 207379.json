{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionStateZnodeTest#testZkNodeLocation().mjava","commits":[{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":1,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionStateZnodeTest#testZkNodeLocation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionStateFormat2Test#testZkNodeLocation().mjava","sourceNew":"  @Test\n  public void testZkNodeLocation() throws Exception {\n\n    String collectionName = \"myExternColl\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Collection not created\", collectionName, (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));\n    assertTrue(\"Collection path does not exist\",\n        zkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n    Stat stat = new Stat();\n    zkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n\n    DocCollection c = getCollectionState(collectionName);\n\n    assertEquals(\"DocCollection version should equal the znode version\", stat.getVersion(), c.getZNodeVersion() );\n\n    // remove collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    waitForState(\"Collection not deleted\", collectionName, (n, coll) -> coll == null);\n\n    assertFalse(\"collection state should not exist\",\n        zkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  @Test\n  public void testZkNodeLocation() throws Exception {\n\n    String collectionName = \"myExternColl\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n    \n    waitForState(\"Collection not created\", collectionName, (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));\n    assertTrue(\"State Format 2 collection path does not exist\",\n        zkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n    Stat stat = new Stat();\n    zkClient().getData(ZkStateReader.getCollectionPath(collectionName), null, stat, true);\n\n    DocCollection c = getCollectionState(collectionName);\n\n    assertEquals(\"DocCollection version should equal the znode version\", stat.getVersion(), c.getZNodeVersion() );\n    assertTrue(\"DocCollection#getStateFormat() must be > 1\", c.getStateFormat() > 1);\n\n    // remove collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n    waitForState(\"Collection not deleted\", collectionName, (n, coll) -> coll == null);\n\n    assertFalse(\"collection state should not exist externally\",\n        zkClient().exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}