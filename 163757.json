{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a63520843c1d9af055af89fbaeb67eae848f28ae","date":1332870078,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      // make sure that the id is returned for correlation.\n      String fl = sreq.params.get(CommonParams.FL);\n      if (fl != null) {\n         fl = fl.trim();\n        // currently, \"score\" is synonymous with \"*,score\" so\n        // don't add \"id\" if the fl is empty or \"score\" or it would change the meaning.\n         if (fl.length()!=0 && !\"score\".equals(fl) && !\"*\".equals(fl)) {\n           sreq.params.set(CommonParams.FL, fl+','+uniqueField.getName());\n         }\n      }      \n\n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":["52c7a21951a44948544c782d645588d404cace61","a6c6e4e06160d2ad231072e8743988a623ab14c9","5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<String,Collection<ShardDoc>>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<ShardDoc>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<String>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  protected void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#createRetrieveDocs(ResponseBuilder).mjava","sourceNew":"  protected void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","sourceOld":"  private void createRetrieveDocs(ResponseBuilder rb) {\n\n    // TODO: in a system with nTiers > 2, we could be passed \"ids\" here\n    // unless those requests always go to the final destination shard\n\n    // for each shard, collect the documents for that shard.\n    HashMap<String, Collection<ShardDoc>> shardMap = new HashMap<>();\n    for (ShardDoc sdoc : rb.resultIds.values()) {\n      Collection<ShardDoc> shardDocs = shardMap.get(sdoc.shard);\n      if (shardDocs == null) {\n        shardDocs = new ArrayList<>();\n        shardMap.put(sdoc.shard, shardDocs);\n      }\n      shardDocs.add(sdoc);\n    }\n\n    SchemaField uniqueField = rb.req.getSchema().getUniqueKeyField();\n\n    // Now create a request for each shard to retrieve the stored fields\n    for (Collection<ShardDoc> shardDocs : shardMap.values()) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;\n\n      sreq.shards = new String[] {shardDocs.iterator().next().shard};\n\n      sreq.params = new ModifiableSolrParams();\n\n      // add original params\n      sreq.params.add( rb.req.getParams());\n\n      // no need for a sort, we already have order\n      sreq.params.remove(CommonParams.SORT);\n      sreq.params.remove(CursorMarkParams.CURSOR_MARK_PARAM);\n\n      // we already have the field sort values\n      sreq.params.remove(ResponseBuilder.FIELD_SORT_VALUES);\n\n      if(!rb.rsp.getReturnFields().wantsField(uniqueField.getName())) {\n        sreq.params.add(CommonParams.FL, uniqueField.getName());\n      }\n    \n      ArrayList<String> ids = new ArrayList<>(shardDocs.size());\n      for (ShardDoc shardDoc : shardDocs) {\n        // TODO: depending on the type, we may need more tha a simple toString()?\n        ids.add(shardDoc.id.toString());\n      }\n      sreq.params.add(ShardParams.IDS, StrUtils.join(ids, ','));\n\n      rb.addRequest(this, sreq);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"a63520843c1d9af055af89fbaeb67eae848f28ae":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a63520843c1d9af055af89fbaeb67eae848f28ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","35d59689803f4ad27f96148bb7c7167e373c6770"],"35d59689803f4ad27f96148bb7c7167e373c6770":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35d59689803f4ad27f96148bb7c7167e373c6770"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"a63520843c1d9af055af89fbaeb67eae848f28ae":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a63520843c1d9af055af89fbaeb67eae848f28ae"],"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}