{"path":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","commits":[{"id":"bb537081ae8ce706dd40a122f57a9e7b8a112be8","date":1411065946,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ParamSet#merge(NamedList,NamedList,NamedList,String,boolean).mjava","sourceNew":"  private static  void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if(first == null && second == null) return;\n    if(first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if(appends) {\n      if(second!=null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first)    {\n        Map.Entry<String,Object> e = (Map.Entry) o;\n        a.add(e.getKey() );\n      }\n      if(second!=null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if(sink.indexOf(name,0) >-1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name,nl);\n    }\n  }\n\n","sourceOld":"  private static  void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if(first == null && second == null) return;\n    if(first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if(appends) {\n      if(second!=null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first)    {\n        Map.Entry<String,Object> e = (Map.Entry) o;\n        a.add(e.getKey() );\n      }\n      if(second!=null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if(sink.indexOf(name,0) >-1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name,nl);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","sourceNew":"  private static void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if (first == null && second == null) return;\n    if (first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if (appends) {\n      if (second != null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first) {\n        Map.Entry<String, Object> e = (Map.Entry) o;\n        a.add(e.getKey());\n      }\n      if (second != null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if (sink.indexOf(name, 0) > -1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name, nl);\n    }\n  }\n\n","sourceOld":"  private static  void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if(first == null && second == null) return;\n    if(first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if(appends) {\n      if(second!=null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first)    {\n        Map.Entry<String,Object> e = (Map.Entry) o;\n        a.add(e.getKey() );\n      }\n      if(second!=null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if(sink.indexOf(name,0) >-1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name,nl);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/InitParams#merge(NamedList,NamedList,NamedList,String,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if (first == null && second == null) return;\n    if (first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if (appends) {\n      if (second != null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first) {\n        Map.Entry<String, Object> e = (Map.Entry) o;\n        a.add(e.getKey());\n      }\n      if (second != null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if (sink.indexOf(name, 0) > -1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name, nl);\n    }\n  }\n\n","sourceOld":"  private static void merge(NamedList first, NamedList second, NamedList sink, String name, boolean appends) {\n    if (first == null && second == null) return;\n    if (first == null) first = new NamedList();\n    NamedList nl = first.clone();\n    if (appends) {\n      if (second != null) nl.addAll(second);\n    } else {\n      Set<String> a = new HashSet<>();\n      Set<String> b = new HashSet<>();\n      for (Object o : first) {\n        Map.Entry<String, Object> e = (Map.Entry) o;\n        a.add(e.getKey());\n      }\n      if (second != null) {\n        for (Object o : second) {\n          Map.Entry<String, Object> e = (Map.Entry) o;\n          b.add(e.getKey());\n        }\n      }\n      for (String s : b) {\n        if (a.contains(s)) continue;\n        for (Object v : second.getAll(s)) nl.add(s, v);\n      }\n    }\n    if (sink.indexOf(name, 0) > -1) {\n      sink.setVal(sink.indexOf(name, 0), nl);\n    } else {\n      sink.add(name, nl);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"bb537081ae8ce706dd40a122f57a9e7b8a112be8":["2330174b38007b9942205a2679db9ddffe35af89"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2330174b38007b9942205a2679db9ddffe35af89":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb537081ae8ce706dd40a122f57a9e7b8a112be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}