{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/distance/DistanceUtils#distSquaredCartesian(double[],double[]).mjava","sourceNew":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * The square of the cartesian Distance.  Not really a distance, but useful if all that matters is\n   * comparing the result to another one.\n   *\n   * @param vec1 The first point\n   * @param vec2 The second point\n   * @return The squared cartesian distance\n   */\n  public static double distSquaredCartesian(double[] vec1, double[] vec2) {\n    double result = 0;\n    for (int i = 0; i < vec1.length; i++) {\n      double v = vec1[i] - vec2[i];\n      result += v * v;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}