{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#dedupAndEncode(IntsRef).mjava","commits":[{"id":"7554009c97f9365492660c1df175b6349f7ec05c","date":1384886154,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#dedupAndEncode(IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetIndexWriter#dedupAndEncode(IntsRef).mjava","sourceNew":"  /** Encodes ordinals into a BytesRef; expert: subclass can\n   *  override this to change encoding. */\n  protected BytesRef dedupAndEncode(IntsRef ordinals) {\n    Arrays.sort(ordinals.ints, ordinals.offset, ordinals.length);\n    byte[] bytes = new byte[5*ordinals.length];\n    int lastOrd = -1;\n    int upto = 0;\n    for(int i=0;i<ordinals.length;i++) {\n      int ord = ordinals.ints[ordinals.offset+i];\n      // ord could be == lastOrd, so we must dedup:\n      if (ord > lastOrd) {\n        int delta;\n        if (lastOrd == -1) {\n          delta = ord;\n        } else {\n          delta = ord - lastOrd;\n        }\n        if ((delta & ~0x7F) == 0) {\n          bytes[upto] = (byte) delta;\n          upto++;\n        } else if ((delta & ~0x3FFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 1] = (byte) (delta & 0x7F);\n          upto += 2;\n        } else if ((delta & ~0x1FFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 2] = (byte) (delta & 0x7F);\n          upto += 3;\n        } else if ((delta & ~0xFFFFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 3] = (byte) (delta & 0x7F);\n          upto += 4;\n        } else {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xF0000000) >> 28));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 3] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 4] = (byte) (delta & 0x7F);\n          upto += 5;\n        }\n        lastOrd = ord;\n      }\n    }\n    return new BytesRef(bytes, 0, upto);\n  }\n\n","sourceOld":"  // nocommit open this up\n  /** We can open this up if/when we really need\n   *  pluggability on the encoding. */\n  private final BytesRef dedupAndEncode(IntsRef ordinals) {\n    Arrays.sort(ordinals.ints, ordinals.offset, ordinals.length);\n    byte[] bytes = new byte[5*ordinals.length];\n    int lastOrd = -1;\n    int upto = 0;\n    for(int i=0;i<ordinals.length;i++) {\n      int ord = ordinals.ints[ordinals.offset+i];\n      // ord could be == lastOrd, so we must dedup:\n      if (ord > lastOrd) {\n        int delta;\n        if (lastOrd == -1) {\n          delta = ord;\n        } else {\n          delta = ord - lastOrd;\n        }\n        if ((delta & ~0x7F) == 0) {\n          bytes[upto] = (byte) delta;\n          upto++;\n        } else if ((delta & ~0x3FFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 1] = (byte) (delta & 0x7F);\n          upto += 2;\n        } else if ((delta & ~0x1FFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 2] = (byte) (delta & 0x7F);\n          upto += 3;\n        } else if ((delta & ~0xFFFFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 3] = (byte) (delta & 0x7F);\n          upto += 4;\n        } else {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xF0000000) >> 28));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 3] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 4] = (byte) (delta & 0x7F);\n          upto += 5;\n        }\n        lastOrd = ord;\n      }\n    }\n    return new BytesRef(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#dedupAndEncode(IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#dedupAndEncode(IntsRef).mjava","sourceNew":"  /** Encodes ordinals into a BytesRef; expert: subclass can\n   *  override this to change encoding. */\n  protected BytesRef dedupAndEncode(IntsRef ordinals) {\n    Arrays.sort(ordinals.ints, ordinals.offset, ordinals.length);\n    byte[] bytes = new byte[5*ordinals.length];\n    int lastOrd = -1;\n    int upto = 0;\n    for(int i=0;i<ordinals.length;i++) {\n      int ord = ordinals.ints[ordinals.offset+i];\n      // ord could be == lastOrd, so we must dedup:\n      if (ord > lastOrd) {\n        int delta;\n        if (lastOrd == -1) {\n          delta = ord;\n        } else {\n          delta = ord - lastOrd;\n        }\n        if ((delta & ~0x7F) == 0) {\n          bytes[upto] = (byte) delta;\n          upto++;\n        } else if ((delta & ~0x3FFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 1] = (byte) (delta & 0x7F);\n          upto += 2;\n        } else if ((delta & ~0x1FFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 2] = (byte) (delta & 0x7F);\n          upto += 3;\n        } else if ((delta & ~0xFFFFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 3] = (byte) (delta & 0x7F);\n          upto += 4;\n        } else {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xF0000000) >> 28));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 3] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 4] = (byte) (delta & 0x7F);\n          upto += 5;\n        }\n        lastOrd = ord;\n      }\n    }\n    return new BytesRef(bytes, 0, upto);\n  }\n\n","sourceOld":"  /** Encodes ordinals into a BytesRef; expert: subclass can\n   *  override this to change encoding. */\n  protected BytesRef dedupAndEncode(IntsRef ordinals) {\n    Arrays.sort(ordinals.ints, ordinals.offset, ordinals.length);\n    byte[] bytes = new byte[5*ordinals.length];\n    int lastOrd = -1;\n    int upto = 0;\n    for(int i=0;i<ordinals.length;i++) {\n      int ord = ordinals.ints[ordinals.offset+i];\n      // ord could be == lastOrd, so we must dedup:\n      if (ord > lastOrd) {\n        int delta;\n        if (lastOrd == -1) {\n          delta = ord;\n        } else {\n          delta = ord - lastOrd;\n        }\n        if ((delta & ~0x7F) == 0) {\n          bytes[upto] = (byte) delta;\n          upto++;\n        } else if ((delta & ~0x3FFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 1] = (byte) (delta & 0x7F);\n          upto += 2;\n        } else if ((delta & ~0x1FFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 2] = (byte) (delta & 0x7F);\n          upto += 3;\n        } else if ((delta & ~0xFFFFFFF) == 0) {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 3] = (byte) (delta & 0x7F);\n          upto += 4;\n        } else {\n          bytes[upto] = (byte) (0x80 | ((delta & 0xF0000000) >> 28));\n          bytes[upto + 1] = (byte) (0x80 | ((delta & 0xFE00000) >> 21));\n          bytes[upto + 2] = (byte) (0x80 | ((delta & 0x1FC000) >> 14));\n          bytes[upto + 3] = (byte) (0x80 | ((delta & 0x3F80) >> 7));\n          bytes[upto + 4] = (byte) (delta & 0x7F);\n          upto += 5;\n        }\n        lastOrd = ord;\n      }\n    }\n    return new BytesRef(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7554009c97f9365492660c1df175b6349f7ec05c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["7554009c97f9365492660c1df175b6349f7ec05c"]},"commit2Childs":{"7554009c97f9365492660c1df175b6349f7ec05c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7554009c97f9365492660c1df175b6349f7ec05c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ae75def1e2525383b6e1397ed97c44387da9941c":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}