{"path":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings(\"unchecked\")\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @Override\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500a89755c0c3953ca1886b5abb653b8cef8e299","date":1487933004,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD);\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n\n      // Tie break: earlier shard wins\n      if (first.shardIndex < second.shardIndex) {\n        //System.out.println(\"    return tb true\");\n        return true;\n      } else if (first.shardIndex > second.shardIndex) {\n        //System.out.println(\"    return tb false\");\n        return false;\n      } else {\n        // Tie break in same shard: resolve however the\n        // shard had resolved it:\n        //System.out.println(\"    return tb \" + (first.hitIndex < second.hitIndex));\n        assert first.hitIndex != second.hitIndex;\n        return first.hitIndex < second.hitIndex;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36510a8e3c1ec60d366b45f8f716e9dc47589661","date":1561989412,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD, tieBreaker);\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4f6b0fb6f08ac48f438f03002a283a63cb9992","date":1561992803,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD);\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD, tieBreaker);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fccd4a691aac1aff06ab8110d8693514a34160c3","date":1562092518,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopDocs.MergeSortQueue#lessThan(ShardRef,ShardRef).mjava","sourceNew":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD, tieBreaker);\n    }\n\n","sourceOld":"    // Returns true if first is < second\n    @Override\n    public boolean lessThan(ShardRef first, ShardRef second) {\n      assert first != second;\n      final FieldDoc firstFD = (FieldDoc) shardHits[first.shardIndex][first.hitIndex];\n      final FieldDoc secondFD = (FieldDoc) shardHits[second.shardIndex][second.hitIndex];\n      //System.out.println(\"  lessThan:\\n     first=\" + first + \" doc=\" + firstFD.doc + \" score=\" + firstFD.score + \"\\n    second=\" + second + \" doc=\" + secondFD.doc + \" score=\" + secondFD.score);\n\n      for(int compIDX=0;compIDX<comparators.length;compIDX++) {\n        final FieldComparator comp = comparators[compIDX];\n        //System.out.println(\"    cmp idx=\" + compIDX + \" cmp1=\" + firstFD.fields[compIDX] + \" cmp2=\" + secondFD.fields[compIDX] + \" reverse=\" + reverseMul[compIDX]);\n\n        final int cmp = reverseMul[compIDX] * comp.compareValues(firstFD.fields[compIDX], secondFD.fields[compIDX]);\n        \n        if (cmp != 0) {\n          //System.out.println(\"    return \" + (cmp < 0));\n          return cmp < 0;\n        }\n      }\n      return tieBreakLessThan(first, firstFD, second, secondFD);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","7530de27b87b961b51f01bd1299b7004d46e8823"],"36510a8e3c1ec60d366b45f8f716e9dc47589661":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"fb17639909a369c1e64866842e5c213440acc17e":["7530de27b87b961b51f01bd1299b7004d46e8823"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["fb17639909a369c1e64866842e5c213440acc17e"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["36510a8e3c1ec60d366b45f8f716e9dc47589661"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"36510a8e3c1ec60d366b45f8f716e9dc47589661":["5f4f6b0fb6f08ac48f438f03002a283a63cb9992"],"fb17639909a369c1e64866842e5c213440acc17e":["500a89755c0c3953ca1886b5abb653b8cef8e299"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7530de27b87b961b51f01bd1299b7004d46e8823"],"500a89755c0c3953ca1886b5abb653b8cef8e299":["36510a8e3c1ec60d366b45f8f716e9dc47589661"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"fccd4a691aac1aff06ab8110d8693514a34160c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb17639909a369c1e64866842e5c213440acc17e"],"5f4f6b0fb6f08ac48f438f03002a283a63cb9992":["fccd4a691aac1aff06ab8110d8693514a34160c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}