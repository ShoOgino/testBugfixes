{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","commits":[{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"/dev/null","sourceNew":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","sourceOld":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(TriggerEvent.NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6783b03ea9c6398156b4e964266166193d4364","date":1565257495,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    Replica.Type replicaType = (Replica.Type) event.getProperty(AutoScalingParams.REPLICA_TYPE, Replica.Type.NRT);\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        suggester.hint(Suggester.Hint.REPLICATYPE, replicaType);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","sourceOld":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    Replica.Type replicaType = (Replica.Type) event.getProperty(AutoScalingParams.REPLICA_TYPE, Replica.Type.NRT);\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().entrySet().stream()\n                .filter(e -> collectionsPredicate.test(e.getKey()))\n                .forEach(entry -> {\n                  DocCollection docCollection = entry.getValue().get();\n                  if (docCollection != null) {\n                    docCollection.getActiveSlices().stream()\n                            .map(slice -> new Pair<>(entry.getKey(), slice.getName()))\n                            .forEach(collShards::add);\n                  }\n                });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        suggester.hint(Suggester.Hint.REPLICATYPE, replicaType);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","sourceOld":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    Replica.Type replicaType = (Replica.Type) event.getProperty(AutoScalingParams.REPLICA_TYPE, Replica.Type.NRT);\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        // todo in future we can prune ineligible collection/shard pairs\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().forEach((collectionName, collectionRef) -> {\n          DocCollection docCollection = collectionRef.get();\n          if (docCollection != null)  {\n            docCollection.getActiveSlices().stream()\n                .map(slice -> new Pair<>(collectionName, slice.getName()))\n                .forEach(collShards::add);\n          }\n        });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        suggester.hint(Suggester.Hint.REPLICATYPE, replicaType);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#getNodeAddedSuggester(SolrCloudManager,Policy.Session,TriggerEvent).mjava","sourceNew":null,"sourceOld":"  private Suggester getNodeAddedSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {\n    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    Replica.Type replicaType = (Replica.Type) event.getProperty(AutoScalingParams.REPLICA_TYPE, Replica.Type.NRT);\n    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);\n\n    Suggester suggester = session.getSuggester(action)\n        .hint(Suggester.Hint.TARGET_NODE, event.getProperty(NODE_NAMES));\n    switch (action) {\n      case ADDREPLICA:\n        // add all collection/shard pairs and let policy engine figure out which one\n        // to place on the target node\n        ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n        Set<Pair<String, String>> collShards = new HashSet<>();\n        clusterState.getCollectionStates().entrySet().stream()\n                .filter(e -> collectionsPredicate.test(e.getKey()))\n                .forEach(entry -> {\n                  DocCollection docCollection = entry.getValue().get();\n                  if (docCollection != null) {\n                    docCollection.getActiveSlices().stream()\n                            .map(slice -> new Pair<>(entry.getKey(), slice.getName()))\n                            .forEach(collShards::add);\n                  }\n                });\n        suggester.hint(Suggester.Hint.COLL_SHARD, collShards);\n        suggester.hint(Suggester.Hint.REPLICATYPE, replicaType);\n        break;\n      case MOVEREPLICA:\n      case NONE:\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unsupported preferredOperation=\" + preferredOp + \" for node added event\");\n    }\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b6783b03ea9c6398156b4e964266166193d4364":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"3f504512a03d978990cbff30db0522b354e846db":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["8b6783b03ea9c6398156b4e964266166193d4364"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"8b6783b03ea9c6398156b4e964266166193d4364":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["8b6783b03ea9c6398156b4e964266166193d4364"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}