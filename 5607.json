{"path":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = field.getType().getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof WhitespaceTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","sourceNew":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = ((TextField)field.getType()).getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof KeywordTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = field.getType().getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof WhitespaceTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","sourceNew":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getLatestSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = ((TextField)field.getType()).getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof KeywordTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = ((TextField)field.getType()).getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof KeywordTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e322d5186d76764c8638aa79f72fd42a5aed70ef","date":1542622177,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/MultiTermTest#testQueryCopiedToMulti().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testQueryCopiedToMulti() {\n    SchemaField field = h.getCore().getLatestSchema().getField(\"content_charfilter\");\n    Analyzer analyzer = ((TextField)field.getType()).getMultiTermAnalyzer();\n    assertTrue(analyzer instanceof TokenizerChain);\n    assertTrue(((TokenizerChain) analyzer).getTokenizerFactory() instanceof KeywordTokenizerFactory);\n    TokenizerChain tc = (TokenizerChain) analyzer;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      assertTrue(factory instanceof LowerCaseFilterFactory);\n    }\n\n    assertTrue(tc.getCharFilterFactories().length == 1);\n    assertTrue(tc.getCharFilterFactories()[0] instanceof MappingCharFilterFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"08970e5b8411182a29412c177eff67ec1110095b":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}