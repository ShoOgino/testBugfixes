{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer#incrementToken().mjava","commits":[{"id":"4c807c4005aae1acaf5cebc9af40883985fb89a8","date":1366974206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n\n      if (charsRead == chars.length) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setEmpty().append(inStr, oldPos, oldPos+gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer#incrementToken().mjava","sourceNew":null,"sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      charsRead = 0;\n      // TODO: refactor to a shared readFully somewhere:\n      while (charsRead < chars.length) {\n        int inc = input.read(chars, charsRead, chars.length-charsRead);\n        if (inc == -1) {\n          break;\n        }\n        charsRead += inc;\n      }\n      inStr = new String(chars, 0, charsRead).trim();  // remove any trailing empty strings \n\n      if (charsRead == chars.length) {\n        // Read extra throwaway chars so that on end() we\n        // report the correct offset:\n        char[] throwaway = new char[1024];\n        while(true) {\n          final int inc = input.read(throwaway, 0, throwaway.length);\n          if (inc == -1) {\n            break;\n          }\n          charsRead += inc;\n        }\n      }\n\n      inLen = inStr.length();\n      if (inLen == 0) {\n        return false;\n      }\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setEmpty().append(inStr, oldPos, oldPos+gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"4c807c4005aae1acaf5cebc9af40883985fb89a8":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}