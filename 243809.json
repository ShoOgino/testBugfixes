{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    this(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    this(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fe833105c61e37b761ef49bb83a3064c720d437","date":1327401646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    this(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    this(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    this(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    if (positionIncrement < 0) {\n      throw new IllegalArgumentException(\"positionIncrement may not be negative\");\n    }\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    if (positionIncrement < 0) {\n      throw new IllegalArgumentException(\"positionIncrement may not be negative\");\n    }\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/position/PositionFilter#PositionFilter(TokenStream,int).mjava","sourceNew":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    if (positionIncrement < 0) {\n      throw new IllegalArgumentException(\"positionIncrement may not be negative\");\n    }\n    this.positionIncrement = positionIncrement;\n  }\n\n","sourceOld":"  /**\n   * Constructs a PositionFilter that assigns the given position increment to\n   * all but the first token from the given input stream.\n   * \n   * @param input the input stream\n   * @param positionIncrement position increment to assign to all but the first\n   *  token from the input stream\n   */\n  public PositionFilter(final TokenStream input, final int positionIncrement) {\n    super(input);\n    if (positionIncrement < 0) {\n      throw new IllegalArgumentException(\"positionIncrement may not be negative\");\n    }\n    this.positionIncrement = positionIncrement;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["0f080986da691a3bba7b757f43ab72cdc82b57ce","7fe833105c61e37b761ef49bb83a3064c720d437"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["7fe833105c61e37b761ef49bb83a3064c720d437","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","7fe833105c61e37b761ef49bb83a3064c720d437"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7fe833105c61e37b761ef49bb83a3064c720d437":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["7fe833105c61e37b761ef49bb83a3064c720d437"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7fe833105c61e37b761ef49bb83a3064c720d437"],"7fe833105c61e37b761ef49bb83a3064c720d437":["0d22ac6a4146774c1bc8400160fc0b6150294e92","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}