{"path":"src/java/org/apache/solr/search/function/StringIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","commits":[{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/function/StringIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   @Override\n    public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n      // TODO: are lowerVal and upperVal in indexed form or not?\n      lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n      upperVal = upperVal == null ? null : toTerm(upperVal);\n\n     int lower = Integer.MIN_VALUE;\n     if (lowerVal != null) {\n       lower = index.binarySearchLookup(lowerVal);\n       if (lower < 0) {\n         lower = -lower-1;\n       } else if (!includeLower) {\n         lower++;\n       }\n     }\n\n     int upper = Integer.MAX_VALUE;\n     if (upperVal != null) {\n       upper = index.binarySearchLookup(upperVal);\n       if (upper < 0) {\n         upper = -upper-2;\n       } else if (!includeUpper) {\n         upper--;\n       }\n     }\n\n      final int ll = lower;\n      final int uu = upper;\n\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          int ord = order[doc];\n          return ord >= ll && ord <= uu;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4","5eeff6b8391d7b5e70e37193643d76c05a3abf75"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/StringIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/search/function/StringIndexDocValues#getRangeScorer(IndexReader,String,String,boolean,boolean).mjava","sourceNew":"   @Override\n    public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n      // TODO: are lowerVal and upperVal in indexed form or not?\n      lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n      upperVal = upperVal == null ? null : toTerm(upperVal);\n\n     int lower = Integer.MIN_VALUE;\n     if (lowerVal != null) {\n       lower = index.binarySearchLookup(lowerVal);\n       if (lower < 0) {\n         lower = -lower-1;\n       } else if (!includeLower) {\n         lower++;\n       }\n     }\n\n     int upper = Integer.MAX_VALUE;\n     if (upperVal != null) {\n       upper = index.binarySearchLookup(upperVal);\n       if (upper < 0) {\n         upper = -upper-2;\n       } else if (!includeUpper) {\n         upper--;\n       }\n     }\n\n      final int ll = lower;\n      final int uu = upper;\n\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          int ord = order[doc];\n          return ord >= ll && ord <= uu;\n        }\n      };\n    }\n\n","sourceOld":"   @Override\n    public ValueSourceScorer getRangeScorer(IndexReader reader, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) {\n      // TODO: are lowerVal and upperVal in indexed form or not?\n      lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n      upperVal = upperVal == null ? null : toTerm(upperVal);\n\n     int lower = Integer.MIN_VALUE;\n     if (lowerVal != null) {\n       lower = index.binarySearchLookup(lowerVal);\n       if (lower < 0) {\n         lower = -lower-1;\n       } else if (!includeLower) {\n         lower++;\n       }\n     }\n\n     int upper = Integer.MAX_VALUE;\n     if (upperVal != null) {\n       upper = index.binarySearchLookup(upperVal);\n       if (upper < 0) {\n         upper = -upper-2;\n       } else if (!includeUpper) {\n         upper--;\n       }\n     }\n\n      final int ll = lower;\n      final int uu = upper;\n\n      return new ValueSourceScorer(reader, this) {\n        @Override\n        public boolean matchesValue(int doc) {\n          int ord = order[doc];\n          return ord >= ll && ord <= uu;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}