{"path":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","commits":[{"id":"118ba480e87dfe453a6b47a320429be33f1d1653","date":1440320558,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String[] scoreModes = {\"avg\",\"max\",\"min\",\"total\"};\n    String joinQ = \"{!join \" + anyScoreMode(isScoresTest, scoreModes)\n                   + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:c\";\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest, scoreModes);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    joinQ = \"{!join \" + anyScoreMode(isScoresTest, scoreModes)\n            + \"from=join_s fromIndex=\" + alias + \" to=join_s}match_s:c\";\n    qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n    doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest, scoreModes);\n\n    // verify join doesn't work if no match in the \"from\" index\n    joinQ = \"{!join \" + (anyScoreMode(isScoresTest, scoreModes))\n            + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n    qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    hits = rsp.getResults();\n    assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    assertScore(isScoresTest, doc);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["24020c4069004ed08938cdad96858b56f698f6a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24020c4069004ed08938cdad96858b56f698f6a1","date":1442578977,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String[] scoreModes = {\"avg\",\"max\",\"min\",\"total\"};\n    String joinQ = \"{!join \" + anyScoreMode(isScoresTest, scoreModes)\n                   + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:c\";\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest, scoreModes);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    joinQ = \"{!join \" + anyScoreMode(isScoresTest, scoreModes)\n            + \"from=join_s fromIndex=\" + alias + \" to=join_s}match_s:c\";\n    qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n    doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest, scoreModes);\n\n    // verify join doesn't work if no match in the \"from\" index\n    joinQ = \"{!join \" + (anyScoreMode(isScoresTest, scoreModes))\n            + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n    qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    hits = rsp.getResults();\n    assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    assertScore(isScoresTest, doc);\n  }\n\n","bugFix":["118ba480e87dfe453a6b47a320429be33f1d1653"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da83c90417e805f2b355afc2d79f4d2b2ce27469","date":1464346037,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a95b7b666da79218aa9365b9d9adcb42351ee3","date":1464382787,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c match_s:not_1_0_score_after_weight_normalization\";\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();\n    request.setAliasName(alias);\n    request.setAliasedCollections(fromColl);\n    request.process(cloudClient);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(cloudClient.request(qr), cloudClient);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":"  private void testJoins(String toColl, String fromColl, String toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistribJoinFromCollectionTest#testJoins(String,String,Integer,boolean).mjava","sourceNew":null,"sourceOld":"  private void testJoins(String toColl, String fromColl, Integer toDocId, boolean isScoresTest)\n      throws SolrServerException, IOException {\n    // verify the join with fromIndex works\n    final String fromQ = \"match_s:c^2\";\n    CloudSolrClient client = cluster.getSolrClient();\n    {\n    final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n                   + \"from=join_s fromIndex=\" + fromColl + \n                   \" to=join_s}\" + fromQ;\n    QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n    QueryResponse rsp = new QueryResponse(client.request(qr), client);\n    SolrDocumentList hits = rsp.getResults();\n    assertTrue(\"Expected 1 doc, got \"+hits, hits.getNumFound() == 1);\n    SolrDocument doc = hits.get(0);\n    assertEquals(toDocId, doc.getFirstValue(\"id\"));\n    assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n    assertScore(isScoresTest, doc);\n    }\n\n    //negative test before creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    // create an alias for the fromIndex and then query through the alias\n    String alias = fromColl+\"Alias\";\n    CollectionAdminRequest.CreateAlias request = CollectionAdminRequest.createAlias(alias,fromColl);\n    request.process(client);\n\n    {\n      final String joinQ = \"{!join \" + anyScoreMode(isScoresTest)\n              + \"from=join_s fromIndex=\" + alias + \" to=join_s}\"+fromQ;\n      final QueryRequest qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected 1 doc\", hits.getNumFound() == 1);\n      SolrDocument doc = hits.get(0);\n      assertEquals(toDocId, doc.getFirstValue(\"id\"));\n      assertEquals(\"b\", doc.getFirstValue(\"get_s\"));\n      assertScore(isScoresTest, doc);\n    }\n\n    //negative test after creating an alias\n    checkAbsentFromIndex(fromColl, toColl, isScoresTest);\n\n    {\n      // verify join doesn't work if no match in the \"from\" index\n      final String joinQ = \"{!join \" + (anyScoreMode(isScoresTest))\n              + \"from=join_s fromIndex=\" + fromColl + \" to=join_s}match_s:d\";\n      final QueryRequest  qr = new QueryRequest(params(\"collection\", toColl, \"q\", joinQ, \"fl\", \"id,get_s,score\"));\n      final QueryResponse  rsp = new QueryResponse(client.request(qr), client);\n      final SolrDocumentList hits = rsp.getResults();\n      assertTrue(\"Expected no hits\", hits.getNumFound() == 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a71f63026529f3c1f03cfdd664910873ab2369ae":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"118ba480e87dfe453a6b47a320429be33f1d1653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["24020c4069004ed08938cdad96858b56f698f6a1","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"28288370235ed02234a64753cdbf0c6ec096304a":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["24020c4069004ed08938cdad96858b56f698f6a1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"da8a02bef7458089240404614139b53c9f875ec7":["24020c4069004ed08938cdad96858b56f698f6a1","d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["24020c4069004ed08938cdad96858b56f698f6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"24020c4069004ed08938cdad96858b56f698f6a1":["118ba480e87dfe453a6b47a320429be33f1d1653"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["da83c90417e805f2b355afc2d79f4d2b2ce27469"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"118ba480e87dfe453a6b47a320429be33f1d1653":["24020c4069004ed08938cdad96858b56f698f6a1"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"da8a02bef7458089240404614139b53c9f875ec7":[],"da83c90417e805f2b355afc2d79f4d2b2ce27469":["d6a95b7b666da79218aa9365b9d9adcb42351ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["118ba480e87dfe453a6b47a320429be33f1d1653"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"24020c4069004ed08938cdad96858b56f698f6a1":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","da8a02bef7458089240404614139b53c9f875ec7","da83c90417e805f2b355afc2d79f4d2b2ce27469"],"d6a95b7b666da79218aa9365b9d9adcb42351ee3":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","da8a02bef7458089240404614139b53c9f875ec7","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","da8a02bef7458089240404614139b53c9f875ec7","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}