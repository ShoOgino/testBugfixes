{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","commits":[{"id":"f0106fc8bd579fa78caf3372887b2d50907b5635","date":1402916839,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","sourceNew":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","sourceNew":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","sourceNew":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42NormsConsumer#Lucene42NormsConsumer(SegmentWriteState,String,String,String,String,float).mjava","sourceNew":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","sourceOld":"  Lucene42NormsConsumer(SegmentWriteState state, String dataCodec, String dataExtension, String metaCodec, String metaExtension, float acceptableOverheadRatio) throws IOException {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, dataExtension);\n      data = state.directory.createOutput(dataName, state.context);\n      CodecUtil.writeHeader(data, dataCodec, VERSION_CURRENT);\n      String metaName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, metaExtension);\n      meta = state.directory.createOutput(metaName, state.context);\n      CodecUtil.writeHeader(meta, metaCodec, VERSION_CURRENT);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0106fc8bd579fa78caf3372887b2d50907b5635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f0106fc8bd579fa78caf3372887b2d50907b5635","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0106fc8bd579fa78caf3372887b2d50907b5635","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}