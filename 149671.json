{"path":"lucene/core/src/java/org/apache/lucene/util/BytesRef#isValid().mjava","commits":[{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#isValid().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Performs internal consistency checks.\n   * Always returns true (or throws IllegalStateException) \n   */\n  // TODO: also for the other *Ref classes\n  public boolean isValid() {\n    if (bytes == null) {\n      throw new IllegalStateException(\"bytes is null\");\n    }\n    if (length < 0) {\n      throw new IllegalStateException(\"length is negative: \" + length);\n    }\n    if (length > bytes.length) {\n      throw new IllegalStateException(\"length is out of bounds: \" + length + \", bytes.length=\" + bytes.length);\n    }\n    if (offset < 0) {\n      throw new IllegalStateException(\"offset is negative: \" + offset);\n    }\n    if (offset > bytes.length) {\n      throw new IllegalStateException(\"offset out of bounds: \" + offset + \", length=\" + bytes.length);\n    }\n    if (offset + length < 0) {\n      throw new IllegalStateException(\"offset+length is negative: offset=\" + offset + \",length=\" + length);\n    }\n    if (offset + length > bytes.length) {\n      throw new IllegalStateException(\"offset+length out of bounds: offset=\" + offset + \",length=\" + length + \",bytes.length=\" + bytes.length);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189fdc8896d2ade49b5f851148067314984ab42","date":1359349780,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#isValid().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/BytesRef#isValid().mjava","sourceNew":"  /** \n   * Performs internal consistency checks.\n   * Always returns true (or throws IllegalStateException) \n   */\n  public boolean isValid() {\n    if (bytes == null) {\n      throw new IllegalStateException(\"bytes is null\");\n    }\n    if (length < 0) {\n      throw new IllegalStateException(\"length is negative: \" + length);\n    }\n    if (length > bytes.length) {\n      throw new IllegalStateException(\"length is out of bounds: \" + length + \",bytes.length=\" + bytes.length);\n    }\n    if (offset < 0) {\n      throw new IllegalStateException(\"offset is negative: \" + offset);\n    }\n    if (offset > bytes.length) {\n      throw new IllegalStateException(\"offset out of bounds: \" + offset + \",bytes.length=\" + bytes.length);\n    }\n    if (offset + length < 0) {\n      throw new IllegalStateException(\"offset+length is negative: offset=\" + offset + \",length=\" + length);\n    }\n    if (offset + length > bytes.length) {\n      throw new IllegalStateException(\"offset+length out of bounds: offset=\" + offset + \",length=\" + length + \",bytes.length=\" + bytes.length);\n    }\n    return true;\n  }\n\n","sourceOld":"  /** \n   * Performs internal consistency checks.\n   * Always returns true (or throws IllegalStateException) \n   */\n  // TODO: also for the other *Ref classes\n  public boolean isValid() {\n    if (bytes == null) {\n      throw new IllegalStateException(\"bytes is null\");\n    }\n    if (length < 0) {\n      throw new IllegalStateException(\"length is negative: \" + length);\n    }\n    if (length > bytes.length) {\n      throw new IllegalStateException(\"length is out of bounds: \" + length + \", bytes.length=\" + bytes.length);\n    }\n    if (offset < 0) {\n      throw new IllegalStateException(\"offset is negative: \" + offset);\n    }\n    if (offset > bytes.length) {\n      throw new IllegalStateException(\"offset out of bounds: \" + offset + \", length=\" + bytes.length);\n    }\n    if (offset + length < 0) {\n      throw new IllegalStateException(\"offset+length is negative: offset=\" + offset + \",length=\" + length);\n    }\n    if (offset + length > bytes.length) {\n      throw new IllegalStateException(\"offset+length out of bounds: offset=\" + offset + \",length=\" + length + \",bytes.length=\" + bytes.length);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#isValid().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Performs internal consistency checks.\n   * Always returns true (or throws IllegalStateException) \n   */\n  public boolean isValid() {\n    if (bytes == null) {\n      throw new IllegalStateException(\"bytes is null\");\n    }\n    if (length < 0) {\n      throw new IllegalStateException(\"length is negative: \" + length);\n    }\n    if (length > bytes.length) {\n      throw new IllegalStateException(\"length is out of bounds: \" + length + \",bytes.length=\" + bytes.length);\n    }\n    if (offset < 0) {\n      throw new IllegalStateException(\"offset is negative: \" + offset);\n    }\n    if (offset > bytes.length) {\n      throw new IllegalStateException(\"offset out of bounds: \" + offset + \",bytes.length=\" + bytes.length);\n    }\n    if (offset + length < 0) {\n      throw new IllegalStateException(\"offset+length is negative: offset=\" + offset + \",length=\" + length);\n    }\n    if (offset + length > bytes.length) {\n      throw new IllegalStateException(\"offset+length out of bounds: offset=\" + offset + \",length=\" + length + \",bytes.length=\" + bytes.length);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d189fdc8896d2ade49b5f851148067314984ab42"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d189fdc8896d2ade49b5f851148067314984ab42":["59d00acb12c9809438e21de7c24f016356973d46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["d189fdc8896d2ade49b5f851148067314984ab42"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59d00acb12c9809438e21de7c24f016356973d46","d4d69c535930b5cce125cff868d40f6373dc27d4"],"d189fdc8896d2ade49b5f851148067314984ab42":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}