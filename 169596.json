{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n\n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}