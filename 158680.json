{"path":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","commits":[{"id":"81ac83661cf5972c111e31e4249749b6506d5f18","date":1361930287,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","pathOld":"/dev/null","sourceNew":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    DefaultSimilarity d = new DefaultSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, sim.computeLengthNorm(16), 0.0F);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","sourceNew":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    ClassicSimilarity d = new ClassicSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, sim.computeLengthNorm(16), 0.0F);\n  }\n\n","sourceOld":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    DefaultSimilarity d = new DefaultSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, sim.computeLengthNorm(16), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","sourceNew":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    ClassicSimilarity d = new ClassicSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, computeNorm(sim, 1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, computeNorm(sim, 16), 0.0F);\n  }\n\n","sourceOld":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    ClassicSimilarity d = new ClassicSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, sim.computeLengthNorm(16), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestSweetSpotSimilarityFactory#testDefaults().mjava","sourceNew":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    ClassicSimilarity d = new ClassicSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, computeNorm(sim, 1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, computeNorm(sim, 4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, computeNorm(sim, 16), 0.0F);\n  }\n\n","sourceOld":"  /** default parameters */\n  public void testDefaults() throws Exception {\n    SweetSpotSimilarity sim = getSimilarity(\"text\", SweetSpotSimilarity.class);\n\n    // SSS tf w/defaults should behave just like DS\n    ClassicSimilarity d = new ClassicSimilarity();\n    for (int i = 0; i <=1000; i++) {\n      assertEquals(\"tf: i=\"+i, d.tf(i), sim.tf(i), 0.0F);\n    }\n\n    // default norm sanity check\n    assertEquals(\"norm 1\",  1.00F, sim.computeLengthNorm(1),  0.0F);\n    assertEquals(\"norm 4\",  0.50F, sim.computeLengthNorm(4),  0.0F);\n    assertEquals(\"norm 16\", 0.25F, sim.computeLengthNorm(16), 0.0F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["81d0720146de53dd3a4a023d2a3d1089d86d748d","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81ac83661cf5972c111e31e4249749b6506d5f18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["81ac83661cf5972c111e31e4249749b6506d5f18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81ac83661cf5972c111e31e4249749b6506d5f18"],"81ac83661cf5972c111e31e4249749b6506d5f18":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}