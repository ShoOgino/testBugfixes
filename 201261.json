{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextBoolean()).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextBoolean()).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2ScorerSupplier#testDisjunctionWithMinShouldMatchCost().mjava","sourceNew":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(new FakeWeight(), subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","sourceOld":"  public void testDisjunctionWithMinShouldMatchCost() throws IOException {\n    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);\n    for (Occur occur : Occur.values()) {\n      subs.put(occur, new ArrayList<>());\n    }\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42));\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12));\n    ScorerSupplier s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12, s.cost());\n    assertEquals(42 + 12, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20, s.cost());\n    assertEquals(42 + 12 + 20, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n\n    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30));\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 1);\n    assertEquals(42 + 12 + 20 + 30, s.cost());\n    assertEquals(42 + 12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 2);\n    assertEquals(12 + 20 + 30, s.cost());\n    assertEquals(12 + 20 + 30, s.get(random().nextInt(100)).iterator().cost());\n    s = new Boolean2ScorerSupplier(null, subs, RandomPicks.randomFrom(random(), ScoreMode.values()), 3);\n    assertEquals(12 + 20, s.cost());\n    assertEquals(12 + 20, s.get(random().nextInt(100)).iterator().cost());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["417142ff08fda9cf0b72d5133e63097a166c6458"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","9fc47cb7b4346802411bb432f501ed0673d7119e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}