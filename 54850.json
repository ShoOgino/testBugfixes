{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","sourceNew":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","sourceNew":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","sourceNew":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/AnlysisResponseBaseTest#testBuildPhases().mjava","sourceNew":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(@SuppressWarnings({\"rawtypes\"})NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link AnalysisResponseBase#buildPhases(org.apache.solr.common.util.NamedList)} )} method.\n   */\n  @Test\n  public void testBuildPhases() throws Exception {\n\n    final AnalysisResponseBase.TokenInfo tokenInfo = new AnalysisResponseBase.TokenInfo(\"text\", null, \"type\", 0, 3, 1, false);\n    NamedList nl = new NamedList();\n    nl.add(\"Tokenizer\", buildFakeTokenInfoList(6));\n    nl.add(\"Filter1\", buildFakeTokenInfoList(5));\n    nl.add(\"Filter2\", buildFakeTokenInfoList(4));\n    nl.add(\"Filter3\", buildFakeTokenInfoList(3));\n\n    AnalysisResponseBase response = new AnalysisResponseBase() {\n      @Override\n      protected TokenInfo buildTokenInfo(NamedList tokenNL) {\n        return tokenInfo;\n      }\n    };\n\n    List<AnalysisResponseBase.AnalysisPhase> phases = response.buildPhases(nl);\n\n    assertEquals(4, phases.size());\n    assertPhase(phases.get(0), \"Tokenizer\", 6, tokenInfo);\n    assertPhase(phases.get(1), \"Filter1\", 5, tokenInfo);\n    assertPhase(phases.get(2), \"Filter2\", 4, tokenInfo);\n    assertPhase(phases.get(3), \"Filter3\", 3, tokenInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}