{"path":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","sourceNew":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","sourceOld":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","sourceNew":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","sourceOld":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","sourceNew":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","sourceOld":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetQueryCount(ParsedParams,NamedList[Integer]).mjava","sourceNew":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","sourceOld":"  public void getFacetQueryCount(ParsedParams parsed, NamedList<Integer> res) throws SyntaxError, IOException {\n    // TODO: slight optimization would prevent double-parsing of any localParams\n    // TODO: SOLR-7753\n    Query qobj = QParser.getParser(parsed.facetValue, null, req).getQuery();\n\n    if (qobj == null) {\n      res.add(parsed.key, 0);\n    } else if (parsed.params.getBool(GroupParams.GROUP_FACET, false)) {\n      res.add(parsed.key, getGroupedFacetQueryCount(qobj, parsed.docs));\n    } else {\n      res.add(parsed.key, searcher.numDocs(qobj, parsed.docs));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["22d0a81a05eba47d5e18976f17d88306b218cc22","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["22d0a81a05eba47d5e18976f17d88306b218cc22","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["22d0a81a05eba47d5e18976f17d88306b218cc22","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}