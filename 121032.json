{"path":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"/dev/null","sourceNew":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    map = new LinkedHashMap(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a5003b3681dbfc4afa76815bab2ecdb285aba","date":1141349646,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    description = \"LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize;\n    if (autowarmCount>0) {\n      description += \", autowarmCount=\" + autowarmCount\n              + \", regenerator=\" + regenerator;\n    }\n    description += ')';\n\n    map = new LinkedHashMap(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","sourceOld":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    map = new LinkedHashMap(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd10f25652bcb979f0a522653b94f86ad65f6656","date":1260783720,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    description = \"LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize;\n    if (autowarmCount>0) {\n      description += \", autowarmCount=\" + autowarmCount\n              + \", regenerator=\" + regenerator;\n    }\n    description += ')';\n\n    map = new LinkedHashMap<K,V>(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","sourceOld":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    description = \"LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize;\n    if (autowarmCount>0) {\n      description += \", autowarmCount=\" + autowarmCount\n              + \", regenerator=\" + regenerator;\n    }\n    description += ')';\n\n    map = new LinkedHashMap(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"src/java/org/apache/solr/search/LRUCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    description = \"LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize;\n    if (autowarmCount>0) {\n      description += \", autowarmCount=\" + autowarmCount\n              + \", regenerator=\" + regenerator;\n    }\n    description += ')';\n\n    map = new LinkedHashMap<K,V>(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","sourceOld":"  public Object init(Map args, Object persistence, CacheRegenerator regenerator) {\n    state=State.CREATED;\n    this.regenerator = regenerator;\n    name = (String)args.get(\"name\");\n    String str = (String)args.get(\"size\");\n    final int limit = str==null ? 1024 : Integer.parseInt(str);\n    str = (String)args.get(\"initialSize\");\n    final int initialSize = Math.min(str==null ? 1024 : Integer.parseInt(str), limit);\n    str = (String)args.get(\"autowarmCount\");\n    autowarmCount = str==null ? 0 : Integer.parseInt(str);\n\n    description = \"LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize;\n    if (autowarmCount>0) {\n      description += \", autowarmCount=\" + autowarmCount\n              + \", regenerator=\" + regenerator;\n    }\n    description += ')';\n\n    map = new LinkedHashMap<K,V>(initialSize, 0.75f, true) {\n        protected boolean removeEldestEntry(Map.Entry eldest) {\n          if (size() > limit) {\n            // increment evictions regardless of state.\n            // this doesn't need to be synchronized because it will\n            // only be called in the context of a higher level synchronized block.\n            evictions++;\n            stats.evictions.incrementAndGet();\n            return true;\n          }\n          return false;\n        }\n      };\n\n    if (persistence==null) {\n      // must be the first time a cache of this type is being created\n      persistence = new CumulativeStats();\n    }\n\n    stats = (CumulativeStats)persistence;\n\n    return persistence;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"695a5003b3681dbfc4afa76815bab2ecdb285aba":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"dd10f25652bcb979f0a522653b94f86ad65f6656":["695a5003b3681dbfc4afa76815bab2ecdb285aba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["695a5003b3681dbfc4afa76815bab2ecdb285aba"],"695a5003b3681dbfc4afa76815bab2ecdb285aba":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"dd10f25652bcb979f0a522653b94f86ad65f6656":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}