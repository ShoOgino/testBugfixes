{"path":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","commits":[{"id":"937d1992553892661e4efbb659656cc565a9e621","date":1330719427,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1","date":1331668628,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new ReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new ReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new ReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba","date":1458935972,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/ReturnFieldsTest#testTransformers().mjava","sourceNew":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n\n    // Don't return 'store_rpt' just because it is required by the transformer\n    rf = new SolrReturnFields( req(\"fl\", \"[geo f=store_rpt]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[geo]\"));\n    assertFalse( rf.wantsField( \"store_rpt\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNotNull(rf.getTransformer());\n  }\n\n","sourceOld":"  @Test\n  public void testTransformers() {\n    ReturnFields rf = new SolrReturnFields( req(\"fl\", \"[explain]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[explain]\"));\n    assertFalse(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[explain]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[shard],id\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertTrue(rf.wantsField(\"id\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[shard]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"[docid]\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"mydocid:[docid]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"mydocid\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertEquals( \"mydocid\", rf.getTransformer().getName() );\n\n    rf = new SolrReturnFields( req(\"fl\", \"[docid][shard]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[docid]\"));\n    assertTrue(rf.wantsField(\"[shard]\"));\n    assertFalse(rf.wantsField(\"xxx\"));\n    assertFalse(rf.wantsAllFields());\n    assertTrue( rf.getTransformer() instanceof DocTransformers);\n    assertEquals(2, ((DocTransformers)rf.getTransformer()).size());\n\n    rf = new SolrReturnFields( req(\"fl\", \"[xxxxx]\") );\n    assertFalse( rf.wantsScore() );\n    assertTrue(rf.wantsField(\"[xxxxx]\"));\n    assertFalse( rf.wantsField( \"id\" ) );\n    assertFalse(rf.wantsAllFields());\n    assertNull(rf.getTransformer());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2ac65445fe9b79f4ec7b16753c38b9c61732a7d1","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937d1992553892661e4efbb659656cc565a9e621"],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["937d1992553892661e4efbb659656cc565a9e621"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"937d1992553892661e4efbb659656cc565a9e621":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"2ac65445fe9b79f4ec7b16753c38b9c61732a7d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","937d1992553892661e4efbb659656cc565a9e621"],"937d1992553892661e4efbb659656cc565a9e621":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2ac65445fe9b79f4ec7b16753c38b9c61732a7d1"],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}