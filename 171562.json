{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","sourceNew":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * com.cloudera.cdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","sourceOld":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * com.cloudera.cdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","pathOld":"/dev/null","sourceNew":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * com.cloudera.cdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c74a1d30fa4439a3687ae194fa516accc89d4f35","date":1395251530,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","sourceNew":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * org.kitesdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","sourceOld":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * com.cloudera.cdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","sourceNew":null,"sourceOld":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * org.kitesdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#setupMorphline(Options).mjava","sourceNew":null,"sourceOld":"  private MorphlineMapRunner setupMorphline(Options options) throws IOException, URISyntaxException {\n    if (options.morphlineId != null) {\n      job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_ID_PARAM, options.morphlineId);\n    }\n    addDistributedCacheFile(options.morphlineFile, job.getConfiguration());    \n    if (!options.isDryRun) {\n      return null;\n    }\n    \n    /*\n     * Ensure scripting support for Java via morphline \"java\" command works even in dryRun mode,\n     * i.e. when executed in the client side driver JVM. To do so, collect all classpath URLs from\n     * the class loaders chain that org.apache.hadoop.util.RunJar (hadoop jar xyz-job.jar) and\n     * org.apache.hadoop.util.GenericOptionsParser (--libjars) have installed, then tell\n     * FastJavaScriptEngine.parse() where to find classes that JavaBuilder scripts might depend on.\n     * This ensures that scripts that reference external java classes compile without exceptions\n     * like this:\n     * \n     * ... caused by compilation failed: mfm:///MyJavaClass1.java:2: package\n     * org.kitesdk.morphline.api does not exist\n     */\n    LOG.trace(\"dryRun: java.class.path: {}\", System.getProperty(\"java.class.path\"));\n    String fullClassPath = \"\";\n    ClassLoader loader = Thread.currentThread().getContextClassLoader(); // see org.apache.hadoop.util.RunJar\n    while (loader != null) { // walk class loaders, collect all classpath URLs\n      if (loader instanceof URLClassLoader) { \n        URL[] classPathPartURLs = ((URLClassLoader) loader).getURLs(); // see org.apache.hadoop.util.RunJar\n        LOG.trace(\"dryRun: classPathPartURLs: {}\", Arrays.asList(classPathPartURLs));\n        StringBuilder classPathParts = new StringBuilder();\n        for (URL url : classPathPartURLs) {\n          File file = new File(url.toURI());\n          if (classPathPartURLs.length > 0) {\n            classPathParts.append(File.pathSeparator);\n          }\n          classPathParts.append(file.getPath());\n        }\n        LOG.trace(\"dryRun: classPathParts: {}\", classPathParts);\n        String separator = File.pathSeparator;\n        if (fullClassPath.length() == 0 || classPathParts.length() == 0) {\n          separator = \"\";\n        }\n        fullClassPath = classPathParts + separator + fullClassPath;\n      }\n      loader = loader.getParent();\n    }\n    \n    // tell FastJavaScriptEngine.parse() where to find the classes that the script might depend on\n    if (fullClassPath.length() > 0) {\n      assert System.getProperty(\"java.class.path\") != null;\n      fullClassPath = System.getProperty(\"java.class.path\") + File.pathSeparator + fullClassPath;\n      LOG.trace(\"dryRun: fullClassPath: {}\", fullClassPath);\n      System.setProperty(\"java.class.path\", fullClassPath); // see FastJavaScriptEngine.parse()\n    }\n    \n    job.getConfiguration().set(MorphlineMapRunner.MORPHLINE_FILE_PARAM, options.morphlineFile.getPath());\n    return new MorphlineMapRunner(\n        job.getConfiguration(), new DryRunDocumentLoader(), options.solrHomeDir.getPath());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c74a1d30fa4439a3687ae194fa516accc89d4f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"c74a1d30fa4439a3687ae194fa516accc89d4f35":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c74a1d30fa4439a3687ae194fa516accc89d4f35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c74a1d30fa4439a3687ae194fa516accc89d4f35"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"c74a1d30fa4439a3687ae194fa516accc89d4f35":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}