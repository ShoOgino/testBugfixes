{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86762b84c3fc613e3c2250dc9452529a68181a3f","date":1419412618,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assertThread(\"Docs enums\", creationThread);\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingPostingsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assertThread(\"Docs enums\", creationThread);\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc + \" \" + in;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      positionCount = 0;\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assertThread(\"Docs enums\", creationThread);\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86762b84c3fc613e3c2250dc9452529a68181a3f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["86762b84c3fc613e3c2250dc9452529a68181a3f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"86762b84c3fc613e3c2250dc9452529a68181a3f":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["86762b84c3fc613e3c2250dc9452529a68181a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}