{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void createConfigSet(ZkNodeProps message) throws IOException {\n    String configSetName = getTaskKey(message);\n    if (configSetName == null || configSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet name not specified\");\n    }\n\n    String baseConfigSetName = message.getStr(BASE_CONFIGSET);\n    if (baseConfigSetName == null || baseConfigSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Base ConfigSet name not specified\");\n    }\n\n    ZkConfigManager configManager = new ZkConfigManager(zkStateReader.getZkClient());\n    if (configManager.configExists(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet already exists: \" + configSetName);\n    }\n\n    // is there a base config that already exists\n    if (!configManager.configExists(baseConfigSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Base ConfigSet does not exist: \" + baseConfigSetName);\n    }\n\n    String propertyPath = ConfigSetProperties.DEFAULT_FILENAME;\n    Map<String, Object> props = getNewProperties(message);\n    if (props != null) {\n      // read the old config properties and do a merge, if necessary\n      NamedList oldProps = getConfigSetProperties(getPropertyPath(baseConfigSetName,propertyPath));\n      if (oldProps != null) {\n        mergeOldProperties(props, oldProps);\n      }\n    }\n    byte[] propertyData = getPropertyData(props);\n\n    Set<String> copiedToZkPaths = new HashSet<String>();\n    try {\n      configManager.copyConfigDir(baseConfigSetName, configSetName, copiedToZkPaths);\n      if (propertyData != null) {\n        try {\n          zkStateReader.getZkClient().makePath(\n              getPropertyPath(configSetName, propertyPath),\n                  propertyData, CreateMode.PERSISTENT, null, false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error writing new properties\",\n              SolrZkClient.checkInterrupted(e));\n        }\n      }\n    } catch (Exception e) {\n      // copying the config dir or writing the properties file may have failed.\n      // we should delete the ConfigSet because it may be invalid,\n      // assuming we actually wrote something.  E.g. could be\n      // the entire baseConfig set with the old properties, including immutable,\n      // that would make it impossible for the user to delete.\n      try {\n        if (configManager.configExists(configSetName) && copiedToZkPaths.size() > 0) {\n          deleteConfigSet(configSetName, true);\n        }\n      } catch (IOException ioe) {\n        log.error(\"Error while trying to delete partially created ConfigSet\", ioe);\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29778bfb04e9115636606cb8f74e23ecba15c7b","date":1536084166,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","sourceNew":"  private void createConfigSet(ZkNodeProps message) throws IOException {\n    String configSetName = getTaskKey(message);\n    if (configSetName == null || configSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet name not specified\");\n    }\n\n    String baseConfigSetName = message.getStr(BASE_CONFIGSET, DEFAULT_CONFIGSET_NAME);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkStateReader.getZkClient());\n    if (configManager.configExists(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet already exists: \" + configSetName);\n    }\n\n    // is there a base config that already exists\n    if (!configManager.configExists(baseConfigSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Base ConfigSet does not exist: \" + baseConfigSetName);\n    }\n\n    String propertyPath = ConfigSetProperties.DEFAULT_FILENAME;\n    Map<String, Object> props = getNewProperties(message);\n    if (props != null) {\n      // read the old config properties and do a merge, if necessary\n      NamedList oldProps = getConfigSetProperties(getPropertyPath(baseConfigSetName, propertyPath));\n      if (oldProps != null) {\n        mergeOldProperties(props, oldProps);\n      }\n    }\n    byte[] propertyData = getPropertyData(props);\n\n    Set<String> copiedToZkPaths = new HashSet<String>();\n    try {\n      configManager.copyConfigDir(baseConfigSetName, configSetName, copiedToZkPaths);\n      if (propertyData != null) {\n        try {\n          zkStateReader.getZkClient().makePath(\n              getPropertyPath(configSetName, propertyPath),\n              propertyData, CreateMode.PERSISTENT, null, false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error writing new properties\",\n              SolrZkClient.checkInterrupted(e));\n        }\n      }\n    } catch (Exception e) {\n      // copying the config dir or writing the properties file may have failed.\n      // we should delete the ConfigSet because it may be invalid,\n      // assuming we actually wrote something.  E.g. could be\n      // the entire baseConfig set with the old properties, including immutable,\n      // that would make it impossible for the user to delete.\n      try {\n        if (configManager.configExists(configSetName) && copiedToZkPaths.size() > 0) {\n          deleteConfigSet(configSetName, true);\n        }\n      } catch (IOException ioe) {\n        log.error(\"Error while trying to delete partially created ConfigSet\", ioe);\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void createConfigSet(ZkNodeProps message) throws IOException {\n    String configSetName = getTaskKey(message);\n    if (configSetName == null || configSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet name not specified\");\n    }\n\n    String baseConfigSetName = message.getStr(BASE_CONFIGSET);\n    if (baseConfigSetName == null || baseConfigSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Base ConfigSet name not specified\");\n    }\n\n    ZkConfigManager configManager = new ZkConfigManager(zkStateReader.getZkClient());\n    if (configManager.configExists(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet already exists: \" + configSetName);\n    }\n\n    // is there a base config that already exists\n    if (!configManager.configExists(baseConfigSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Base ConfigSet does not exist: \" + baseConfigSetName);\n    }\n\n    String propertyPath = ConfigSetProperties.DEFAULT_FILENAME;\n    Map<String, Object> props = getNewProperties(message);\n    if (props != null) {\n      // read the old config properties and do a merge, if necessary\n      NamedList oldProps = getConfigSetProperties(getPropertyPath(baseConfigSetName,propertyPath));\n      if (oldProps != null) {\n        mergeOldProperties(props, oldProps);\n      }\n    }\n    byte[] propertyData = getPropertyData(props);\n\n    Set<String> copiedToZkPaths = new HashSet<String>();\n    try {\n      configManager.copyConfigDir(baseConfigSetName, configSetName, copiedToZkPaths);\n      if (propertyData != null) {\n        try {\n          zkStateReader.getZkClient().makePath(\n              getPropertyPath(configSetName, propertyPath),\n                  propertyData, CreateMode.PERSISTENT, null, false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error writing new properties\",\n              SolrZkClient.checkInterrupted(e));\n        }\n      }\n    } catch (Exception e) {\n      // copying the config dir or writing the properties file may have failed.\n      // we should delete the ConfigSet because it may be invalid,\n      // assuming we actually wrote something.  E.g. could be\n      // the entire baseConfig set with the old properties, including immutable,\n      // that would make it impossible for the user to delete.\n      try {\n        if (configManager.configExists(configSetName) && copiedToZkPaths.size() > 0) {\n          deleteConfigSet(configSetName, true);\n        }\n      } catch (IOException ioe) {\n        log.error(\"Error while trying to delete partially created ConfigSet\", ioe);\n      }\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerConfigSetMessageHandler#createConfigSet(ZkNodeProps).mjava","sourceNew":"  private void createConfigSet(ZkNodeProps message) throws IOException {\n    String configSetName = getTaskKey(message);\n    if (configSetName == null || configSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet name not specified\");\n    }\n\n    String baseConfigSetName = message.getStr(BASE_CONFIGSET, DEFAULT_CONFIGSET_NAME);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkStateReader.getZkClient());\n    if (configManager.configExists(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet already exists: \" + configSetName);\n    }\n\n    // is there a base config that already exists\n    if (!configManager.configExists(baseConfigSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Base ConfigSet does not exist: \" + baseConfigSetName);\n    }\n\n    String propertyPath = ConfigSetProperties.DEFAULT_FILENAME;\n    Map<String, Object> props = getNewProperties(message);\n    if (props != null) {\n      // read the old config properties and do a merge, if necessary\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList oldProps = getConfigSetProperties(getPropertyPath(baseConfigSetName, propertyPath));\n      if (oldProps != null) {\n        mergeOldProperties(props, oldProps);\n      }\n    }\n    byte[] propertyData = getPropertyData(props);\n\n    Set<String> copiedToZkPaths = new HashSet<String>();\n    try {\n      configManager.copyConfigDir(baseConfigSetName, configSetName, copiedToZkPaths);\n      if (propertyData != null) {\n        try {\n          zkStateReader.getZkClient().makePath(\n              getPropertyPath(configSetName, propertyPath),\n              propertyData, CreateMode.PERSISTENT, null, false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error writing new properties\",\n              SolrZkClient.checkInterrupted(e));\n        }\n      }\n    } catch (Exception e) {\n      // copying the config dir or writing the properties file may have failed.\n      // we should delete the ConfigSet because it may be invalid,\n      // assuming we actually wrote something.  E.g. could be\n      // the entire baseConfig set with the old properties, including immutable,\n      // that would make it impossible for the user to delete.\n      try {\n        if (configManager.configExists(configSetName) && copiedToZkPaths.size() > 0) {\n          deleteConfigSet(configSetName, true);\n        }\n      } catch (IOException ioe) {\n        log.error(\"Error while trying to delete partially created ConfigSet\", ioe);\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void createConfigSet(ZkNodeProps message) throws IOException {\n    String configSetName = getTaskKey(message);\n    if (configSetName == null || configSetName.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet name not specified\");\n    }\n\n    String baseConfigSetName = message.getStr(BASE_CONFIGSET, DEFAULT_CONFIGSET_NAME);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkStateReader.getZkClient());\n    if (configManager.configExists(configSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"ConfigSet already exists: \" + configSetName);\n    }\n\n    // is there a base config that already exists\n    if (!configManager.configExists(baseConfigSetName)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Base ConfigSet does not exist: \" + baseConfigSetName);\n    }\n\n    String propertyPath = ConfigSetProperties.DEFAULT_FILENAME;\n    Map<String, Object> props = getNewProperties(message);\n    if (props != null) {\n      // read the old config properties and do a merge, if necessary\n      NamedList oldProps = getConfigSetProperties(getPropertyPath(baseConfigSetName, propertyPath));\n      if (oldProps != null) {\n        mergeOldProperties(props, oldProps);\n      }\n    }\n    byte[] propertyData = getPropertyData(props);\n\n    Set<String> copiedToZkPaths = new HashSet<String>();\n    try {\n      configManager.copyConfigDir(baseConfigSetName, configSetName, copiedToZkPaths);\n      if (propertyData != null) {\n        try {\n          zkStateReader.getZkClient().makePath(\n              getPropertyPath(configSetName, propertyPath),\n              propertyData, CreateMode.PERSISTENT, null, false, true);\n        } catch (KeeperException | InterruptedException e) {\n          throw new IOException(\"Error writing new properties\",\n              SolrZkClient.checkInterrupted(e));\n        }\n      }\n    } catch (Exception e) {\n      // copying the config dir or writing the properties file may have failed.\n      // we should delete the ConfigSet because it may be invalid,\n      // assuming we actually wrote something.  E.g. could be\n      // the entire baseConfig set with the old properties, including immutable,\n      // that would make it impossible for the user to delete.\n      try {\n        if (configManager.configExists(configSetName) && copiedToZkPaths.size() > 0) {\n          deleteConfigSet(configSetName, true);\n        }\n      } catch (IOException ioe) {\n        log.error(\"Error while trying to delete partially created ConfigSet\", ioe);\n      }\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["e29778bfb04e9115636606cb8f74e23ecba15c7b"],"e29778bfb04e9115636606cb8f74e23ecba15c7b":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}