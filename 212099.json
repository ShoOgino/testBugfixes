{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    w.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new WhitespaceTokenizer(reader));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(new Field(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}