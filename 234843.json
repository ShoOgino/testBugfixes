{"path":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c","date":1481741546,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static FieldCacheStats getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    long totalBytesUsed = 0;\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n      totalBytesUsed += entries[i].getValue().ramBytesUsed();\n    }\n    String totalSize = RamUsageEstimator.humanReadableUnits(totalBytesUsed);\n    return new FieldCacheStats(totalSize, info);\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/UninvertingReader#getUninvertedStats().mjava","sourceNew":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static FieldCacheStats getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    long totalBytesUsed = 0;\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n      totalBytesUsed += entries[i].getValue().ramBytesUsed();\n    }\n    String totalSize = RamUsageEstimator.humanReadableUnits(totalBytesUsed);\n    return new FieldCacheStats(totalSize, info);\n  }\n\n","sourceOld":"  /** \n   * Return information about the backing cache\n   * @lucene.internal \n   */\n  public static String[] getUninvertedStats() {\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    String[] info = new String[entries.length];\n    for (int i = 0; i < entries.length; i++) {\n      info[i] = entries[i].toString();\n    }\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"00b13034beb84b82cc24c8a8d0bbaf2a90e1ab0c":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","83870855d82aba6819217abeff5a40779dbb28b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}