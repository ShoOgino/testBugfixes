{"path":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"6a67b839dba6c0047c752067352e6a7847fbe8d3","date":1183443247,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n     // Highlight each document\n     DocIterator iterator = docs.iterator();\n     for (int i = 0; i < docs.size(); i++) {\n        int docId = iterator.nextDoc();\n        Document doc = readDocs[i];\n        NamedList docSummaries = new SimpleOrderedMap();\n        for (String fieldName : fieldNames) {\n           fieldName = fieldName.trim();\n           String[] docTexts = doc.getValues(fieldName);\n           if (docTexts == null) continue;\n\n           // get highlighter, and number of fragments for this field\n           Highlighter highlighter = getHighlighter(query, fieldName, req);\n           int numFragments = getMaxSnippets(fieldName, params);\n\n           String[] summaries;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], false, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dce5052794a4efcecae840f6c07db4eacae55ce3","date":1192141968,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n     // Highlight each document\n     DocIterator iterator = docs.iterator();\n     for (int i = 0; i < docs.size(); i++) {\n        int docId = iterator.nextDoc();\n        Document doc = readDocs[i];\n        NamedList docSummaries = new SimpleOrderedMap();\n        for (String fieldName : fieldNames) {\n           fieldName = fieldName.trim();\n           String[] docTexts = doc.getValues(fieldName);\n           if (docTexts == null) continue;\n\n           // get highlighter, and number of fragments for this field\n           Highlighter highlighter = getHighlighter(query, fieldName, req);\n           int numFragments = getMaxSnippets(fieldName, params);\n\n           String[] summaries = null;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], false, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n           // no summeries made, copy text from alternate field\n           if (summaries == null || summaries.length == 0) {\n              String alternateField = req.getParams().getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n              if (alternateField != null && alternateField.length() > 0) {\n                 String[] altTexts = doc.getValues(alternateField);\n                    if (altTexts != null && altTexts.length > 0)\n                       docSummaries.add(fieldName, altTexts);\n              }\n           }\n \n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n     // Highlight each document\n     DocIterator iterator = docs.iterator();\n     for (int i = 0; i < docs.size(); i++) {\n        int docId = iterator.nextDoc();\n        Document doc = readDocs[i];\n        NamedList docSummaries = new SimpleOrderedMap();\n        for (String fieldName : fieldNames) {\n           fieldName = fieldName.trim();\n           String[] docTexts = doc.getValues(fieldName);\n           if (docTexts == null) continue;\n\n           // get highlighter, and number of fragments for this field\n           Highlighter highlighter = getHighlighter(query, fieldName, req);\n           int numFragments = getMaxSnippets(fieldName, params);\n\n           String[] summaries;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], false, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b33cbdde0fe8001a7381dcff32da1369decd02f","date":1199829766,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n       int docId = iterator.nextDoc();\n       Document doc = readDocs[i];\n       NamedList docSummaries = new SimpleOrderedMap();\n       for (String fieldName : fieldNames) {\n          fieldName = fieldName.trim();\n          String[] docTexts = doc.getValues(fieldName);\n          if (docTexts == null) continue;\n\n          // get highlighter, and number of fragments for this field\n          Highlighter highlighter = getHighlighter(query, fieldName, req);\n          int numFragments = getMaxSnippets(fieldName, params);\n          boolean mergeContiguousFragments = isMergeContiguousFragments(fieldName, params);\n\n           String[] summaries = null;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], mergeContiguousFragments, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n           // no summeries made, copy text from alternate field\n           if (summaries == null || summaries.length == 0) {\n              String alternateField = req.getParams().getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n              if (alternateField != null && alternateField.length() > 0) {\n                 String[] altTexts = doc.getValues(alternateField);\n                    if (altTexts != null && altTexts.length > 0)\n                       docSummaries.add(fieldName, altTexts);\n              }\n           }\n \n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n     // Highlight each document\n     DocIterator iterator = docs.iterator();\n     for (int i = 0; i < docs.size(); i++) {\n        int docId = iterator.nextDoc();\n        Document doc = readDocs[i];\n        NamedList docSummaries = new SimpleOrderedMap();\n        for (String fieldName : fieldNames) {\n           fieldName = fieldName.trim();\n           String[] docTexts = doc.getValues(fieldName);\n           if (docTexts == null) continue;\n\n           // get highlighter, and number of fragments for this field\n           Highlighter highlighter = getHighlighter(query, fieldName, req);\n           int numFragments = getMaxSnippets(fieldName, params);\n\n           String[] summaries = null;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], false, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n           // no summeries made, copy text from alternate field\n           if (summaries == null || summaries.length == 0) {\n              String alternateField = req.getParams().getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n              if (alternateField != null && alternateField.length() > 0) {\n                 String[] altTexts = doc.getValues(alternateField);\n                    if (altTexts != null && altTexts.length > 0)\n                       docSummaries.add(fieldName, altTexts);\n              }\n           }\n \n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303b28b90016c2de1b5870759794476dbf4fd6ce","date":1206052767,"type":3,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"\t/**\n\t * Generates a list of Highlighted query fragments for each item in a list\n\t * of documents, or returns null if highlighting is disabled.\n\t *\n\t * @param docs query results\n\t * @param query the query\n\t * @param req the current request\n\t * @param defaultFields default list of fields to summarize\n\t *\n\t * @return NamedList containing a NamedList for each document, which in \n\t * turns contains sets (field, summary) pairs.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in \n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {\n    SolrParams params = req.getParams(); \n    if (!isHighlightingEnabled(params))\n        return null;\n     \n     SolrIndexSearcher searcher = req.getSearcher();\n     IndexSchema schema = searcher.getSchema();\n     NamedList fragments = new SimpleOrderedMap();\n     String[] fieldNames = getHighlightFields(query, req, defaultFields);\n     Document[] readDocs = new Document[docs.size()];\n     {\n       // pre-fetch documents using the Searcher's doc cache\n       Set<String> fset = new HashSet<String>();\n       for(String f : fieldNames) { fset.add(f); }\n       // fetch unique key if one exists.\n       SchemaField keyField = schema.getUniqueKeyField();\n       if(null != keyField)\n         fset.add(keyField.getName());  \n       searcher.readDocs(readDocs, docs, fset);\n     }\n\n\n    // Highlight each document\n    DocIterator iterator = docs.iterator();\n    for (int i = 0; i < docs.size(); i++) {\n       int docId = iterator.nextDoc();\n       Document doc = readDocs[i];\n       NamedList docSummaries = new SimpleOrderedMap();\n       for (String fieldName : fieldNames) {\n          fieldName = fieldName.trim();\n          String[] docTexts = doc.getValues(fieldName);\n          if (docTexts == null) continue;\n\n          // get highlighter, and number of fragments for this field\n          Highlighter highlighter = getHighlighter(query, fieldName, req);\n          int numFragments = getMaxSnippets(fieldName, params);\n          boolean mergeContiguousFragments = isMergeContiguousFragments(fieldName, params);\n\n           String[] summaries = null;\n           TextFragment[] frag;\n           if (docTexts.length == 1) {\n              // single-valued field\n              TokenStream tstream;\n              try {\n                 // attempt term vectors\n                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);\n              }\n              catch (IllegalArgumentException e) {\n                 // fall back to analyzer\n                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);\n              }\n              frag = highlighter.getBestTextFragments(tstream, docTexts[0], mergeContiguousFragments, numFragments);\n           }\n           else {\n              // multi-valued field\n              MultiValueTokenStream tstream;\n              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);\n              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);\n           }\n           // convert fragments back into text\n           // TODO: we can include score and position information in output as snippet attributes\n           if (frag.length > 0) {\n              ArrayList<String> fragTexts = new ArrayList<String>();\n              for (int j = 0; j < frag.length; j++) {\n                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {\n                    fragTexts.add(frag[j].toString());\n                 }\n              }\n              summaries = fragTexts.toArray(new String[0]);\n              if (summaries.length > 0) \n                docSummaries.add(fieldName, summaries);\n           }\n           // no summeries made, copy text from alternate field\n           if (summaries == null || summaries.length == 0) {\n              String alternateField = req.getParams().getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);\n              if (alternateField != null && alternateField.length() > 0) {\n                 String[] altTexts = doc.getValues(alternateField);\n                    if (altTexts != null && altTexts.length > 0)\n                       docSummaries.add(fieldName, altTexts);\n              }\n           }\n \n        }\n        String printId = schema.printableUniqueKey(doc);\n        fragments.add(printId == null ? null : printId, docSummaries);\n     }\n     return fragments;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a04a06bcc429d9583c477a568b5329655e7d26c","date":1220993913,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"\t/**\n\t * Generates a list of Highlighted query fragments for each item in a list\n\t * of documents, or returns null if highlighting is disabled.\n\t *\n\t * @param docs query results\n\t * @param query the query\n\t * @param req the current request\n\t * @param defaultFields default list of fields to summarize\n\t *\n\t * @return NamedList containing a NamedList for each document, which in\n\t * turns contains sets (field, summary) pairs.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","sourceOld":"\t/**\n\t * Generates a list of Highlighted query fragments for each item in a list\n\t * of documents, or returns null if highlighting is disabled.\n\t *\n\t * @param docs query results\n\t * @param query the query\n\t * @param req the current request\n\t * @param defaultFields default list of fields to summarize\n\t *\n\t * @return NamedList containing a NamedList for each document, which in \n\t * turns contains sets (field, summary) pairs.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a11ec658894eed204e77ed47f9ff29c3356d8099","date":1230590887,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in\n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","sourceOld":"\t/**\n\t * Generates a list of Highlighted query fragments for each item in a list\n\t * of documents, or returns null if highlighting is disabled.\n\t *\n\t * @param docs query results\n\t * @param query the query\n\t * @param req the current request\n\t * @param defaultFields default list of fields to summarize\n\t *\n\t * @return NamedList containing a NamedList for each document, which in\n\t * turns contains sets (field, summary) pairs.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","pathOld":"src/java/org/apache/solr/highlight/SolrHighlighter#doHighlighting(DocList,Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in\n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","sourceOld":"  /**\n   * Generates a list of Highlighted query fragments for each item in a list\n   * of documents, or returns null if highlighting is disabled.\n   *\n   * @param docs query results\n   * @param query the query\n   * @param req the current request\n   * @param defaultFields default list of fields to summarize\n   *\n   * @return NamedList containing a NamedList for each document, which in\n   * turns contains sets (field, summary) pairs.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public abstract NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a11ec658894eed204e77ed47f9ff29c3356d8099":["7a04a06bcc429d9583c477a568b5329655e7d26c"],"5b33cbdde0fe8001a7381dcff32da1369decd02f":["dce5052794a4efcecae840f6c07db4eacae55ce3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dce5052794a4efcecae840f6c07db4eacae55ce3":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7a04a06bcc429d9583c477a568b5329655e7d26c":["303b28b90016c2de1b5870759794476dbf4fd6ce"],"ad94625fb8d088209f46650c8097196fec67f00c":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"303b28b90016c2de1b5870759794476dbf4fd6ce":["5b33cbdde0fe8001a7381dcff32da1369decd02f"]},"commit2Childs":{"a11ec658894eed204e77ed47f9ff29c3356d8099":["ad94625fb8d088209f46650c8097196fec67f00c"],"5b33cbdde0fe8001a7381dcff32da1369decd02f":["303b28b90016c2de1b5870759794476dbf4fd6ce"],"dce5052794a4efcecae840f6c07db4eacae55ce3":["5b33cbdde0fe8001a7381dcff32da1369decd02f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6a67b839dba6c0047c752067352e6a7847fbe8d3"],"7a04a06bcc429d9583c477a568b5329655e7d26c":["a11ec658894eed204e77ed47f9ff29c3356d8099"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"6a67b839dba6c0047c752067352e6a7847fbe8d3":["dce5052794a4efcecae840f6c07db4eacae55ce3"],"303b28b90016c2de1b5870759794476dbf4fd6ce":["7a04a06bcc429d9583c477a568b5329655e7d26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}