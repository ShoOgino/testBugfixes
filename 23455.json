{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setTermBuffer(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setTermBuffer(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setTermBuffer(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a43b8655231010bd8d9a1bea43acc6001df4b0dd","date":1327331998,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      clearAttributes();\n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setEmpty().append(text);\n          offsetAtt.setOffset(correctOffset(start), correctOffset(end));\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a7347509fad0711ac30cb15a746e9a3830a38ebd","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a43b8655231010bd8d9a1bea43acc6001df4b0dd"],"a43b8655231010bd8d9a1bea43acc6001df4b0dd":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}