{"path":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newField(PRIORITY_FIELD, HIGH_PRIORITY, TextField.TYPE_STORED));\n        d.add(newField(ID_FIELD, Integer.toString(j), TextField.TYPE_STORED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = new IndexSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFiles);\n      }\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(newTextField(ID_FIELD, Integer.toString(j), Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ecad93cf44bc23303e62731a56177acaa4514a6","date":1401120314,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.shutdown();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, null, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.build().toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery.build(), MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(Random,PrintWriter,boolean,int).mjava","sourceNew":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new StoredField(ID_FIELD, j));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.build().toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery.build(), MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","sourceOld":"  private void doTest(Random random, PrintWriter out, boolean useCompoundFiles, int MAX_DOCS) throws Exception {\n      Directory directory = newDirectory();\n      Analyzer analyzer = new MockAnalyzer(random);\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      final MergePolicy mp = conf.getMergePolicy();\n      mp.setNoCFSRatio(useCompoundFiles ? 1.0 : 0.0);\n      IndexWriter writer = new IndexWriter(directory, conf);\n      if (VERBOSE) {\n        System.out.println(\"TEST: now build index MAX_DOCS=\" + MAX_DOCS);\n      }\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(newTextField(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES));\n        d.add(new IntField(ID_FIELD, j, Field.Store.YES));\n        d.add(new NumericDocValuesField(ID_FIELD, j));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      IndexReader reader = DirectoryReader.open(directory);\n      IndexSearcher searcher = newSearcher(reader);\n\n      Query query = new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY));\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n      if (VERBOSE) {\n        System.out.println(\"TEST: search query=\" + query);\n      }\n\n      final Sort sort = new Sort(SortField.FIELD_SCORE,\n                                 new SortField(ID_FIELD, SortField.Type.INT));\n\n      ScoreDoc[] hits = searcher.search(query, MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      // try a new search with OR\n      searcher = newSearcher(reader);\n      hits = null;\n\n      BooleanQuery.Builder booleanQuery = new BooleanQuery.Builder();\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, HIGH_PRIORITY)), BooleanClause.Occur.SHOULD);\n      booleanQuery.add(new TermQuery(new Term(PRIORITY_FIELD, MED_PRIORITY)), BooleanClause.Occur.SHOULD);\n      out.println(\"Query: \" + booleanQuery.build().toString(PRIORITY_FIELD));\n\n      hits = searcher.search(booleanQuery.build(), MAX_DOCS, sort).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      reader.close();\n      directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["1ecad93cf44bc23303e62731a56177acaa4514a6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["088a7ef694fd43d5d9a4d200c4005865f773d1e7","59a0020b413d44dd79d85d7a66ed5004265fb453"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"770342641f7b505eaa8dccdc666158bff2419109":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"1ecad93cf44bc23303e62731a56177acaa4514a6":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"1ecad93cf44bc23303e62731a56177acaa4514a6":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["770342641f7b505eaa8dccdc666158bff2419109"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1ecad93cf44bc23303e62731a56177acaa4514a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}