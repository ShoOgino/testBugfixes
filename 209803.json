{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#findSinkState(Automaton).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#findSinkState(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns sink state, if present, else -1. */\n  private static int findSinkState(Automaton automaton) {\n    int numStates = automaton.getNumStates();\n    Transition t = new Transition();\n    int foundState = -1;\n    for (int s=0;s<numStates;s++) {\n      if (automaton.isAccept(s)) {\n        int count = automaton.initTransition(s, t);\n        boolean isSinkState = false;\n        for(int i=0;i<count;i++) {\n          automaton.getNextTransition(t);\n          if (t.dest == s && t.min == 0 && t.max == 0xff) {\n            isSinkState = true;\n            break;\n          }\n        }\n        if (isSinkState) {\n          foundState = s;\n          break;\n        }\n      }\n    }\n\n    return foundState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#findSinkState(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns sink state, if present, else -1. */\n  private static int findSinkState(Automaton automaton) {\n    int numStates = automaton.getNumStates();\n    Transition t = new Transition();\n    int foundState = -1;\n    for (int s=0;s<numStates;s++) {\n      if (automaton.isAccept(s)) {\n        int count = automaton.initTransition(s, t);\n        boolean isSinkState = false;\n        for(int i=0;i<count;i++) {\n          automaton.getNextTransition(t);\n          if (t.dest == s && t.min == 0 && t.max == 0xff) {\n            isSinkState = true;\n            break;\n          }\n        }\n        if (isSinkState) {\n          foundState = s;\n          break;\n        }\n      }\n    }\n\n    return foundState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e8715d826e588419327562287d5d6a8040d63d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}