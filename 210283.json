{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testNoTerms().mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testNoTerms().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testNoTerms().mjava","sourceNew":"  public void testNoTerms() {\n    List<Term> emptyTerms = Collections.emptyList();\n    List<BytesRef> emptyBytesRef = Collections.emptyList();\n    try {\n      new TermsQuery(emptyTerms);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(emptyTerms.toArray(new Term[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(null, emptyBytesRef.toArray(new BytesRef[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(null, emptyBytesRef);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n  }\n\n","sourceOld":"  public void testNoTerms() {\n    List<Term> emptyTerms = Collections.emptyList();\n    List<BytesRef> emptyBytesRef = Collections.emptyList();\n    try {\n      new TermsFilter(emptyTerms);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n    \n    try {\n      new TermsFilter(emptyTerms.toArray(new Term[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n    \n    try {\n      new TermsFilter(null, emptyBytesRef.toArray(new BytesRef[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n    \n    try {\n      new TermsFilter(null, emptyBytesRef);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54410d37fe11baed59cc55dcad44db795f732c2","date":1430995912,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testNoTerms().mjava","sourceNew":null,"sourceOld":"  public void testNoTerms() {\n    List<Term> emptyTerms = Collections.emptyList();\n    List<BytesRef> emptyBytesRef = Collections.emptyList();\n    try {\n      new TermsQuery(emptyTerms);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(emptyTerms.toArray(new Term[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(null, emptyBytesRef.toArray(new BytesRef[0]));\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n\n    try {\n      new TermsQuery(null, emptyBytesRef);\n      fail(\"must fail - no terms!\");\n    } catch (IllegalArgumentException e) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a54410d37fe11baed59cc55dcad44db795f732c2":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a54410d37fe11baed59cc55dcad44db795f732c2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"a54410d37fe11baed59cc55dcad44db795f732c2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a54410d37fe11baed59cc55dcad44db795f732c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}