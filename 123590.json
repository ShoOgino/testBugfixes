{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":"    public void testEnablingNorms() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, pre flush\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 8) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      searcher.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 26) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      searcher.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    public void testEnablingNorms() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, pre flush\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 8) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      searcher.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 26) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      searcher.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testEnablingNorms().mjava","sourceNew":null,"sourceOld":"    public void testEnablingNorms() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, pre flush\n      for(int j=0;j<10;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 8) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      Term searchTerm = new Term(\"field\", \"aaa\");\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(10, hits.length);\n      searcher.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      // Enable norms for only 1 doc, post flush\n      for(int j=0;j<27;j++) {\n        Document doc = new Document();\n        Field f = new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED); \n        if (j != 26) {\n          f.setOmitNorms(true);\n        }\n        doc.add(f);\n        writer.addDocument(doc);\n      }\n      writer.close();\n      searcher = new IndexSearcher(dir, false);\n      hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(27, hits.length);\n      searcher.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}