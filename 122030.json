{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testHist().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testHist().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testHist().mjava","sourceNew":"  @Test\n  public void testHist() throws Exception {\n    String expr = \"hist(sequence(100, 0, 1), 10)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 10);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 10);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 10*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 9.166666666666666);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 3.0276503540974917);\n    }\n\n    expr = \"hist(sequence(100, 0, 1), 5)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 5);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 20);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 20*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 35);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 5.916079783099616);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHist() throws Exception {\n    String expr = \"hist(sequence(100, 0, 1), 10)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 10);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 10);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 10*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 9.166666666666666);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 3.0276503540974917);\n    }\n\n    expr = \"hist(sequence(100, 0, 1), 5)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 5);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 20);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 20*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 35);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 5.916079783099616);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testHist().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testHist().mjava","sourceNew":"  @Test\n  public void testHist() throws Exception {\n    String expr = \"hist(sequence(100, 0, 1), 10)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 10);\n    for(int i=0; i<tuples.size(); i++) {\n      Tuple stats = tuples.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 10);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 10*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 9.166666666666666);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 3.0276503540974917);\n    }\n\n    expr = \"hist(sequence(100, 0, 1), 5)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 5);\n\n    for(int i=0; i<tuples.size(); i++) {\n      Tuple stats = tuples.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 20);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 20*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 35);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 5.916079783099616);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHist() throws Exception {\n    String expr = \"hist(sequence(100, 0, 1), 10)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Map> hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 10);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 10);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 10*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 9.166666666666666);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 3.0276503540974917);\n    }\n\n    expr = \"hist(sequence(100, 0, 1), 5)\";\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    solrStream = new SolrStream(url, paramsLoc);\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    hist = (List<Map>)tuples.get(0).get(\"return-value\");\n    assertTrue(hist.size() == 5);\n    for(int i=0; i<hist.size(); i++) {\n      Map stats = hist.get(i);\n      assertTrue(((Number)stats.get(\"N\")).intValue() == 20);\n      assertTrue(((Number)stats.get(\"min\")).intValue() == 20*i);\n      assertTrue(((Number)stats.get(\"var\")).doubleValue() == 35);\n      assertTrue(((Number)stats.get(\"stdev\")).doubleValue() == 5.916079783099616);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}