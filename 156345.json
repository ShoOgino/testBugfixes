{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n  }\n\n","sourceOld":"\t/*\n\t * Test that position increments are adjusted correctly for stopwords.\n\t */\n\t// note this test uses stopfilter's stopset\n\tpublic void testPositionIncrements() throws Exception {\n\t  final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t \n\t  // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(TEST_VERSION_CURRENT, StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81220b46d5c5e6263123603452e529484114fd01","date":1530284828,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer#testPositionIncrements().mjava","sourceNew":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","sourceOld":"  /*\n   * Test that position increments are adjusted correctly for stopwords.\n   */\n  // note this test uses stopfilter's stopset\n  public void testPositionIncrements() throws Exception {\n    final ThaiAnalyzer analyzer = new ThaiAnalyzer(StopAnalyzer.ENGLISH_STOP_WORDS_SET);\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้อง the แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 18, 22, 25, 28 },\n        new int[] { 3, 6, 9, 13, 22, 25, 28, 30 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n   \n    // case that a stopword is adjacent to thai text, with no whitespace\n    assertAnalyzesTo(analyzer, \"การที่ได้ต้องthe แสดงว่างานดี\", \n        new String[] { \"การ\", \"ที่\", \"ได้\", \"ต้อง\", \"แสดง\", \"ว่า\", \"งาน\", \"ดี\" },\n        new int[] { 0, 3, 6, 9, 17, 21, 24, 27 },\n        new int[] { 3, 6, 9, 13, 21, 24, 27, 29 },\n        new int[] { 1, 1, 1, 1, 2, 1, 1, 1 });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a56958d7f71a28824f20031ffbb2e13502a0274e","81220b46d5c5e6263123603452e529484114fd01"],"81220b46d5c5e6263123603452e529484114fd01":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81220b46d5c5e6263123603452e529484114fd01"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a56958d7f71a28824f20031ffbb2e13502a0274e","81220b46d5c5e6263123603452e529484114fd01"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"81220b46d5c5e6263123603452e529484114fd01":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81220b46d5c5e6263123603452e529484114fd01","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}