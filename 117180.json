{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeLong(ord);\n    out.writeInt(docID);\n    count++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca","date":1457777566,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (longOrds) {\n      out.writeLong(ord);\n    } else {\n      assert ord <= Integer.MAX_VALUE;\n      out.writeInt((int) ord);\n    }\n    out.writeInt(docID);\n    count++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeLong(ord);\n    out.writeInt(docID);\n    count++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    out.writeInt(docID);\n    count++;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (longOrds) {\n      out.writeLong(ord);\n    } else {\n      assert ord <= Integer.MAX_VALUE;\n      out.writeInt((int) ord);\n    }\n    out.writeInt(docID);\n    count++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    out.writeInt(docID);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    out.writeInt(docID);\n    count++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc57257d8a309205ebefdf9ee778da293673f599","date":1458828168,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeInt(docID);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    out.writeInt(docID);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":6,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(BytesRef packedValue, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue.bytes, packedValue.offset, packedValue.length);\n    out.writeInt(docID);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeInt(docID);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#append(byte[],long,int).mjava","sourceNew":"  @Override\n  public void append(byte[] packedValue, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeInt(docID);\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","sourceOld":"  @Override\n  public void append(byte[] packedValue, long ord, int docID) throws IOException {\n    assert packedValue.length == packedBytesLength;\n    out.writeBytes(packedValue, 0, packedValue.length);\n    out.writeInt(docID);\n    if (singleValuePerDoc == false) {\n      if (longOrds) {\n        out.writeLong(ord);\n      } else {\n        assert ord <= Integer.MAX_VALUE;\n        out.writeInt((int) ord);\n      }\n    }\n    count++;\n    assert expectedCount == 0 || count <= expectedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["bc57257d8a309205ebefdf9ee778da293673f599"],"bc57257d8a309205ebefdf9ee778da293673f599":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["bc57257d8a309205ebefdf9ee778da293673f599"],"9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["9a5a0f27d9486cd33de88627ed3d2ff8dc5074ca"],"bc57257d8a309205ebefdf9ee778da293673f599":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}