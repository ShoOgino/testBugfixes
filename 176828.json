{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,int).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores, float boost)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          boost,\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity(needsScores);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n\n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(\n          searcher.collectionStatistics(field),\n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["485545da3b4429d6f138b4baac573a97820ee93b"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"485545da3b4429d6f138b4baac573a97820ee93b":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2dfdf766e55e943d942055d7de53c7ad6bc45283","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["485545da3b4429d6f138b4baac573a97820ee93b"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"485545da3b4429d6f138b4baac573a97820ee93b":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}