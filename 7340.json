{"path":"lucene/core/src/java/org/apache/lucene/search/FuzzyAutomatonBuilder#FuzzyAutomatonBuilder(String,int,int,boolean).mjava","commits":[{"id":"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6","date":1588847334,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FuzzyAutomatonBuilder#FuzzyAutomatonBuilder(String,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum#buildAutomata(int[],int,boolean,int).mjava","sourceNew":"  FuzzyAutomatonBuilder(String term, int maxEdits, int prefixLength, boolean transpositions) {\n    if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      throw new IllegalArgumentException(\"max edits must be 0..\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + \", inclusive; got: \" + maxEdits);\n    }\n    if (prefixLength < 0) {\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    }\n    this.term = term;\n    this.maxEdits = maxEdits;\n    int[] codePoints = stringToUTF32(term);\n    this.termLength = codePoints.length;\n    prefixLength = Math.min(prefixLength, codePoints.length);\n    int[] suffix = new int[codePoints.length - prefixLength];\n    System.arraycopy(codePoints, prefixLength, suffix, 0, suffix.length);\n    this.levBuilder = new LevenshteinAutomata(suffix, Character.MAX_CODE_POINT, transpositions);\n    this.prefix = UnicodeUtil.newString(codePoints, 0, prefixLength);\n  }\n\n","sourceOld":"  private static Automaton[] buildAutomata(int[] termText, int prefixLength, boolean transpositions, int maxEdits) {\n    if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {\n      throw new IllegalArgumentException(\"max edits must be 0..\" + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + \", inclusive; got: \" + maxEdits);\n    }\n    if (prefixLength < 0) {\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    }\n    Automaton[] automata = new Automaton[maxEdits + 1];\n    int termLength = termText.length;\n    prefixLength = Math.min(prefixLength, termLength);\n    String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);\n    LevenshteinAutomata builder = new LevenshteinAutomata(suffix, transpositions);\n    String prefix = UnicodeUtil.newString(termText, 0, prefixLength);\n    for (int i = 0; i <= maxEdits; i++) {\n      automata[i] = builder.toAutomaton(i, prefix);\n    }\n    return automata;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad855e2f1f69c5e330d1027a5d54f8814e47a0d6"],"ad855e2f1f69c5e330d1027a5d54f8814e47a0d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}