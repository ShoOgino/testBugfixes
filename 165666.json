{"path":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","pathOld":"/dev/null","sourceNew":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.streamCount = consumer.streamCount;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (int) (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","sourceNew":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (int) (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.streamCount = consumer.streamCount;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (int) (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","sourceNew":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (int) (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash).mjava","sourceNew":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","sourceOld":"  public TermsHash(final DocumentsWriter docWriter, boolean trackAllocations, final TermsHashConsumer consumer, final TermsHash nextTermsHash) {\n    this.docWriter = docWriter;\n    this.consumer = consumer;\n    this.nextTermsHash = nextTermsHash;\n    this.trackAllocations = trackAllocations;\n\n    // Why + 4*POINTER_NUM_BYTE below?\n    //   +1: Posting is referenced by postingsFreeList array\n    //   +3: Posting is referenced by hash, which\n    //       targets 25-50% fill factor; approximate this\n    //       as 3X # pointers\n    bytesPerPosting = consumer.bytesPerPosting() + 4*DocumentsWriter.POINTER_NUM_BYTE;\n    postingsFreeChunk = (DocumentsWriter.BYTE_BLOCK_SIZE / bytesPerPosting);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"902ba79f4590a41c663c447756d2e5041cbbdda9":["5350389bf83287111f7760b9e3db3af8e3648474"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"5350389bf83287111f7760b9e3db3af8e3648474":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}