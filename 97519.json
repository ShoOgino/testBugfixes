{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","sourceNew":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      // TODO: remove this check when 3.x indexes are no longer supported\n      // (3.x indexes don't have docvalues)\n      if (docsConsumer == null) {\n        return;\n      }\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","sourceOld":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      // TODO: remove this check when 3.x indexes are no longer supported\n      // (3.x indexes don't have docvalues)\n      if (docsConsumer == null) {\n        return;\n      }\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661eda9480ac1897795003539b76970830bb172","date":1339428754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","sourceNew":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      assert docsConsumer != null;\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","sourceOld":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      // TODO: remove this check when 3.x indexes are no longer supported\n      // (3.x indexes don't have docvalues)\n      if (docsConsumer == null) {\n        return;\n      }\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      assert docsConsumer != null;\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentMerger#mergePerDoc(SegmentWriteState).mjava","sourceNew":null,"sourceOld":"  private void mergePerDoc(SegmentWriteState segmentWriteState) throws IOException {\n      final PerDocConsumer docsConsumer = codec.docValuesFormat()\n          .docsConsumer(new PerDocWriteState(segmentWriteState));\n      assert docsConsumer != null;\n      boolean success = false;\n      try {\n        docsConsumer.merge(mergeState);\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(docsConsumer);\n        } else {\n          IOUtils.closeWhileHandlingException(docsConsumer);\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c661eda9480ac1897795003539b76970830bb172","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["c661eda9480ac1897795003539b76970830bb172"],"c661eda9480ac1897795003539b76970830bb172":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c661eda9480ac1897795003539b76970830bb172"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c661eda9480ac1897795003539b76970830bb172":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}