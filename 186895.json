{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","commits":[{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":null,"sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","sourceNew":null,"sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2e9861e4a2b724d9fc51b618714c579491b78d7"]},"commit2Childs":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["f2e9861e4a2b724d9fc51b618714c579491b78d7","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}