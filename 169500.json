{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","commits":[{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowMultiReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores) throws Exception {\n\n    // TODO: swap in caching, all groups collector here\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      final AbstractFirstPassGroupingCollector c = createRandomFirstPassCollector(\"group\", groupSort, groupOffset+topNGroups);\n      firstPassGroupingCollectors.add(c);\n      subSearchers[shardIDX].search(w, c);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(c, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\"  merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n        final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector c = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, c);\n        shardTopGroups[shardIDX] = getTopGroups(c, 0);\n      }\n\n      return TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","date":1327854270,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowMultiReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowMultiReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector<?>>();\n    AbstractFirstPassGroupingCollector<?> firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector<?>>();\n    AbstractFirstPassGroupingCollector<?> firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector>();\n    AbstractFirstPassGroupingCollector firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings(\"unchecked\")\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#searchShards(IndexSearcher,ShardSearcher[],Query,Sort,Sort,int,int,int,int,boolean,boolean,boolean,boolean,ValueHolder[Boolean]).mjava","sourceNew":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector<?>>();\n    AbstractFirstPassGroupingCollector<?> firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private TopGroups<BytesRef> searchShards(IndexSearcher topSearcher, ShardSearcher[] subSearchers, Query query, Sort groupSort, Sort docSort, int groupOffset, int topNGroups, int docOffset,\n                                           int topNDocs, boolean getScores, boolean getMaxScores, boolean canUseIDV, boolean preFlex, ValueHolder<Boolean> usedIdvBasedImpl) throws Exception {\n\n    // TODO: swap in caching, all groups collector hereassertEquals(expected.totalHitCount, actual.totalHitCount);\n    // too...\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + subSearchers.length + \" shards: \" + Arrays.toString(subSearchers));\n    }\n    // Run 1st pass collector to get top groups per shard\n    final Weight w = topSearcher.createNormalizedWeight(query);\n    final List<Collection<SearchGroup<BytesRef>>> shardGroups = new ArrayList<Collection<SearchGroup<BytesRef>>>();\n    List<AbstractFirstPassGroupingCollector<?>> firstPassGroupingCollectors = new ArrayList<AbstractFirstPassGroupingCollector<?>>();\n    AbstractFirstPassGroupingCollector<?> firstPassCollector = null;\n    for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n      if (SlowCompositeReaderWrapper.class.isAssignableFrom(subSearchers[shardIDX].getIndexReader().getClass())) {\n        canUseIDV = false;\n      } else {\n        canUseIDV = !preFlex;\n      }\n\n      if (firstPassCollector == null) {\n        firstPassCollector = createRandomFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, canUseIDV);\n        if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassCollector.getClass())) {\n          usedIdvBasedImpl.value = true;\n        }\n      } else {\n        firstPassCollector = createFirstPassCollector(\"group\", groupSort, groupOffset + topNGroups, firstPassCollector);\n      }\n      firstPassGroupingCollectors.add(firstPassCollector);\n      subSearchers[shardIDX].search(w, firstPassCollector);\n      final Collection<SearchGroup<BytesRef>> topGroups = getSearchGroups(firstPassCollector, 0, true);\n      if (topGroups != null) {\n        if (VERBOSE) {\n          System.out.println(\"  shard \" + shardIDX + \" s=\" + subSearchers[shardIDX] + \" \" + topGroups.size() + \" groups:\");\n          for(SearchGroup<BytesRef> group : topGroups) {\n            System.out.println(\"    \" + groupToString(group.groupValue) + \" groupSort=\" + Arrays.toString(group.sortValues));\n          }\n        }\n        shardGroups.add(topGroups);\n      }\n    }\n\n    final Collection<SearchGroup<BytesRef>> mergedTopGroups = SearchGroup.merge(shardGroups, groupOffset, topNGroups, groupSort);\n    if (VERBOSE) {\n      System.out.println(\" top groups merged:\");\n      if (mergedTopGroups == null) {\n        System.out.println(\"    null\");\n      } else {\n        System.out.println(\"    \" + mergedTopGroups.size() + \" top groups:\");\n        for(SearchGroup<BytesRef> group : mergedTopGroups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.sortValues));\n        }\n      }\n    }\n\n    if (mergedTopGroups != null) {\n      // Now 2nd pass:\n      @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n      final TopGroups<BytesRef>[] shardTopGroups = new TopGroups[subSearchers.length];\n      for(int shardIDX=0;shardIDX<subSearchers.length;shardIDX++) {\n        final AbstractSecondPassGroupingCollector<?> secondPassCollector = createSecondPassCollector(firstPassGroupingCollectors.get(shardIDX),\n            \"group\", mergedTopGroups, groupSort, docSort, docOffset + topNDocs, getScores, getMaxScores, true);\n        subSearchers[shardIDX].search(w, secondPassCollector);\n        shardTopGroups[shardIDX] = getTopGroups(secondPassCollector, 0);\n        if (VERBOSE) {\n          System.out.println(\" \" + shardTopGroups[shardIDX].groups.length + \" shard[\" + shardIDX + \"] groups:\");\n          for(GroupDocs<BytesRef> group : shardTopGroups[shardIDX].groups) {\n            System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues) + \" numDocs=\" + group.scoreDocs.length);\n          }\n        }\n      }\n\n      TopGroups<BytesRef> mergedGroups = TopGroups.merge(shardTopGroups, groupSort, docSort, docOffset, topNDocs);\n      if (VERBOSE) {\n        System.out.println(\" \" + mergedGroups.groups.length + \" merged groups:\");\n        for(GroupDocs<BytesRef> group : mergedGroups.groups) {\n          System.out.println(\"    [\" + groupToString(group.groupValue) + \"] groupSort=\" + Arrays.toString(group.groupSortValues)  + \" numDocs=\" + group.scoreDocs.length);\n        }\n      }\n      return mergedGroups;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["5cab9a86bd67202d20b6adc463008c8e982b070a","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["4739c84c362b9673ab5ed3e038ff760c718c30c8","7528ec8c6e88061e2e6af98c4ae1f72a30f180b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7528ec8c6e88061e2e6af98c4ae1f72a30f180b2":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["7528ec8c6e88061e2e6af98c4ae1f72a30f180b2","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}