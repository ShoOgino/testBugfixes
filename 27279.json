{"path":"src/test/org/apache/solr/highlight/HighlighterTest#testRegexFragmenter().mjava","commits":[{"id":"94251da2db5138d2a83776d362239f1fffc18786","date":1184909663,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/highlight/HighlighterTest#testRegexFragmenter().mjava","pathOld":"/dev/null","sourceNew":"  public void testRegexFragmenter() {\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.snippets\", \"10\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.fragmenter\", \"regex\");\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,\\\"']{20,200}\");\n    args.put(\"hl.regex.slop\", \".9\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    String t = \"This is an example of a sentence. Another example \\\"sentence\\\" with \" +\n      \"special characters\\nand a line-break! Miscellaneous character like ^ are \" +\n      \"unknowns and end up being bad example s of sentences? I wonder how \" +\n      \"slashes/other punctuation fare in these examples?\";\n    assertU(adoc(\"t_text\", t, \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"regex fragmenter\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.=' ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='/other punctuation fare in these <em>examples</em>?']\"\n            );\n    // try with some punctuation included\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,^/\\\\n\\\"']{20,200}\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"regex fragmenter 2\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.='! Miscellaneous character like ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='? I wonder how slashes/other punctuation fare in these <em>examples</em>?']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/highlight/HighlighterTest#testRegexFragmenter().mjava","pathOld":"src/test/org/apache/solr/highlight/HighlighterTest#testRegexFragmenter().mjava","sourceNew":"  public void testRegexFragmenter() {\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.snippets\", \"10\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.fragmenter\", \"regex\");\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,\\\"']{20,200}\");\n    args.put(\"hl.regex.slop\", \".9\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    String t = \"This is an example of a sentence. Another example \\\"sentence\\\" with \" +\n      \"special characters\\nand a line-break! Miscellaneous character like ^ are \" +\n      \"unknowns and end up being bad example s of sentences? I wonder how \" +\n      \"slashes/other punctuation fare in these examples?\";\n    assertU(adoc(\"t_text\", t, \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"regex fragmenter\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.=' ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='/other punctuation fare in these <em>examples</em>?']\"\n            );\n    // try with some punctuation included\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,^/\\\\n\\\"']{20,200}\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"regex fragmenter 2\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.='! Miscellaneous character like ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='? I wonder how slashes/other punctuation fare in these <em>examples</em>?']\"\n            );\n  }\n\n","sourceOld":"  public void testRegexFragmenter() {\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"fl\", \"id score\");\n    args.put(\"hl\", \"true\");\n    args.put(\"hl.snippets\", \"10\");\n    args.put(\"hl.fl\", \"t_text\");\n    args.put(\"hl.fragmenter\", \"regex\");\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,\\\"']{20,200}\");\n    args.put(\"hl.regex.slop\", \".9\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    String t = \"This is an example of a sentence. Another example \\\"sentence\\\" with \" +\n      \"special characters\\nand a line-break! Miscellaneous character like ^ are \" +\n      \"unknowns and end up being bad example s of sentences? I wonder how \" +\n      \"slashes/other punctuation fare in these examples?\";\n    assertU(adoc(\"t_text\", t, \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"regex fragmenter\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.=' ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='/other punctuation fare in these <em>examples</em>?']\"\n            );\n    // try with some punctuation included\n    args.put(\"hl.regex.pattern\", \"[-\\\\w ,^/\\\\n\\\"']{20,200}\");\n    sumLRF = h.getRequestFactory(\"standard\", 0, 200, args);\n    assertQ(\"regex fragmenter 2\",\n            sumLRF.makeRequest(\"t_text:example\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//arr/str[.='This is an <em>example</em> of a sentence']\",\n            \"//arr/str[.='. Another <em>example</em> \\\"sentence\\\" with special characters\\nand a line-break']\",\n            \"//arr/str[.='! Miscellaneous character like ^ are unknowns and end up being bad <em>example</em> s of sentences']\",\n            \"//arr/str[.='? I wonder how slashes/other punctuation fare in these <em>examples</em>?']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"94251da2db5138d2a83776d362239f1fffc18786":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["94251da2db5138d2a83776d362239f1fffc18786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["94251da2db5138d2a83776d362239f1fffc18786"],"94251da2db5138d2a83776d362239f1fffc18786":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}