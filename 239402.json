{"path":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/cache/HttpCacheHeaderUtil#setCacheControlHeader(SolrConfig,HttpServletResponse,Method).mjava","sourceNew":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", timeNowForHeader() + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","sourceOld":"  /**\n   * Set the Cache-Control HTTP header (and Expires if needed)\n   * based on the SolrConfig.\n   * @param conf The config of the SolrCore handling this request\n   * @param resp The servlet response object to modify\n   * @param method The request method (GET, POST, ...) used by this request\n   */\n  public static void setCacheControlHeader(final SolrConfig conf,\n                                           final HttpServletResponse resp, final Method method) {\n    // We do not emit HTTP header for POST and OTHER request types\n    if (Method.POST==method || Method.OTHER==method) {\n      return;\n    }\n    final String cc = conf.getHttpCachingConfig().getCacheControlHeader();\n    if (null != cc) {\n      resp.setHeader(\"Cache-Control\", cc);\n    }\n    Long maxAge = conf.getHttpCachingConfig().getMaxAge();\n    if (null != maxAge) {\n      resp.setDateHeader(\"Expires\", System.currentTimeMillis()\n                         + (maxAge * 1000L));\n    }\n\n    return;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcf9886c8ff537aafde14de48ebf744f5673f08b"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}