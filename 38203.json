{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","commits":[{"id":"e83c877790b7f4ea5dfb59843a8b7a1a98917266","date":1487986392,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      client.setDefaultCollection(\"misconfigured-alias\");\n\n      CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n      CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n      CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n      List<SolrInputDocument> docs = new ArrayList<>();\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, Integer.toString(1));\n      docs.add(doc);\n\n      try {\n        client.add(docs);\n        fail(\"Alias points to non-existing collection, add should fail\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected error exception\", e.getMessage().contains(\"Collection not found\"));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["792974cced7f32c3088916ef0a8642fd9be41404"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"792974cced7f32c3088916ef0a8642fd9be41404","date":1487986664,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","sourceNew":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      client.setDefaultCollection(\"misconfigured-alias\");\n\n      CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n      CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n      CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n      List<SolrInputDocument> docs = new ArrayList<>();\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, Integer.toString(1));\n      docs.add(doc);\n\n      try {\n        client.add(docs);\n        fail(\"Alias points to non-existing collection, add should fail\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      client.setDefaultCollection(\"misconfigured-alias\");\n\n      CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n      CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n      CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n      List<SolrInputDocument> docs = new ArrayList<>();\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, Integer.toString(1));\n      docs.add(doc);\n\n      try {\n        client.add(docs);\n        fail(\"Alias points to non-existing collection, add should fail\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected error exception\", e.getMessage().contains(\"Collection not found\"));\n      }\n    }\n  }\n\n","bugFix":["e83c877790b7f4ea5dfb59843a8b7a1a98917266"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","sourceNew":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    CloudSolrClient client = getRandomClient();\n\n    CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n    CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n    CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(id, Integer.toString(1));\n    docs.add(doc);\n\n    try {\n      client.add(\"misconfigured-alias\", docs);\n      fail(\"Alias points to non-existing collection, add should fail\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      client.setDefaultCollection(\"misconfigured-alias\");\n\n      CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n      CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n      CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n      List<SolrInputDocument> docs = new ArrayList<>();\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, Integer.toString(1));\n      docs.add(doc);\n\n      try {\n        client.add(docs);\n        fail(\"Alias points to non-existing collection, add should fail\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","sourceNew":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    CloudSolrClient client = getRandomClient();\n\n    CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n    CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n    CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(id, Integer.toString(1));\n    docs.add(doc);\n\n    try {\n      client.add(\"misconfigured-alias\", docs);\n      fail(\"Alias points to non-existing collection, add should fail\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    try (CloudSolrClient client = getCloudSolrClient(cluster.getZkServer().getZkAddress())) {\n      client.setDefaultCollection(\"misconfigured-alias\");\n\n      CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n      CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n      CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n      List<SolrInputDocument> docs = new ArrayList<>();\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(id, Integer.toString(1));\n      docs.add(doc);\n\n      try {\n        client.add(docs);\n        fail(\"Alias points to non-existing collection, add should fail\");\n      } catch (SolrException e) {\n        assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n        assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b342321d8906f4b19f6f87ea33ea3fff12bffa7","date":1515547632,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    CloudSolrClient client = getRandomClient();\n\n    CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n    CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n    CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(id, Integer.toString(1));\n    docs.add(doc);\n\n    try {\n      client.add(\"misconfigured-alias\", docs);\n      fail(\"Alias points to non-existing collection, add should fail\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testHandlingOfStaleAlias().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHandlingOfStaleAlias() throws Exception {\n    CloudSolrClient client = getRandomClient();\n\n    CollectionAdminRequest.createCollection(\"nemesis\", \"conf\", 2, 1).process(client);\n    CollectionAdminRequest.createAlias(\"misconfigured-alias\", \"nemesis\").process(client);\n    CollectionAdminRequest.deleteCollection(\"nemesis\").process(client);\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(id, Integer.toString(1));\n    docs.add(doc);\n\n    try {\n      client.add(\"misconfigured-alias\", docs);\n      fail(\"Alias points to non-existing collection, add should fail\");\n    } catch (SolrException e) {\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n      assertTrue(\"Unexpected exception\", e.getMessage().contains(\"Collection not found\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["792974cced7f32c3088916ef0a8642fd9be41404"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a64b273d51a6540272668680ece9f8b686ff0004","4b342321d8906f4b19f6f87ea33ea3fff12bffa7"],"a64b273d51a6540272668680ece9f8b686ff0004":["792974cced7f32c3088916ef0a8642fd9be41404"],"4b342321d8906f4b19f6f87ea33ea3fff12bffa7":["a64b273d51a6540272668680ece9f8b686ff0004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"792974cced7f32c3088916ef0a8642fd9be41404":["e83c877790b7f4ea5dfb59843a8b7a1a98917266"],"e83c877790b7f4ea5dfb59843a8b7a1a98917266":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a64b273d51a6540272668680ece9f8b686ff0004":["b94236357aaa22b76c10629851fe4e376e0cea82","4b342321d8906f4b19f6f87ea33ea3fff12bffa7"],"4b342321d8906f4b19f6f87ea33ea3fff12bffa7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e83c877790b7f4ea5dfb59843a8b7a1a98917266"],"792974cced7f32c3088916ef0a8642fd9be41404":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"e83c877790b7f4ea5dfb59843a8b7a1a98917266":["792974cced7f32c3088916ef0a8642fd9be41404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}