{"path":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","commits":[{"id":"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6","date":1069355441,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2285750e6d83bf7de3809e562fcb0d2e5675b97e","1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6627e96da3f5efc85314b83db335fea8518ad464","date":1117908960,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   * @deprecated use {@link #isCurrent()} instead\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe","date":1118175686,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number counts the\n   * number of changes of the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   * @deprecated use {@link #isCurrent()} instead\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2285750e6d83bf7de3809e562fcb0d2e5675b97e","date":1135305503,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    synchronized (directory) {                 // in- & inter-process sync\n      Lock commitLock=directory.makeLock(IndexWriter.COMMIT_LOCK_NAME);\n      \n      boolean locked=false;\n      \n      try {\n         locked=commitLock.obtain(IndexWriter.COMMIT_LOCK_TIMEOUT);\n         \n         return SegmentInfos.readCurrentVersion(directory);\n      } finally {\n        if (locked) {\n          commitLock.release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","bugFix":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    synchronized (directory) {                 // in- & inter-process sync\n      Lock commitLock=directory.makeLock(IndexWriter.COMMIT_LOCK_NAME);\n\n      boolean locked=false;\n\n      try {\n         locked=commitLock.obtain(IndexWriter.COMMIT_LOCK_TIMEOUT);\n\n         return SegmentInfos.readCurrentVersion(directory);\n      } finally {\n        if (locked) {\n          commitLock.release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    synchronized (directory) {                 // in- & inter-process sync\n      Lock commitLock=directory.makeLock(IndexWriter.COMMIT_LOCK_NAME);\n      \n      boolean locked=false;\n      \n      try {\n         locked=commitLock.obtain(IndexWriter.COMMIT_LOCK_TIMEOUT);\n         \n         return SegmentInfos.readCurrentVersion(directory);\n      } finally {\n        if (locked) {\n          commitLock.release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    synchronized (directory) {                 // in- & inter-process sync\n      Lock commitLock=directory.makeLock(IndexWriter.COMMIT_LOCK_NAME);\n\n      boolean locked=false;\n\n      try {\n         locked=commitLock.obtain(IndexWriter.COMMIT_LOCK_TIMEOUT);\n\n         return SegmentInfos.readCurrentVersion(directory);\n      } finally {\n        if (locked) {\n          commitLock.release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws IOException if segments file cannot be read.\n   */\n  public static long getCurrentVersion(Directory directory) throws IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","bugFix":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getCurrentVersion(Directory).mjava","sourceNew":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","sourceOld":"  /**\n   * Reads version number from segments files. The version number is\n   * initialized with a timestamp and then increased by one for each change of\n   * the index.\n   * \n   * @param directory where the index resides.\n   * @return version number.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static long getCurrentVersion(Directory directory) throws CorruptIndexException, IOException {\n    return SegmentInfos.readCurrentVersion(directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2285750e6d83bf7de3809e562fcb0d2e5675b97e":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"6627e96da3f5efc85314b83db335fea8518ad464":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["2285750e6d83bf7de3809e562fcb0d2e5675b97e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b54a9bc667895a2095a886184bf69a3179e63df"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["6627e96da3f5efc85314b83db335fea8518ad464"]},"commit2Childs":{"2285750e6d83bf7de3809e562fcb0d2e5675b97e":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6627e96da3f5efc85314b83db335fea8518ad464":["0060868dbe170ecf61556c5f4a6e9dfb800d5dbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6"],"6c1c4d5b9a1f3631a80687ab505cbb0debfe7cc6":["6627e96da3f5efc85314b83db335fea8518ad464"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"0060868dbe170ecf61556c5f4a6e9dfb800d5dbe":["2285750e6d83bf7de3809e562fcb0d2e5675b97e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}