{"path":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","commits":[{"id":"0caa667d4d07122cb9a0b193fba0f478680d982e","date":1300755686,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"/dev/null","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"/dev/null","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"/dev/null","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/uima/src/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider#getRuntimeValue(AnalysisEngineDescription,String).mjava","sourceNew":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","sourceOld":"  /* create the value to inject in the runtime parameter depending on its declared type */\n  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)\n          throws ClassNotFoundException {\n    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().\n                    getConfigurationParameter(null, attributeName).getType();\n    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...\n    Object val = null;\n    Object runtimeValue = runtimeParameters.get(attributeName);\n    if (runtimeValue!=null) {\n      if (\"String\".equals(type)) {\n        val = String.valueOf(runtimeValue);\n      }\n      else if (\"Integer\".equals(type)) {\n        val = Integer.valueOf(runtimeValue.toString());\n      }\n      else if (\"Boolean\".equals(type)) {\n        val = Boolean.valueOf(runtimeValue.toString());\n      }\n      else if (\"Float\".equals(type)) {\n        val = Float.valueOf(runtimeValue.toString());\n      }\n    }\n\n    return val;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0caa667d4d07122cb9a0b193fba0f478680d982e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0caa667d4d07122cb9a0b193fba0f478680d982e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["0caa667d4d07122cb9a0b193fba0f478680d982e","0caa667d4d07122cb9a0b193fba0f478680d982e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0caa667d4d07122cb9a0b193fba0f478680d982e"],"c26f00b574427b55127e869b935845554afde1fa":["0caa667d4d07122cb9a0b193fba0f478680d982e","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0caa667d4d07122cb9a0b193fba0f478680d982e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0caa667d4d07122cb9a0b193fba0f478680d982e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}