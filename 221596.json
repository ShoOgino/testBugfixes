{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","commits":[{"id":"f412711b73fe38b28bb793928ad02da8c829cff5","date":1465765014,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","sourceNew":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","sourceOld":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","sourceNew":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","sourceOld":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testDeleteIndexFilesWhileReaderStillOpen().mjava","sourceNew":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","sourceOld":"  // LUCENE-5931: we make a \"best effort\" to catch this abuse and throw a clear(er)\n  // exception than what would otherwise look like hard to explain index corruption during searching\n  public void testDeleteIndexFilesWhileReaderStillOpen() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir,\n                                    new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n    // Creates single segment index:\n    w.close();\n \n    DirectoryReader r = DirectoryReader.open(dir);\n \n    // Abuse: remove all files while reader is open; one is supposed to use IW.deleteAll, or open a new IW with OpenMode.CREATE instead:\n    for(String file : dir.listAll()) {\n      dir.deleteFile(file);\n    }\n \n    w = new IndexWriter(dir,\n                        new IndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value\", Field.Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(newStringField(\"field\", \"value2\", Field.Store.NO));\n    w.addDocument(doc);\n\n    // Writes same segment, this time with two documents:\n    w.commit();\n\n    w.deleteDocuments(new Term(\"field\", \"value2\"));\n\n    w.addDocument(doc);\n\n    // Writes another segments file, so openIfChanged sees that the index has in fact changed:\n    w.close();\n \n    expectThrows(IllegalStateException.class, () -> {\n      DirectoryReader.openIfChanged(r);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f412711b73fe38b28bb793928ad02da8c829cff5","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["f412711b73fe38b28bb793928ad02da8c829cff5"],"f412711b73fe38b28bb793928ad02da8c829cff5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f412711b73fe38b28bb793928ad02da8c829cff5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f412711b73fe38b28bb793928ad02da8c829cff5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f412711b73fe38b28bb793928ad02da8c829cff5":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4a90cc8c90aa53ddf51fbd15019989ac269514a3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d77dafd89756a5161d244985903e3487ca109182"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}