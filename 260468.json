{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe442914a786fcba929cedd8a1715fdd9c0c2dae","date":1567667544,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   * same position as if {@code arr[from:to]} was sorted, and all elements on\n   * its left are less than or equal to it, and all elements on its right are\n   * greater than or equal to it.\n   *\n   * This runs in linear time on average and in {@code n log(n)} time in the\n   * worst case.\n   *\n   * @param arr Array to be re-organized.\n   * @param from Starting index for re-organization. Elements before this index\n   *             will be left as is.\n   * @param to Ending index. Elements after this index will be left as is.\n   * @param k Index of element to sort from. Value must be less than 'to' and greater than or equal to 'from'.\n   * @param comparator Comparator to use for sorting\n   *\n   */\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460728fc2f8c1aae84c0562b509c778faf625103","date":1567695577,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":"  /**\n   * Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   * same position as if {@code arr[from:to]} was sorted, and all elements on\n   * its left are less than or equal to it, and all elements on its right are\n   * greater than or equal to it.\n   *\n   * This runs in linear time on average and in {@code n log(n)} time in the\n   * worst case.\n   *\n   * @param arr Array to be re-organized.\n   * @param from Starting index for re-organization. Elements before this index\n   *             will be left as is.\n   * @param to Ending index. Elements after this index will be left as is.\n   * @param k Index of element to sort from. Value must be less than 'to' and greater than or equal to 'from'.\n   * @param comparator Comparator to use for sorting\n   *\n   */\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f89859d16ab335d18913323f0af3fcb7b580917","date":1567704488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   * same position as if {@code arr[from:to]} was sorted, and all elements on\n   * its left are less than or equal to it, and all elements on its right are\n   * greater than or equal to it.\n   *\n   * This runs in linear time on average and in {@code n log(n)} time in the\n   * worst case.\n   *\n   * @param arr Array to be re-organized.\n   * @param from Starting index for re-organization. Elements before this index\n   *             will be left as is.\n   * @param to Ending index. Elements after this index will be left as is.\n   * @param k Index of element to sort from. Value must be less than 'to' and greater than or equal to 'from'.\n   * @param comparator Comparator to use for sorting\n   *\n   */\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"460728fc2f8c1aae84c0562b509c778faf625103":["fe442914a786fcba929cedd8a1715fdd9c0c2dae"],"9f89859d16ab335d18913323f0af3fcb7b580917":["460728fc2f8c1aae84c0562b509c778faf625103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe442914a786fcba929cedd8a1715fdd9c0c2dae":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f89859d16ab335d18913323f0af3fcb7b580917"]},"commit2Childs":{"460728fc2f8c1aae84c0562b509c778faf625103":["9f89859d16ab335d18913323f0af3fcb7b580917"],"9f89859d16ab335d18913323f0af3fcb7b580917":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"fe442914a786fcba929cedd8a1715fdd9c0c2dae":["460728fc2f8c1aae84c0562b509c778faf625103"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["fe442914a786fcba929cedd8a1715fdd9c0c2dae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}