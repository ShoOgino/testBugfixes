{"path":"src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","commits":[{"id":"1919b234a992d6438a59ccbb02bd0656162e602e","date":1242941438,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doFilterTest(SolrIndexReader).mjava","sourceNew":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","sourceOld":"  public void doFilterTest(SolrIndexReader reader) throws IOException {\n    OpenBitSet bs = getRandomSet(reader.maxDoc(), rand.nextInt(reader.maxDoc()+1));\n    DocSet a = new BitDocSet(bs);\n    DocSet b = getIntDocSet(bs);\n\n    Filter fa = a.getTopFilter();\n    Filter fb = b.getTopFilter();\n\n    // test top-level\n    DocIdSet da = fa.getDocIdSet(reader);\n    DocIdSet db = fb.getDocIdSet(reader);\n    doTestIteratorEqual(da, db);\n\n    // first test in-sequence sub readers\n    for (SolrIndexReader sir : reader.getLeafReaders()) {\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }  \n\n    int nReaders = reader.getLeafReaders().length;\n    // now test out-of-sequence sub readers\n    for (int i=0; i<nReaders; i++) {\n      SolrIndexReader sir = reader.getLeafReaders()[rand.nextInt(nReaders)];\n      da = fa.getDocIdSet(sir);\n      db = fb.getDocIdSet(sir);\n      doTestIteratorEqual(da, db);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1919b234a992d6438a59ccbb02bd0656162e602e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1919b234a992d6438a59ccbb02bd0656162e602e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1919b234a992d6438a59ccbb02bd0656162e602e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1919b234a992d6438a59ccbb02bd0656162e602e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}