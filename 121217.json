{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanScorer2#countingConjunctionSumScorer(List[Scorer]).mjava","sourceNew":null,"sourceOld":"  private Scorer countingConjunctionSumScorer(List<Scorer> requiredScorers) throws IOException {\n    // each scorer from the list counted as a single matcher\n    final int requiredNrMatchers = requiredScorers.size();\n    return new ConjunctionScorer(defaultSimilarity, requiredScorers) {\n      private int lastScoredDoc = -1;\n      // Save the score of lastScoredDoc, so that we don't compute it more than\n      // once in score().\n      private float lastDocScore = Float.NaN;\n      @Override public float score() throws IOException {\n        int doc = docID();\n        if (doc >= lastScoredDoc) {\n          if (doc > lastScoredDoc) {\n            lastDocScore = super.score();\n            lastScoredDoc = doc;\n          }\n          coordinator.nrMatchers += requiredNrMatchers;\n        }\n        // All scorers match, so defaultSimilarity super.score() always has 1 as\n        // the coordination factor.\n        // Therefore the sum of the scores of the requiredScorers\n        // is used as score.\n        return lastDocScore;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}