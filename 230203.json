{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#obtainLock(Directory,String).mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#obtainLock(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Lock obtainLock(Directory dir, String lockName) throws IOException {\n    if (!(dir instanceof HdfsDirectory)) {\n      throw new UnsupportedOperationException(\"HdfsLockFactory can only be used with HdfsDirectory subclasses, got: \" + dir);\n    }\n    final HdfsDirectory hdfsDir = (HdfsDirectory) dir;\n    final Configuration conf = hdfsDir.getConfiguration();\n    final Path lockPath = hdfsDir.getHdfsDirPath();\n    final Path lockFile = new Path(lockPath, lockName);\n    \n    FSDataOutputStream file = null;\n    final FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n    while (true) {\n      try {\n        if (!fs.exists(lockPath)) {\n          boolean success = fs.mkdirs(lockPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + lockPath);\n          }\n        } else {\n          // just to check for safe mode\n          fs.mkdirs(lockPath);\n        }\n        \n        file = fs.create(lockFile, false);\n        break;\n      } catch (FileAlreadyExistsException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\n            \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (IOException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } finally {\n        IOUtils.closeQuietly(file);\n      }\n    }\n\n    return new HdfsLock(fs, lockFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["19de89910200eb03cf148b1a5215ad2dab44116a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19de89910200eb03cf148b1a5215ad2dab44116a","date":1450442676,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#obtainLock(Directory,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#obtainLock(Directory,String).mjava","sourceNew":"  @Override\n  public Lock obtainLock(Directory dir, String lockName) throws IOException {\n    if (!(dir instanceof HdfsDirectory)) {\n      throw new UnsupportedOperationException(\"HdfsLockFactory can only be used with HdfsDirectory subclasses, got: \" + dir);\n    }\n    final HdfsDirectory hdfsDir = (HdfsDirectory) dir;\n    final Configuration conf = hdfsDir.getConfiguration();\n    final Path lockPath = hdfsDir.getHdfsDirPath();\n    final Path lockFile = new Path(lockPath, lockName);\n    \n    FSDataOutputStream file = null;\n    final FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n    while (true) {\n      try {\n        if (!fs.exists(lockPath)) {\n          boolean success = fs.mkdirs(lockPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + lockPath);\n          }\n        } else {\n          // just to check for safe mode\n          fs.mkdirs(lockPath);\n        }\n        \n        file = fs.create(lockFile, false);\n        break;\n      } catch (FileAlreadyExistsException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\n            \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (IOException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } finally {\n        IOUtils.closeQuietly(file);\n      }\n    }\n\n    return new HdfsLock(conf, lockFile);\n  }\n\n","sourceOld":"  @Override\n  public Lock obtainLock(Directory dir, String lockName) throws IOException {\n    if (!(dir instanceof HdfsDirectory)) {\n      throw new UnsupportedOperationException(\"HdfsLockFactory can only be used with HdfsDirectory subclasses, got: \" + dir);\n    }\n    final HdfsDirectory hdfsDir = (HdfsDirectory) dir;\n    final Configuration conf = hdfsDir.getConfiguration();\n    final Path lockPath = hdfsDir.getHdfsDirPath();\n    final Path lockFile = new Path(lockPath, lockName);\n    \n    FSDataOutputStream file = null;\n    final FileSystem fs = FileSystem.get(lockPath.toUri(), conf);\n    while (true) {\n      try {\n        if (!fs.exists(lockPath)) {\n          boolean success = fs.mkdirs(lockPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + lockPath);\n          }\n        } else {\n          // just to check for safe mode\n          fs.mkdirs(lockPath);\n        }\n        \n        file = fs.create(lockFile, false);\n        break;\n      } catch (FileAlreadyExistsException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\n            \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } catch (IOException e) {\n        throw new LockObtainFailedException(\"Cannot obtain lock file: \" + lockFile, e);\n      } finally {\n        IOUtils.closeQuietly(file);\n      }\n    }\n\n    return new HdfsLock(fs, lockFile);\n  }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19de89910200eb03cf148b1a5215ad2dab44116a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19de89910200eb03cf148b1a5215ad2dab44116a"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["19de89910200eb03cf148b1a5215ad2dab44116a"],"19de89910200eb03cf148b1a5215ad2dab44116a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}