{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#buildCombinedAutomaton(String,BytesRef[],CharacterRunAutomaton[],PhraseHelper).mjava","sourceNew":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases,\n                                                              Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true, multiTermQueryRewrite));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Build one {@link CharacterRunAutomaton} matching any term the query might match.\n   */\n  private static CharacterRunAutomaton buildCombinedAutomaton(String field, BytesRef[] terms,\n                                                              CharacterRunAutomaton[] automata,\n                                                              PhraseHelper strictPhrases) {\n    List<CharacterRunAutomaton> allAutomata = new ArrayList<>();\n    if (terms.length > 0) {\n      allAutomata.add(new CharacterRunAutomaton(Automata.makeStringUnion(Arrays.asList(terms))));\n    }\n    Collections.addAll(allAutomata, automata);\n    for (SpanQuery spanQuery : strictPhrases.getSpanQueries()) {\n      Collections.addAll(allAutomata,\n          MultiTermHighlighting.extractAutomata(spanQuery, field, true));//true==lookInSpan\n    }\n\n    if (allAutomata.size() == 1) {\n      return allAutomata.get(0);\n    }\n    //TODO it'd be nice if we could get at the underlying Automaton in CharacterRunAutomaton so that we\n    //  could union them all. But it's not exposed, and note TermRangeQuery isn't modelled as an Automaton\n    //  by MultiTermHighlighting.\n\n    // Return an aggregate CharacterRunAutomaton of others\n    return new CharacterRunAutomaton(Automata.makeEmpty()) {// the makeEmpty() is bogus; won't be used\n      @Override\n      public boolean run(char[] chars, int offset, int length) {\n        for (int i = 0; i < allAutomata.size(); i++) {// don't use foreach to avoid Iterator allocation\n          if (allAutomata.get(i).run(chars, offset, length)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"]},"commit2Childs":{"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}