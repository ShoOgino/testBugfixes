{"path":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testModifyResolution().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testModifyResolution().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#testModifyResolution().mjava","sourceNew":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimerThread.DEFAULT_RESOLUTION; //400\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n      // decrease much and test\n      resolution = 5;\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n      // return to default and test\n      resolution = TimerThread.DEFAULT_RESOLUTION;\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n    } finally {\n      counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimerThread.DEFAULT_RESOLUTION; //400\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n      // decrease much and test\n      resolution = 5;\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n      // return to default and test\n      resolution = TimerThread.DEFAULT_RESOLUTION;\n      counterThread.setResolution(resolution);\n      assertEquals(resolution, counterThread.getResolution());\n      doTestTimeout(false,true);\n    } finally {\n      counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}