{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","commits":[{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":0,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(\"distrib\", false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","sourceNew":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler();\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler(client);\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38d3299f414132db022cec9d60b2dafc244a7c3","date":1597046674,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#canHandleVersionRanges(String).mjava","sourceNew":null,"sourceOld":"  private boolean canHandleVersionRanges(String replica) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    requests.add(sreq);\n\n    // determine if leader can handle version ranges\n    sreq.shards = new String[] {replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\", \"/get\");\n    sreq.params.set(DISTRIB, false);\n    sreq.params.set(\"checkCanHandleVersionRanges\", false);\n\n    ShardHandler sh = shardHandlerFactory.getShardHandler();\n    sh.submit(sreq, replica, sreq.params);\n\n    ShardResponse srsp = sh.takeCompletedIncludingErrors();\n    Boolean canHandleVersionRanges = srsp.getSolrResponse().getResponse().getBooleanArg(\"canHandleVersionRanges\");\n\n    if (canHandleVersionRanges == null || canHandleVersionRanges.booleanValue() == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e511b092029d56e0d4e30204fba8509c1c2647b6"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["01624b85de12fb02335810bdf325124e59040772"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"01624b85de12fb02335810bdf325124e59040772":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c38d3299f414132db022cec9d60b2dafc244a7c3"]},"commit2Childs":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"c38d3299f414132db022cec9d60b2dafc244a7c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["c38d3299f414132db022cec9d60b2dafc244a7c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","e511b092029d56e0d4e30204fba8509c1c2647b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}