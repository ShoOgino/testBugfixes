{"path":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = httpRequest.getContextPath();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d450c0530a2765633277b632c29c54e190e3cb7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d450c0530a2765633277b632c29c54e190e3cb7e","date":1571265874,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","sourceNew":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = httpRequest.getPathInfo();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = httpRequest.getContextPath();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","bugFix":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1f4f89cef95d8efa9877bdd893d1b542c9b140","date":1574241654,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","sourceNew":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = ServletUtils.getPathAfterContext(httpRequest);\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = httpRequest.getPathInfo();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381","date":1574462060,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","sourceNew":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setResource(ServletUtils.getPathAfterContext(httpRequest));\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.resource = ServletUtils.getPathAfterContext(httpRequest);\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"857ed8617f18fa11fa0670ef980e2df7abd5310d","date":1574931311,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuditEvent#AuditEvent(EventType,Throwable,HttpServletRequest).mjava","sourceNew":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.baseUrl = httpRequest.getRequestURL().toString();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setResource(ServletUtils.getPathAfterContext(httpRequest));\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Event based on an HttpServletRequest, typically used during authentication. \n   * Solr will fill in details such as ip, http method etc from the request, and\n   * username if Principal exists on the request.\n   * @param eventType a predefined or custom EventType\n   * @param httpRequest the request to initialize from\n   */\n  public AuditEvent(EventType eventType, Throwable exception, HttpServletRequest httpRequest) {\n    this(eventType);\n    this.solrHost = httpRequest.getLocalName();\n    this.solrPort = httpRequest.getLocalPort();\n    this.solrIp = httpRequest.getLocalAddr();\n    this.clientIp = httpRequest.getRemoteAddr();\n    this.httpMethod = httpRequest.getMethod();\n    this.httpQueryString = httpRequest.getQueryString();\n    this.headers = getHeadersFromRequest(httpRequest);\n    this.requestUrl = httpRequest.getRequestURL();\n    this.nodeName = MDC.get(ZkStateReader.NODE_NAME_PROP);\n    SolrRequestParsers.parseQueryString(httpQueryString).forEach(sp -> {\n      this.solrParams.put(sp.getKey(), Arrays.asList(sp.getValue()));\n    });\n\n    setResource(ServletUtils.getPathAfterContext(httpRequest));\n    setRequestType(findRequestType());\n\n    if (exception != null) setException(exception);\n\n    Principal principal = httpRequest.getUserPrincipal();\n    if (principal != null) {\n      this.username = httpRequest.getUserPrincipal().getName();\n    } else if (eventType.equals(EventType.AUTHENTICATED)) {\n      this.eventType = ANONYMOUS;\n      this.message = ANONYMOUS.message;\n      this.level = ANONYMOUS.level;\n      log.debug(\"Audit event type changed from AUTHENTICATED to ANONYMOUS since no Principal found on request\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d450c0530a2765633277b632c29c54e190e3cb7e":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["d450c0530a2765633277b632c29c54e190e3cb7e"],"857ed8617f18fa11fa0670ef980e2df7abd5310d":["57cfb7f9d94d75c3c5cd21f100fc37ff6d984381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["857ed8617f18fa11fa0670ef980e2df7abd5310d"]},"commit2Childs":{"d450c0530a2765633277b632c29c54e190e3cb7e":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["d450c0530a2765633277b632c29c54e190e3cb7e"],"57cfb7f9d94d75c3c5cd21f100fc37ff6d984381":["857ed8617f18fa11fa0670ef980e2df7abd5310d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["57cfb7f9d94d75c3c5cd21f100fc37ff6d984381"],"857ed8617f18fa11fa0670ef980e2df7abd5310d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}