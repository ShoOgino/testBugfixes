{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testEscaped().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testEscaped().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n\n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}