{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.getFields().clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(\"UTF-8\"));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setIndexed(true);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, FieldType.LegacyNumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, LegacyNumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, NumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, NumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":null,"bugIntro":["067bb525d2e4993889147c508e2ccb5158f409b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"067bb525d2e4993889147c508e2ccb5158f409b1","date":1457385185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/DocMaker#createDocument(DocData,int,int).mjava","sourceNew":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, Long.class);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, Integer.class);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","sourceOld":"  // create a doc\n  // use only part of the body, modify it to keep the rest (or use all if size==0).\n  // reset the docdata properties so they are not added more than once.\n  private Document createDocument(DocData docData, int size, int cnt) throws UnsupportedEncodingException {\n\n    final DocState ds = getDocState();\n    final Document doc = reuseFields ? ds.doc : new Document();\n    doc.clear();\n    \n    // Set ID_FIELD\n    FieldType ft = new FieldType(valType);\n    ft.setStored(true);\n\n    Field idField = ds.getField(ID_FIELD, ft);\n    int id;\n    if (r != null) {\n      id = r.nextInt(updateDocIDLimit);\n    } else {\n      id = docData.getID();\n      if (id == -1) {\n        id = numDocsCreated.getAndIncrement();\n      }\n    }\n    idField.setStringValue(Integer.toString(id));\n    doc.add(idField);\n    \n    // Set NAME_FIELD\n    String name = docData.getName();\n    if (name == null) name = \"\";\n    name = cnt < 0 ? name : name + \"_\" + cnt;\n    Field nameField = ds.getField(NAME_FIELD, valType);\n    nameField.setStringValue(name);\n    doc.add(nameField);\n    \n    // Set DATE_FIELD\n    DateUtil util = dateParsers.get();\n    if (util == null) {\n      util = new DateUtil();\n      dateParsers.set(util);\n    }\n    Date date = null;\n    String dateString = docData.getDate();\n    if (dateString != null) {\n      util.pos.setIndex(0);\n      date = util.parser.parse(dateString, util.pos);\n      //System.out.println(dateString + \" parsed to \" + date);\n    } else {\n      dateString = \"\";\n    }\n    Field dateStringField = ds.getField(DATE_FIELD, valType);\n    dateStringField.setStringValue(dateString);\n    doc.add(dateStringField);\n\n    if (date == null) {\n      // just set to right now\n      date = new Date();\n    }\n\n    Field dateField = ds.getNumericField(DATE_MSEC_FIELD, FieldType.LegacyNumericType.LONG);\n    dateField.setLongValue(date.getTime());\n    doc.add(dateField);\n\n    util.cal.setTime(date);\n    final int sec = util.cal.get(Calendar.HOUR_OF_DAY)*3600 + util.cal.get(Calendar.MINUTE)*60 + util.cal.get(Calendar.SECOND);\n\n    Field timeSecField = ds.getNumericField(TIME_SEC_FIELD, LegacyNumericType.INT);\n    timeSecField.setIntValue(sec);\n    doc.add(timeSecField);\n    \n    // Set TITLE_FIELD\n    String title = docData.getTitle();\n    Field titleField = ds.getField(TITLE_FIELD, valType);\n    titleField.setStringValue(title == null ? \"\" : title);\n    doc.add(titleField);\n    \n    String body = docData.getBody();\n    if (body != null && body.length() > 0) {\n      String bdy;\n      if (size <= 0 || size >= body.length()) {\n        bdy = body; // use all\n        docData.setBody(\"\"); // nothing left\n      } else {\n        // attempt not to break words - if whitespace found within next 20 chars...\n        for (int n = size - 1; n < size + 20 && n < body.length(); n++) {\n          if (Character.isWhitespace(body.charAt(n))) {\n            size = n;\n            break;\n          }\n        }\n        bdy = body.substring(0, size); // use part\n        docData.setBody(body.substring(size)); // some left\n      }\n      Field bodyField = ds.getField(BODY_FIELD, bodyValType);\n      bodyField.setStringValue(bdy);\n      doc.add(bodyField);\n      \n      if (storeBytes) {\n        Field bytesField = ds.getField(BYTES_FIELD, StringField.TYPE_STORED);\n        bytesField.setBytesValue(bdy.getBytes(StandardCharsets.UTF_8));\n        doc.add(bytesField);\n      }\n    }\n\n    if (indexProperties) {\n      Properties props = docData.getProps();\n      if (props != null) {\n        for (final Map.Entry<Object,Object> entry : props.entrySet()) {\n          Field f = ds.getField((String) entry.getKey(), valType);\n          f.setStringValue((String) entry.getValue());\n          doc.add(f);\n        }\n        docData.setProps(null);\n      }\n    }\n    \n    //System.out.println(\"============== Created doc \"+numDocsCreated+\" :\\n\"+doc+\"\\n==========\");\n    return doc;\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"5eb2511ababf862ea11e10761c70ee560cd84510":["1d028314cced5858683a1bb4741423d0f934257b","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","409324b31a1419d7c05a38211168cf317e39be77"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["7d89d7e4e5101347833eea558851bf4209218619","3184874f7f3aca850248483485b4995343066875"],"067bb525d2e4993889147c508e2ccb5158f409b1":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d89d7e4e5101347833eea558851bf4209218619":["1d028314cced5858683a1bb4741423d0f934257b"],"770342641f7b505eaa8dccdc666158bff2419109":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["7d89d7e4e5101347833eea558851bf4209218619"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["067bb525d2e4993889147c508e2ccb5158f409b1"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1d028314cced5858683a1bb4741423d0f934257b":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"067bb525d2e4993889147c508e2ccb5158f409b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["409324b31a1419d7c05a38211168cf317e39be77"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["067bb525d2e4993889147c508e2ccb5158f409b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}