{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","commits":[{"id":"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80","date":1532111887,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for(int i=0; i<sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      if(ft instanceof IntValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if(ft instanceof FloatValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if(ft instanceof DoubleValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if(ft instanceof LongValueFieldType) {\n        if(reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if(ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals =  reader.getSortedDocValues(field);\n        if(reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    if(sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if(sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if(sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if(sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    } else {\n      throw new IOException(\"A max of 4 sorts can be specified\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4","date":1533760080,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f41185456d46fbf1ec09366323d7c6f7e8293f","date":1551985160,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#getSortDoc(SolrIndexSearcher,SortField[]).mjava","sourceNew":"  SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","sourceOld":"  private SortDoc getSortDoc(SolrIndexSearcher searcher, SortField[] sortFields) throws IOException {\n    SortValue[] sortValues = new SortValue[sortFields.length];\n    IndexSchema schema = searcher.getSchema();\n    for (int i = 0; i < sortFields.length; ++i) {\n      SortField sf = sortFields[i];\n      String field = sf.getField();\n      boolean reverse = sf.getReverse();\n      SchemaField schemaField = schema.getField(field);\n      FieldType ft = schemaField.getType();\n\n      if (!schemaField.hasDocValues()) {\n        throw new IOException(field + \" must have DocValues to use this feature.\");\n      }\n\n      if (ft instanceof SortableTextField && schemaField.useDocValuesAsStored() == false) {\n        throw new IOException(schemaField + \" Must have useDocValuesAsStored='true' to be used with export writer\");\n      }\n\n      if (ft instanceof IntValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new IntValue(field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new IntValue(field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof FloatValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatDesc());\n        } else {\n          sortValues[i] = new FloatValue(field, new FloatComp.FloatAsc());\n        }\n      } else if (ft instanceof DoubleValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleDesc());\n        } else {\n          sortValues[i] = new DoubleValue(field, new DoubleComp.DoubleAsc());\n        }\n      } else if (ft instanceof LongValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof StrField || ft instanceof SortableTextField) {\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else if (ft instanceof DateValueFieldType) {\n        if (reverse) {\n          sortValues[i] = new LongValue(field, new LongComp.LongDesc());\n        } else {\n          sortValues[i] = new LongValue(field, new LongComp.LongAsc());\n        }\n      } else if (ft instanceof BoolField) {\n        // This is a bit of a hack, but since the boolean field stores ByteRefs, just like Strings\n        // _and_ since \"F\" happens to sort before \"T\" (thus false sorts \"less\" than true)\n        // we can just use the existing StringValue here.\n        LeafReader reader = searcher.getSlowAtomicReader();\n        SortedDocValues vals = reader.getSortedDocValues(field);\n        if (reverse) {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntDesc());\n        } else {\n          sortValues[i] = new StringValue(vals, field, new IntComp.IntAsc());\n        }\n      } else {\n        throw new IOException(\"Sort fields must be one of the following types: int,float,long,double,string,date,boolean,SortableText\");\n      }\n    }\n    //SingleValueSortDoc etc are specialized classes which don't have array lookups. On benchmarking large datasets\n    //This is faster than the using an array in SortDoc . So upto 4 sort fields we still want to keep specialized classes.\n    //SOLR-12616 has more details\n    if (sortValues.length == 1) {\n      return new SingleValueSortDoc(sortValues[0]);\n    } else if (sortValues.length == 2) {\n      return new DoubleValueSortDoc(sortValues[0], sortValues[1]);\n    } else if (sortValues.length == 3) {\n      return new TripleValueSortDoc(sortValues[0], sortValues[1], sortValues[2]);\n    } else if (sortValues.length == 4) {\n      return new QuadValueSortDoc(sortValues[0], sortValues[1], sortValues[2], sortValues[3]);\n    }\n    return new SortDoc(sortValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["74f41185456d46fbf1ec09366323d7c6f7e8293f"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80":["a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16502203cfbb2b9695ec18dbb9d2d2c70dd1ff80"],"74f41185456d46fbf1ec09366323d7c6f7e8293f":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"a1c06f34f2b082d2c9c5d1ddf39ef4fbc46c2da4":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["74f41185456d46fbf1ec09366323d7c6f7e8293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}