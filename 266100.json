{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      docStoreSegment = null;\n      numDocsInStore = 0;\n      docStoreOffset = 0;\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","c00afe74a80796ed1f30a9509b150ff104746a1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      docStoreSegment = null;\n      numDocsInStore = 0;\n      docStoreOffset = 0;\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    assert aborting;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    assert aborting;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    assert aborting;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    assert aborting;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"/dev/null","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"docWriter: now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"docWriter: done abort\");\n      }\n    }\n  }\n\n","bugFix":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        message(\"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        message(\"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      infoStream.message(\"DWPT\", \"now abort\");\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      infoStream.message(\"DWPT\", \"done abort\");\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream != null) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      infoStream.message(\"DWPT\", \"now abort\");\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      infoStream.message(\"DWPT\", \"done abort\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      infoStream.message(\"DWPT\", \"now abort\");\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      infoStream.message(\"DWPT\", \"done abort\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#abort().mjava","sourceNew":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","sourceOld":"  /** Called if we hit an exception at a bad time (when\n   *  updating the index files) and must discard all\n   *  currently buffered docs.  This resets our state,\n   *  discarding any docs added since last flush. */\n  void abort() throws IOException {\n    hasAborted = aborting = true;\n    try {\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"now abort\");\n      }\n      try {\n        consumer.abort();\n      } catch (Throwable t) {\n      }\n\n      pendingDeletes.clear();\n      deleteSlice = deleteQueue.newSlice();\n      // Reset all postings data\n      doAfterFlush();\n\n    } finally {\n      aborting = false;\n      if (infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", \"done abort\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"ff78505662c0b741e2663a9f38a4889c12a32c9f":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff78505662c0b741e2663a9f38a4889c12a32c9f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}