{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41StoredFieldsWriter#writeField(FieldInfo,StorableField).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeField(FieldInfo info, StorableField field)\n      throws IOException {\n\n    ++numStoredFieldsInDoc;\n\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n\n    Number number = field.numericValue();\n    if (number != null) {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bits = NUMERIC_INT;\n      } else if (number instanceof Long) {\n        bits = NUMERIC_LONG;\n      } else if (number instanceof Float) {\n        bits = NUMERIC_FLOAT;\n      } else if (number instanceof Double) {\n        bits = NUMERIC_DOUBLE;\n      } else {\n        throw new IllegalArgumentException(\"cannot store numeric type \" + number.getClass());\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits = BYTE_ARR;\n        string = null;\n      } else {\n        bits = STRING;\n        string = field.stringValue();\n        if (string == null) {\n          throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n        }\n      }\n    }\n\n    final long infoAndBits = (((long) info.number) << TYPE_BITS) | bits;\n    bufferedDocs.writeVLong(infoAndBits);\n\n    if (bytes != null) {\n      bufferedDocs.writeVInt(bytes.length);\n      bufferedDocs.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      bufferedDocs.writeString(field.stringValue());\n    } else {\n      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {\n        bufferedDocs.writeInt(number.intValue());\n      } else if (number instanceof Long) {\n        bufferedDocs.writeLong(number.longValue());\n      } else if (number instanceof Float) {\n        bufferedDocs.writeInt(Float.floatToIntBits(number.floatValue()));\n      } else if (number instanceof Double) {\n        bufferedDocs.writeLong(Double.doubleToLongBits(number.doubleValue()));\n      } else {\n        throw new AssertionError(\"Cannot get here\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}