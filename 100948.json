{"path":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","commits":[{"id":"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4","date":1269599681,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b28eea49e75cc98d5b2b3301999539352e3fdc","date":1290004199,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (firstIOE != null) {\n      throw firstIOE;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (firstIOE != null) {\n      throw firstIOE;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (firstIOE != null) {\n      throw firstIOE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Aquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null)\n      throw priorException;\n    else if (firstIOE != null)\n      throw firstIOE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    IOException firstIOE = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null)\n          object.close();\n      } catch (IOException ioe) {\n        if (firstIOE == null)\n          firstIOE = ioe;\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (firstIOE != null) {\n      throw firstIOE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d","date":1311520881,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeWhileHandlingException(E,Closeable...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/IOUtils#[E-extends-Exception]_closeSafely(E,Closeable...).mjava","sourceNew":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeWhileHandlingException(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions. Some of the <tt>Closeable</tt>s\n   * may be null, they are ignored. After everything is closed, method either throws <tt>priorException</tt>,\n   * if one is supplied, or the first of suppressed exceptions, or completes normally.</p>\n   * <p>Sample usage:<br/>\n   * <pre>\n   * Closeable resource1 = null, resource2 = null, resource3 = null;\n   * ExpectedException priorE = null;\n   * try {\n   *   resource1 = ...; resource2 = ...; resource3 = ...; // Acquisition may throw ExpectedException\n   *   ..do..stuff.. // May throw ExpectedException\n   * } catch (ExpectedException e) {\n   *   priorE = e;\n   * } finally {\n   *   closeSafely(priorE, resource1, resource2, resource3);\n   * }\n   * </pre>\n   * </p>\n   * @param priorException  <tt>null</tt> or an exception that will be rethrown after method completion\n   * @param objects         objects to call <tt>close()</tt> on\n   */\n  public static <E extends Exception> void closeSafely(E priorException, Closeable... objects) throws E, IOException {\n    Throwable th = null;\n\n    for (Closeable object : objects) {\n      try {\n        if (object != null) {\n          object.close();\n        }\n      } catch (Throwable t) {\n        addSuppressed((priorException == null) ? th : priorException, t);\n        if (th == null) {\n          th = t;\n        }\n      }\n    }\n\n    if (priorException != null) {\n      throw priorException;\n    } else if (th != null) {\n      if (th instanceof IOException) throw (IOException) th;\n      if (th instanceof RuntimeException) throw (RuntimeException) th;\n      if (th instanceof Error) throw (Error) th;\n      throw new RuntimeException(th);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d"],"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c7235f072992928845d8cfd2dfc1c90362360e1e","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["23b28eea49e75cc98d5b2b3301999539352e3fdc","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["efb7a19703a037c29e30440260d393500febc1f4"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"23b28eea49e75cc98d5b2b3301999539352e3fdc":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24230fe54121f9be9d85f2c2067536296785e421"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["c7235f072992928845d8cfd2dfc1c90362360e1e","23b28eea49e75cc98d5b2b3301999539352e3fdc","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"7f87a5ff86c3bf3de26e699a87cedf9c385a3a5d":["24230fe54121f9be9d85f2c2067536296785e421"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","efb7a19703a037c29e30440260d393500febc1f4","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"23b28eea49e75cc98d5b2b3301999539352e3fdc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}