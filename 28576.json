{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"default\", \"accuracy\");\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(\"accuracy\", is(equalTo(newFieldAttributes.get(\"default\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50df7436c3e299dbfef94654447a2e2cba43003c","date":1474971458,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    // Dynamic fields cannot be required or have a default value\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"default\", \"accuracy\");\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(\"accuracy\", is(equalTo(newFieldAttributes.get(\"default\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    // Dynamic fields cannot be required or have a default value\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"default\", \"accuracy\");\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(\"accuracy\", is(equalTo(newFieldAttributes.get(\"default\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testAddDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    // Dynamic fields cannot be required or have a default value\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testAddDynamicFieldAccuracy() throws Exception {\n    SchemaRequest.DynamicFields dynamicFieldsSchemaRequest =\n        new SchemaRequest.DynamicFields();\n    SchemaResponse.DynamicFieldsResponse initialDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(initialDFieldsResponse);\n    List<Map<String, Object>> initialDFields = initialDFieldsResponse.getDynamicFields();\n\n    String dFieldName = \"*_acc\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", dFieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"default\", \"accuracy\");\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    SchemaResponse.DynamicFieldsResponse currentDFieldsResponse = dynamicFieldsSchemaRequest.process(getSolrClient());\n    assertEquals(0, currentDFieldsResponse.getStatus());\n    List<Map<String, Object>> currentFields = currentDFieldsResponse.getDynamicFields();\n    assertEquals(initialDFields.size() + 1, currentFields.size());\n\n\n    SchemaRequest.DynamicField dFieldRequest = new SchemaRequest.DynamicField(dFieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(dFieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(\"accuracy\", is(equalTo(newFieldAttributes.get(\"default\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","50df7436c3e299dbfef94654447a2e2cba43003c"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50df7436c3e299dbfef94654447a2e2cba43003c":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","50df7436c3e299dbfef94654447a2e2cba43003c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"50df7436c3e299dbfef94654447a2e2cba43003c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}