{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","commits":[{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    try {\n      client.add(\"boguscollectionname\", doc);\n      fail();\n    } catch (SolrException ex) {\n      if (ex.getMessage().equals(\"Collection not found: boguscollectionname\")) {\n        // pass\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    try {\n      client.add(\"boguscollectionname\", doc);\n      fail();\n    } catch (SolrException ex) {\n      if (ex.getMessage().equals(\"Collection not found: boguscollectionname\")) {\n        // pass\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","sourceNew":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    SolrException ex = expectThrows(SolrException.class, () -> client.add(\"boguscollectionname\", doc));\n    assertEquals(\"Collection not found: boguscollectionname\", ex.getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    try {\n      client.add(\"boguscollectionname\", doc);\n      fail();\n    } catch (SolrException ex) {\n      if (ex.getMessage().equals(\"Collection not found: boguscollectionname\")) {\n        // pass\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","sourceNew":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    SolrException ex = expectThrows(SolrException.class, () -> client.add(\"boguscollectionname\", doc));\n    assertEquals(\"Collection not found: boguscollectionname\", ex.getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    try {\n      client.add(\"boguscollectionname\", doc);\n      fail();\n    } catch (SolrException ex) {\n      if (ex.getMessage().equals(\"Collection not found: boguscollectionname\")) {\n        // pass\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest#testCollectionDoesntExist().mjava","sourceNew":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    SolrException ex = expectThrows(SolrException.class, () -> client.add(\"boguscollectionname\", doc));\n    assertEquals(\"Collection not found: boguscollectionname\", ex.getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionDoesntExist() throws Exception {\n    CloudSolrClient client = getRandomClient();\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    try {\n      client.add(\"boguscollectionname\", doc);\n      fail();\n    } catch (SolrException ex) {\n      if (ex.getMessage().equals(\"Collection not found: boguscollectionname\")) {\n        // pass\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a64b273d51a6540272668680ece9f8b686ff0004":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["a64b273d51a6540272668680ece9f8b686ff0004"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a64b273d51a6540272668680ece9f8b686ff0004","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a64b273d51a6540272668680ece9f8b686ff0004","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a64b273d51a6540272668680ece9f8b686ff0004":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}