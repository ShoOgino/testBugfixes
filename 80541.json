{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Slurps a stream into a List\n   */\n  protected static List<Tuple> getTuples(final TupleStream tupleStream) throws IOException {\n    List<Tuple> tuples = new ArrayList<Tuple>();\n    try {\n      log.trace(\"TupleStream: {}\", tupleStream);\n      tupleStream.open();\n      for (Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n        log.trace(\"Tuple: {}\", t.fields);\n        tuples.add(t);\n      }\n    } finally {\n      tupleStream.close();\n    }\n    return tuples;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","sourceNew":"  /**\n   * Slurps a stream into a List\n   */\n  protected static List<Tuple> getTuples(final TupleStream tupleStream) throws IOException {\n    List<Tuple> tuples = new ArrayList<Tuple>();\n    try {\n      log.trace(\"TupleStream: {}\", tupleStream);\n      tupleStream.open();\n      for (Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n        log.trace(\"Tuple: {}\", t.getFields());\n        tuples.add(t);\n      }\n    } finally {\n      tupleStream.close();\n    }\n    return tuples;\n  }\n\n","sourceOld":"  /**\n   * Slurps a stream into a List\n   */\n  protected static List<Tuple> getTuples(final TupleStream tupleStream) throws IOException {\n    List<Tuple> tuples = new ArrayList<Tuple>();\n    try {\n      log.trace(\"TupleStream: {}\", tupleStream);\n      tupleStream.open();\n      for (Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n        log.trace(\"Tuple: {}\", t.fields);\n        tuples.add(t);\n      }\n    } finally {\n      tupleStream.close();\n    }\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0149db0c1f7ebcdff5f528dc646dab584cc5ef2","date":1591688271,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#getTuples(TupleStream).mjava","sourceNew":"  /**\n   * Slurps a stream into a List\n   */\n  protected static List<Tuple> getTuples(final TupleStream tupleStream) throws IOException {\n    List<Tuple> tuples = new ArrayList<Tuple>();\n    try {\n      log.trace(\"TupleStream: {}\", tupleStream);\n      tupleStream.open();\n      for (Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n        if (log.isTraceEnabled()) {\n          log.trace(\"Tuple: {}\", t.getFields());\n        }\n        tuples.add(t);\n      }\n    } finally {\n      tupleStream.close();\n    }\n    return tuples;\n  }\n\n","sourceOld":"  /**\n   * Slurps a stream into a List\n   */\n  protected static List<Tuple> getTuples(final TupleStream tupleStream) throws IOException {\n    List<Tuple> tuples = new ArrayList<Tuple>();\n    try {\n      log.trace(\"TupleStream: {}\", tupleStream);\n      tupleStream.open();\n      for (Tuple t = tupleStream.read(); !t.EOF; t = tupleStream.read()) {\n        log.trace(\"Tuple: {}\", t.getFields());\n        tuples.add(t);\n      }\n    } finally {\n      tupleStream.close();\n    }\n    return tuples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"c0149db0c1f7ebcdff5f528dc646dab584cc5ef2":["804a8d5358fe7b7563b85ee7838714d720b89272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0149db0c1f7ebcdff5f528dc646dab584cc5ef2"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"804a8d5358fe7b7563b85ee7838714d720b89272":["c0149db0c1f7ebcdff5f528dc646dab584cc5ef2"],"c0149db0c1f7ebcdff5f528dc646dab584cc5ef2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}