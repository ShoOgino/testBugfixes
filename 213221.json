{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","commits":[{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      deltas[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, PackedInts.COMPACT);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      deltas[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = PackedInts.unsignedBitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","sourceNew":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = PackedInts.unsignedBitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = delta < 0 ? 64 : PackedInts.bitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer#packPendingValues().mjava","sourceNew":null,"sourceOld":"  @Override\n  void packPendingValues() {\n    // compute max delta\n    long minValue = pending[0];\n    long maxValue = pending[0];\n    for (int i = 1; i < pendingOff; ++i) {\n      minValue = Math.min(minValue, pending[i]);\n      maxValue = Math.max(maxValue, pending[i]);\n    }\n    final long delta = maxValue - minValue;\n\n    minValues[valuesOff] = minValue;\n    if (delta == 0) {\n      values[valuesOff] = new PackedInts.NullReader(pendingOff);\n    } else {\n      // build a new packed reader\n      final int bitsRequired = PackedInts.unsignedBitsRequired(delta);\n      for (int i = 0; i < pendingOff; ++i) {\n        pending[i] -= minValue;\n      }\n      final PackedInts.Mutable mutable = PackedInts.getMutable(pendingOff, bitsRequired, acceptableOverheadRatio);\n      for (int i = 0; i < pendingOff; ) {\n        i += mutable.set(i, pending, i, pendingOff - i);\n      }\n      values[valuesOff] = mutable;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["cb240aebd5a347d79f642127ad9255dd9a979f06","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb240aebd5a347d79f642127ad9255dd9a979f06","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}