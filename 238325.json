{"path":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","commits":[{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    for (int i = 0; i < 3989 * RANDOM_MULTIPLIER; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e115952d3c9f23ec56add53355123cc50f5d67e","date":1322315783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n      assertEquals(cRef, unicode); // CharSeq\n      assertEquals(cRef, ref.utf8ToString()); // CharSeq\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestUnicodeUtil#testUTF8UTF16CharsRef().mjava","sourceNew":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","sourceOld":"  public void testUTF8UTF16CharsRef() {\n    int num = atLeast(3989);\n    for (int i = 0; i < num; i++) {\n      String unicode = _TestUtil.randomRealisticUnicodeString(random);\n      BytesRef ref = new BytesRef(unicode);\n      char[] arr = new char[1 + random.nextInt(100)];\n      int offset = random.nextInt(arr.length);\n      int len = random.nextInt(arr.length - offset);\n      CharsRef cRef = new CharsRef(arr, offset, len);\n      UnicodeUtil.UTF8toUTF16(ref, cRef);\n      assertEquals(cRef.toString(), unicode);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e115952d3c9f23ec56add53355123cc50f5d67e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["2e10cb22a8bdb44339e282925a29182bb2f3174d","f83af14a2a8131b14d7aee6274c740334e0363d3"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e115952d3c9f23ec56add53355123cc50f5d67e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1e115952d3c9f23ec56add53355123cc50f5d67e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a1b3a24d5d9b47345473ff564f5cc127a7b526b4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["f83af14a2a8131b14d7aee6274c740334e0363d3","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1e115952d3c9f23ec56add53355123cc50f5d67e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}