{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testRewriteMultiPhraseWithAny().mjava","commits":[{"id":"6f39ae26126a88ee050e14ab738bb6c6d0dad877","date":1478516006,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testRewriteMultiPhraseWithAny().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewriteMultiPhraseWithAny() throws Exception {\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int initState = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    int s3 = q.createState();\n    q.addTransition(initState, s1, \"foo\");\n    q.addTransition(initState, s1, \"bar\");\n    q.addAnyTransition(s1, s2);\n    q.addTransition(s2, s3, \"baz\");\n    q.setAccept(s3, true);\n    q.finish();\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"x y z\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    Query rewrite = q.rewrite(r);\n    assertTrue(rewrite instanceof MultiPhraseQuery);\n    Term[][] terms = ((MultiPhraseQuery) rewrite).getTermArrays();\n    assertEquals(2, terms.length);\n    assertEquals(2, terms[0].length);\n    assertEquals(new Term(\"field\", \"foo\"), terms[0][0]);\n    assertEquals(new Term(\"field\", \"bar\"), terms[0][1]);\n    assertEquals(1, terms[1].length);\n    assertEquals(new Term(\"field\", \"baz\"), terms[1][0]);\n\n    int[] positions = ((MultiPhraseQuery) rewrite).getPositions();\n    assertEquals(2, positions.length);\n    assertEquals(0, positions[0]);\n    assertEquals(2, positions[1]);\n    \n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestTermAutomatonQuery#testRewriteMultiPhraseWithAny().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewriteMultiPhraseWithAny() throws Exception {\n    TermAutomatonQuery q = new TermAutomatonQuery(\"field\");\n    int initState = q.createState();\n    int s1 = q.createState();\n    int s2 = q.createState();\n    int s3 = q.createState();\n    q.addTransition(initState, s1, \"foo\");\n    q.addTransition(initState, s1, \"bar\");\n    q.addAnyTransition(s1, s2);\n    q.addTransition(s2, s3, \"baz\");\n    q.setAccept(s3, true);\n    q.finish();\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"x y z\", Field.Store.NO));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    Query rewrite = q.rewrite(r);\n    assertTrue(rewrite instanceof MultiPhraseQuery);\n    Term[][] terms = ((MultiPhraseQuery) rewrite).getTermArrays();\n    assertEquals(2, terms.length);\n    assertEquals(2, terms[0].length);\n    assertEquals(new Term(\"field\", \"foo\"), terms[0][0]);\n    assertEquals(new Term(\"field\", \"bar\"), terms[0][1]);\n    assertEquals(1, terms[1].length);\n    assertEquals(new Term(\"field\", \"baz\"), terms[1][0]);\n\n    int[] positions = ((MultiPhraseQuery) rewrite).getPositions();\n    assertEquals(2, positions.length);\n    assertEquals(0, positions[0]);\n    assertEquals(2, positions[1]);\n    \n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f39ae26126a88ee050e14ab738bb6c6d0dad877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f39ae26126a88ee050e14ab738bb6c6d0dad877"]},"commit2Childs":{"6f39ae26126a88ee050e14ab738bb6c6d0dad877":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f39ae26126a88ee050e14ab738bb6c6d0dad877","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}