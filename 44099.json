{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","commits":[{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  It uses the provided {@code points} from the given {@code from} to the given {@code to}\n   *  to populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices\n   *  so the path slice at position 0 contains {@code partition - from} points\n   *  where the value of the {@code dim} is lower or equal to the {@code to -from}\n   *  points on the slice at position 1.\n   *\n   *  The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for\n   *  the {@code dim} where are partitioning the points.\n   *\n   *  It return the value of the {@code dim} at the partition point.\n   *\n   *  If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the\n   *  writer is destroyed in the process to save disk space.\n   */\n  public byte[] select(PathSlice points, PathSlice[] partitionSlices, long from, long to, long partitionPoint, int dim, int dimCommonPrefix) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    assert partitionSlices.length > 1;\n\n    //If we are on heap then we just select on heap\n    if (points.writer instanceof HeapPointWriter) {\n      byte[] partition = heapRadixSelect((HeapPointWriter) points.writer, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), dimCommonPrefix);\n      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);\n      return partition;\n    }\n\n    //reset histogram\n    for (int i = 0; i < bytesSorted; i++) {\n      Arrays.fill(histogram[i], 0);\n    }\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;\n\n    //find common prefix from dimCommonPrefix, it does already set histogram values if needed\n    int commonPrefix = findCommonPrefix(offlinePointWriter, from, to, dim, dimCommonPrefix);\n\n    try (PointWriter left = getPointWriter(partitionPoint - from, \"left\" + dim);\n         PointWriter right = getPointWriter(to - partitionPoint, \"right\" + dim)) {\n      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);\n      //if all equals we just partition the points\n      if (commonPrefix == bytesSorted) {\n        offlinePartition(offlinePointWriter, left, right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n        return partitionPointFromCommonPrefix();\n      }\n      //let's rock'n'roll\n      return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, commonPrefix, dim);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2344a1c769566d8c85cffcacc5e55153fa54b86","date":1550661298,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","sourceNew":"  /**\n   *  It uses the provided {@code points} from the given {@code from} to the given {@code to}\n   *  to populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices\n   *  so the path slice at position 0 contains {@code partition - from} points\n   *  where the value of the {@code dim} is lower or equal to the {@code to -from}\n   *  points on the slice at position 1.\n   *\n   *  The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for\n   *  the {@code dim} where are partitioning the points.\n   *\n   *  It return the value of the {@code dim} at the partition point.\n   *\n   *  If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the\n   *  writer is destroyed in the process to save disk space.\n   */\n  public byte[] select(PathSlice points, PathSlice[] partitionSlices, long from, long to, long partitionPoint, int dim, int dimCommonPrefix) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    assert partitionSlices.length > 1 : \"[partition alices] must be > 1, got \" + partitionSlices.length;\n\n    //If we are on heap then we just select on heap\n    if (points.writer instanceof HeapPointWriter) {\n      byte[] partition = heapRadixSelect((HeapPointWriter) points.writer, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), dimCommonPrefix);\n      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);\n      return partition;\n    }\n\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;\n\n    try (PointWriter left = getPointWriter(partitionPoint - from, \"left\" + dim);\n         PointWriter right = getPointWriter(to - partitionPoint, \"right\" + dim)) {\n      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);\n      return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, dimCommonPrefix, dim);\n    }\n  }\n\n","sourceOld":"  /**\n   *  It uses the provided {@code points} from the given {@code from} to the given {@code to}\n   *  to populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices\n   *  so the path slice at position 0 contains {@code partition - from} points\n   *  where the value of the {@code dim} is lower or equal to the {@code to -from}\n   *  points on the slice at position 1.\n   *\n   *  The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for\n   *  the {@code dim} where are partitioning the points.\n   *\n   *  It return the value of the {@code dim} at the partition point.\n   *\n   *  If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the\n   *  writer is destroyed in the process to save disk space.\n   */\n  public byte[] select(PathSlice points, PathSlice[] partitionSlices, long from, long to, long partitionPoint, int dim, int dimCommonPrefix) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    assert partitionSlices.length > 1;\n\n    //If we are on heap then we just select on heap\n    if (points.writer instanceof HeapPointWriter) {\n      byte[] partition = heapRadixSelect((HeapPointWriter) points.writer, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), dimCommonPrefix);\n      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);\n      return partition;\n    }\n\n    //reset histogram\n    for (int i = 0; i < bytesSorted; i++) {\n      Arrays.fill(histogram[i], 0);\n    }\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;\n\n    //find common prefix from dimCommonPrefix, it does already set histogram values if needed\n    int commonPrefix = findCommonPrefix(offlinePointWriter, from, to, dim, dimCommonPrefix);\n\n    try (PointWriter left = getPointWriter(partitionPoint - from, \"left\" + dim);\n         PointWriter right = getPointWriter(to - partitionPoint, \"right\" + dim)) {\n      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);\n      //if all equals we just partition the points\n      if (commonPrefix == bytesSorted) {\n        offlinePartition(offlinePointWriter, left, right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n        return partitionPointFromCommonPrefix();\n      }\n      //let's rock'n'roll\n      return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, commonPrefix, dim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PathSlice,PathSlice[],long,long,long,int,int).mjava","sourceNew":"  /**\n   *  It uses the provided {@code points} from the given {@code from} to the given {@code to}\n   *  to populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices\n   *  so the path slice at position 0 contains {@code partition - from} points\n   *  where the value of the {@code dim} is lower or equal to the {@code to -from}\n   *  points on the slice at position 1.\n   *\n   *  The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for\n   *  the {@code dim} where are partitioning the points.\n   *\n   *  It return the value of the {@code dim} at the partition point.\n   *\n   *  If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the\n   *  writer is destroyed in the process to save disk space.\n   */\n  public byte[] select(PathSlice points, PathSlice[] partitionSlices, long from, long to, long partitionPoint, int dim, int dimCommonPrefix) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    assert partitionSlices.length > 1 : \"[partition alices] must be > 1, got \" + partitionSlices.length;\n\n    // If we are on heap then we just select on heap\n    if (points.writer instanceof HeapPointWriter) {\n      byte[] partition = heapRadixSelect((HeapPointWriter) points.writer, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), dimCommonPrefix);\n      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);\n      return partition;\n    }\n\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;\n\n    try (PointWriter left = getPointWriter(partitionPoint - from, \"left\" + dim);\n         PointWriter right = getPointWriter(to - partitionPoint, \"right\" + dim)) {\n      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);\n      return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, dimCommonPrefix, dim);\n    }\n  }\n\n","sourceOld":"  /**\n   *  It uses the provided {@code points} from the given {@code from} to the given {@code to}\n   *  to populate the {@code partitionSlices} array holder (length &gt; 1) with two path slices\n   *  so the path slice at position 0 contains {@code partition - from} points\n   *  where the value of the {@code dim} is lower or equal to the {@code to -from}\n   *  points on the slice at position 1.\n   *\n   *  The {@code dimCommonPrefix} provides a hint for the length of the common prefix length for\n   *  the {@code dim} where are partitioning the points.\n   *\n   *  It return the value of the {@code dim} at the partition point.\n   *\n   *  If the provided {@code points} is wrapping an {@link OfflinePointWriter}, the\n   *  writer is destroyed in the process to save disk space.\n   */\n  public byte[] select(PathSlice points, PathSlice[] partitionSlices, long from, long to, long partitionPoint, int dim, int dimCommonPrefix) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    assert partitionSlices.length > 1 : \"[partition alices] must be > 1, got \" + partitionSlices.length;\n\n    //If we are on heap then we just select on heap\n    if (points.writer instanceof HeapPointWriter) {\n      byte[] partition = heapRadixSelect((HeapPointWriter) points.writer, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), dimCommonPrefix);\n      partitionSlices[0] = new PathSlice(points.writer, from, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(points.writer, partitionPoint, to - partitionPoint);\n      return partition;\n    }\n\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points.writer;\n\n    try (PointWriter left = getPointWriter(partitionPoint - from, \"left\" + dim);\n         PointWriter right = getPointWriter(to - partitionPoint, \"right\" + dim)) {\n      partitionSlices[0] = new PathSlice(left, 0, partitionPoint - from);\n      partitionSlices[1] = new PathSlice(right, 0, to - partitionPoint);\n      return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, dimCommonPrefix, dim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c2344a1c769566d8c85cffcacc5e55153fa54b86":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["c2344a1c769566d8c85cffcacc5e55153fa54b86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}