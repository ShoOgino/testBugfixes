{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","commits":[{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginGlobalLoader().mjava","sourceNew":"  public void testPluginFrompackage() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      String sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n      assertEquals(sha512,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_meta_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"config/searchComponent/get/_packageinfo_/url\", url,\n              \"config/searchComponent/get/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha512\", sha512\n          ));\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n\n      assertEquals(sha512,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"/config/searchComponent/get/_packageinfo_/url\", url,\n              \"/config/searchComponent/get/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha512\", sha512\n          ));\n\n\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha512\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","sourceOld":"  public void testPluginGlobalLoader() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\"),\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha512\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","sourceNew":"  public void testPluginFrompackage() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_meta_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"config/searchComponent/get/_packageinfo_/url\", url,\n              \"config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"/config/searchComponent/get/_packageinfo_/url\", url,\n              \"/config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha256\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","sourceOld":"  public void testPluginFrompackage() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      String sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha512\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n      assertEquals(sha512,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_meta_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"config/searchComponent/get/_packageinfo_/url\", url,\n              \"config/searchComponent/get/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha512\", sha512\n          ));\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha512 : 'bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha512\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n\n      assertEquals(sha512,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha512\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"/config/searchComponent/get/_packageinfo_/url\", url,\n              \"/config/searchComponent/get/_packageinfo_/sha512\", sha512\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha512\", sha512\n          ));\n\n\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha512\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","sourceNew":null,"sourceOld":"  public void testPluginFrompackage() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_meta_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"config/searchComponent/get/_packageinfo_/url\", url,\n              \"config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"/config/searchComponent/get/_packageinfo_/url\", url,\n              \"/config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha256\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testPluginFrompackage().mjava","sourceNew":null,"sourceOld":"  public void testPluginFrompackage() throws Exception {\n    String COLLECTION_NAME = \"globalLoaderColl\";\n    Map<String, Object> jars = Utils.makeMap(\n        \"/jar1.jar\", getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n        \"/jar2.jar\", getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n        \"/jar3.jar\", getFileContent(\"runtimecode/runtimelibs_v3.jar.bin\"));\n\n    Pair<Server, Integer> server = runHttpServer(jars);\n    int port = server.second();\n    System.setProperty(\"enable.runtime.lib\", \"true\");\n    MiniSolrCloudCluster cluster = configureCluster(4)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n      CollectionAdminRequest\n          .createCollection(COLLECTION_NAME, \"conf\", 2, 1)\n          .setMaxShardsPerNode(100)\n          .process(cluster.getSolrClient());\n\n\n      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);\n      String payload = \"{add-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar1.jar', \" +\n          \"sha256 : 'e1f9e23988c19619402f1040c9251556dcd6e02b9d3e3b966a129ea1be5c70fc'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/sha256\");\n      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"add-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n\n      payload = \"{\\n\" +\n          \"'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global },\" +\n          \"'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global },\" +\n          \"'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }\" +\n          \"}\";\n      cluster.getSolrClient().request(new ConfigRequest(payload) {\n        @Override\n        public String getCollection() {\n          return COLLECTION_NAME;\n        }\n      });\n\n      SolrParams params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_meta_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"config/searchComponent/get/_packageinfo_/url\", url,\n              \"config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, JAVABIN));\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/overlay\", params),\n          Utils.makeMap(\n              \"overlay/queryResponseWriter/json1/class\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"overlay/searchComponent/get/class\", \"org.apache.solr.core.RuntimeLibSearchComponent\"\n          ));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\", params),\n          Utils.makeMap(\"class\", \"org.apache.solr.core.RuntimeLibReqHandler\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName()));\n\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/runtime\",\n          new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME, WT, \"json1\")));\n      req.setResponseParser(new ResponseParser() {\n        @Override\n        public String getWriterType() {\n          return \"json1\";\n        }\n\n        @Override\n        public NamedList<Object> processResponse(InputStream body, String encoding) {\n          return new NamedList<>((Map) Utils.fromJSON(body));\n        }\n\n        @Override\n        public NamedList<Object> processResponse(Reader reader) {\n          return new NamedList<>((Map) Utils.fromJSON(reader));\n\n        }\n\n      });\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          req,\n          Utils.makeMap(\"wt\", \"org.apache.solr.core.RuntimeLibResponseWriter\",\n              \"loader\", MemClassLoader.class.getName()));\n\n\n      payload = \"{update-package:{name : 'global', url: 'http://localhost:\" + port + \"/jar2.jar', \" +\n          \"sha256 : '79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4'}}\";\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(payload)\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/sha256\");\n      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, \"update-package/url\");\n\n      assertEquals(sha256,\n          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, \"package/global/sha256\"));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/queryResponseWriter/json1\", params),\n          Utils.makeMap(\n              \"/config/queryResponseWriter/json1/_packageinfo_/url\", url,\n              \"/config/queryResponseWriter/json1/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/searchComponent/get\", params),\n          Utils.makeMap(\n              \"/config/searchComponent/get/_packageinfo_/url\", url,\n              \"/config/searchComponent/get/_packageinfo_/sha256\", sha256\n          ));\n\n      params = new MapSolrParams((Map) Utils.makeMap(\"collection\", COLLECTION_NAME,\n          WT, JAVABIN,\n          \"meta\",\"true\"));\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/config/requestHandler/runtime\", params),\n          Utils.makeMap(\n              \":config:requestHandler:/runtime:_packageinfo_:url\", url,\n              \":config:requestHandler:/runtime:_packageinfo_:sha256\", sha256\n          ));\n\n\n\n      try {\n        new V2Request.Builder(\"/cluster\")\n            .withPayload(payload)\n            .withMethod(SolrRequest.METHOD.POST)\n            .build().process(cluster.getSolrClient());\n        fail(\"should have failed\");\n      } catch (BaseHttpSolrClient.RemoteExecutionException e) {\n        assertTrue(\"actual output : \" + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr(\"error/details[0]/errorMessages[0]\", \"\").contains(\"Trying to update a jar with the same sha256\"));\n      }\n\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new GenericSolrRequest(SolrRequest.METHOD.GET, \"/get?abc=xyz\", params),\n          Utils.makeMap(\"get\", \"org.apache.solr.core.RuntimeLibSearchComponent\",\n              \"loader\", MemClassLoader.class.getName(),\n              \"Version\", \"2\"));\n    } finally {\n      cluster.deleteAllCollections();\n      cluster.shutdown();\n      server.first().stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}