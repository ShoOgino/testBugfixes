{"path":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6","date":1321706781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":["53b6c192847de8643a5da505cc433cbf8476a175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newDoubleRange(String,int,Double,Double,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>double</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>.\n   * {@link Double#NaN} will never match a half-open range, to hit {@code NaN} use a query\n   * with {@code min == max == Double.NaN}. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Double> newDoubleRange(final String field, final int precisionStep,\n    Double min, Double max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Double>(\n      NumericRangeQuery.newDoubleRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7dc70c3e4d8e6a1f3c3e92a33e8dc307f4c0b0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}