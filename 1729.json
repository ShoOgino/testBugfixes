{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","commits":[{"id":"5d1e9a21218cf0ffd81625a2f105dc388aa3097d","date":1476967652,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j.properties\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","date":1476974235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j.properties\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j.properties\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j.properties\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j.properties\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> new Integer(a.getFileName().toString().substring(9))\n                  .compareTo(new Integer(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1,\n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1, \n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n      \n      return 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.UtilsTool#rotateSolrLogs(int).mjava","sourceNew":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1,\n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n\n      return 0;\n    }\n\n","sourceOld":"    /**\n     * Rotates solr.log before starting Solr. Mimics log4j2 behavior, i.e. with generations=9:\n     * <pre>\n     *   solr.log.9 (and higher) are deleted\n     *   solr.log.8 -&gt; solr.log.9\n     *   solr.log.7 -&gt; solr.log.8\n     *   ...\n     *   solr.log   -&gt; solr.log.1\n     * </pre>\n     * @param generations number of generations to keep. Should agree with setting in log4j2.xml\n     * @return 0 if success\n     * @throws Exception if problems\n     */\n    public int rotateSolrLogs(int generations) throws Exception {\n      prepareLogsPath();\n      if (logsPath.toFile().exists() && logsPath.resolve(\"solr.log\").toFile().exists()) {\n        out(\"Rotating solr logs, keeping a max of \"+generations+\" generations\");\n        try (Stream<Path> files = Files.find(logsPath, 1,\n            (f, a) -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr.log.\"))\n            .sorted((b,a) -> Integer.valueOf(a.getFileName().toString().substring(9))\n                  .compareTo(Integer.valueOf(b.getFileName().toString().substring(9))))) {\n          files.forEach(p -> {\n            try {\n              int number = Integer.parseInt(p.getFileName().toString().substring(9));\n              if (number >= generations) {\n                Files.delete(p);\n              } else {\n                Path renamed = p.getParent().resolve(\"solr.log.\" + (number + 1));\n                Files.move(p, renamed);\n              }\n            } catch (IOException e) {\n              out(\"Problem during rotation of log files: \" + e.getMessage());\n            }\n          });\n        } catch (NumberFormatException nfe) {\n          throw new Exception(\"Do not know how to rotate solr.log.<ext> with non-numeric extension. Rotate aborted.\", nfe);\n        }\n        Files.move(logsPath.resolve(\"solr.log\"), logsPath.resolve(\"solr.log.1\"));\n      }\n\n      return 0;\n    }\n\n","bugFix":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","93baf46bd12096e0de407258b3b32cfaaf58e448"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["628903f37b6c442da0d390db1c6af9a0e74d41a7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d","c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","b79a5db147a1c6f95d1625ddbc3561ef56955225","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}