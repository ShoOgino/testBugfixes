{"path":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadings().mjava","commits":[{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/kuromoji/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestJapaneseTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestKuromojiTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadings().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest#testReadings().mjava","sourceNew":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestJapaneseTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","sourceOld":"  @Test\n  public void testReadings() throws IOException {\n    UserDictionary dictionary = TestJapaneseTokenizer.readDict();\n    int[][] result = dictionary.lookup(\"日本経済新聞\".toCharArray(), 0, 6);\n    assertEquals(3, result.length);\n    int wordIdNihon = result[0][0]; // wordId of 日本 in 日本経済新聞\n    assertEquals(\"ニホン\", dictionary.getReading(wordIdNihon, \"日本\".toCharArray(), 0, 2));\n    \n    result = dictionary.lookup(\"朝青龍\".toCharArray(), 0, 3);\n    assertEquals(1, result.length);\n    int wordIdAsashoryu = result[0][0]; // wordId for 朝青龍\n    assertEquals(\"アサショウリュウ\", dictionary.getReading(wordIdAsashoryu, \"朝青龍\".toCharArray(), 0, 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}