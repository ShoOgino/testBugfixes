{"path":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","commits":[{"id":"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7","date":1354804202,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"/dev/null","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (_solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(_solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", _solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyConfFiles(_solrHomeDirectory, \"collection\" + idx);\n    }\n\n    File solrXml = new File(_solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(_solrHomeDirectory.getAbsolutePath());\n    cores.load(_solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(_solrHomeDirectory.getAbsolutePath(), new File(_solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"/dev/null","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (_solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(_solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", _solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyConfFiles(_solrHomeDirectory, \"collection\" + idx);\n    }\n\n    File solrXml = new File(_solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(_solrHomeDirectory.getAbsolutePath());\n    cores.load(_solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(_solrHomeDirectory.getAbsolutePath(), new File(_solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyConfFiles(solrHomeDirectory, \"collection\" + idx);\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (_solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(_solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", _solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyConfFiles(_solrHomeDirectory, \"collection\" + idx);\n    }\n\n    File solrXml = new File(_solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(_solrHomeDirectory.getAbsolutePath());\n    cores.load(_solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(_solrHomeDirectory.getAbsolutePath(), new File(_solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyConfFiles(solrHomeDirectory, \"collection\" + idx);\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":["a837c064b67fa63a9394136e31218b908cdcf783"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(solrXml, LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load();\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(solrXml, LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    final CoreContainer cores = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    cores.load(solrHomeDirectory.getAbsolutePath(), solrXml);\n    //  h.getCoreContainer().load(solrHomeDirectory.getAbsolutePath(), new File(solrHomeDirectory, \"solr.xml\"));\n\n    cores.setPersistent(false);\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7917a219001fa51c4289d6a8e1a98606995170b7","date":1376673362,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(solrXml, LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(solrXml, LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(solrXml, LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, IOUtils.CHARSET_UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n\n    if (solrHomeDirectory.exists()) {\n      FileUtils.deleteDirectory(solrHomeDirectory);\n    }\n    assertTrue(\"Failed to mkdirs workDir\", solrHomeDirectory.mkdirs());\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    return createCoreContainer(new LazyCoreTestConfig(loader));\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n\n    File solrXml = new File(solrHomeDirectory, \"solr.xml\");\n    FileUtils.write(solrXml, LOTS_SOLR_XML, Charsets.UTF_8.toString());\n    ConfigSolrXmlOld config = (ConfigSolrXmlOld) ConfigSolr.fromFile(loader, solrXml);\n\n    CoresLocator locator = new SolrXMLCoresLocator.NonPersistingLocator(LOTS_SOLR_XML, config);\n\n\n    final CoreContainer cores = new CoreContainer(loader, config, locator);\n    cores.load();\n    return cores;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15199583d3635cb940942caed05132dd6c4c7c6","date":1424875551,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    return createCoreContainer(new LazyCoreTestConfig(loader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    return createCoreContainer(new LazyCoreTestConfig(loader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.getAbsolutePath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    SolrResourceLoader loader = new SolrResourceLoader(solrHomeDirectory.toPath());\n    NodeConfig config = new NodeConfig.NodeConfigBuilder(\"testNode\", loader).setTransientCacheSize(4).build();\n    return createCoreContainer(config, testCores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad026d488f8fbf9ab33e5232d3343395c19b6cc8","date":1507308872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n\n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48e6317c36b128552eaed2363bb069267defb0e0","date":1507335877,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestLazyCores#init().mjava","sourceNew":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n    \n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","sourceOld":"  private CoreContainer init() throws Exception {\n    solrHomeDirectory = createTempDir().toFile();\n\n    copyXmlToHome(solrHomeDirectory.getAbsoluteFile(), \"solr.xml\");\n    for (int idx = 1; idx < 10; ++idx) {\n      copyMinConf(new File(solrHomeDirectory, \"collection\" + idx));\n    }\n\n    NodeConfig cfg = SolrDispatchFilter.loadNodeConfig(solrHomeDirectory.toPath(), null);\n    return createCoreContainer(cfg, testCores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["f4abec28b874149a7223e32cc7a01704c27790de"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"7917a219001fa51c4289d6a8e1a98606995170b7":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"e15199583d3635cb940942caed05132dd6c4c7c6":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","e15199583d3635cb940942caed05132dd6c4c7c6"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["e15199583d3635cb940942caed05132dd6c4c7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["7116474e2e390259937401cf928323e0cbc75e60"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a837c064b67fa63a9394136e31218b908cdcf783"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["7917a219001fa51c4289d6a8e1a98606995170b7"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7917a219001fa51c4289d6a8e1a98606995170b7"],"31d4861802ca404d78ca1d15f4550eec415b9199":["6e764e9a107f93be9fa3c922bc6a197b3eec387e","7917a219001fa51c4289d6a8e1a98606995170b7"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"a837c064b67fa63a9394136e31218b908cdcf783":["f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48e6317c36b128552eaed2363bb069267defb0e0"],"48e6317c36b128552eaed2363bb069267defb0e0":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e15199583d3635cb940942caed05132dd6c4c7c6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ad026d488f8fbf9ab33e5232d3343395c19b6cc8":["48e6317c36b128552eaed2363bb069267defb0e0"],"8b6a4b585aed7660a589375f6a09b90efd29c961":[],"7917a219001fa51c4289d6a8e1a98606995170b7":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"e15199583d3635cb940942caed05132dd6c4c7c6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a626ec4d1c92e59fe390724d6220081047b03ce7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["8b6a4b585aed7660a589375f6a09b90efd29c961","9435d55e3ea95c5d94406d3affc36f9505b6a736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","f09a2a554f375a6ae3218e5eac14a1d1fb336dc7"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","7917a219001fa51c4289d6a8e1a98606995170b7","31d4861802ca404d78ca1d15f4550eec415b9199"],"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["ad026d488f8fbf9ab33e5232d3343395c19b6cc8"],"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"f4abec28b874149a7223e32cc7a01704c27790de":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"f09a2a554f375a6ae3218e5eac14a1d1fb336dc7":["407687e67faf6e1f02a211ca078d8e3eed631027","a837c064b67fa63a9394136e31218b908cdcf783"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"48e6317c36b128552eaed2363bb069267defb0e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8b6a4b585aed7660a589375f6a09b90efd29c961","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}