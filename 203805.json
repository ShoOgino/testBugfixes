{"path":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","commits":[{"id":"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e","date":1027293369,"type":0,"author":"gschwarz","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * suffix stripping (stemming) on the current term. The stripping is reduced\n\t * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n\t * from which all regular suffixes are build of. The simplification causes\n\t * some overstemming, and way more irregular stems, but still provides unique.\n\t * discriminators in the most of those cases.\n\t * The algorithm is context free, except of the length restrictions.\n\t */\n\tprivate void strip( StringBuffer buffer ) {\n\t\tboolean doMore = true;\n\t\twhile ( doMore && buffer.length() > 3 ) {\n\t\t\tif ( ( buffer.length() + substCount > 5 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\t// \"t\" occurs only as suffix of verbs.\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 't' && !uppercase ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdoMore = false;\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e","date":1029691996,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","sourceNew":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n\tboolean doMore = true;\n\twhile ( doMore && buffer.length() > 3 ) {\n\t    if ( ( buffer.length() + substCount > 5 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n\t    {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    // \"t\" occurs only as suffix of verbs.\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 't' && !uppercase ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else {\n\t\tdoMore = false;\n\t    }\n\t}\n    }\n\n","sourceOld":"\t/**\n\t * suffix stripping (stemming) on the current term. The stripping is reduced\n\t * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n\t * from which all regular suffixes are build of. The simplification causes\n\t * some overstemming, and way more irregular stems, but still provides unique.\n\t * discriminators in the most of those cases.\n\t * The algorithm is context free, except of the length restrictions.\n\t */\n\tprivate void strip( StringBuffer buffer ) {\n\t\tboolean doMore = true;\n\t\twhile ( doMore && buffer.length() > 3 ) {\n\t\t\tif ( ( buffer.length() + substCount > 5 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\t\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\t// \"t\" occurs only as suffix of verbs.\n\t\t\telse if ( buffer.charAt( buffer.length() - 1 ) == 't' && !uppercase ) {\n\t\t\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdoMore = false;\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4230eef3a047e2a85e989e7ced62bf7fd4a9f859","date":1080661498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","sourceNew":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n\tboolean doMore = true;\n\twhile ( doMore && buffer.length() > 3 ) {\n\t    if ( ( buffer.length() + substCount > 5 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n\t    {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    // \"t\" occurs only as suffix of verbs.\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else {\n\t\tdoMore = false;\n\t    }\n\t}\n    }\n\n","sourceOld":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n\tboolean doMore = true;\n\twhile ( doMore && buffer.length() > 3 ) {\n\t    if ( ( buffer.length() + substCount > 5 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n\t    {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    // \"t\" occurs only as suffix of verbs.\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 't' && !uppercase ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else {\n\t\tdoMore = false;\n\t    }\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d195ac4f5f0fd16249e88707973706feb1214df0","date":1080662088,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","sourceNew":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n      boolean doMore = true;\n      while ( doMore && buffer.length() > 3 ) {\n        if ( ( buffer.length() + substCount > 5 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n        {\n          buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        // \"t\" occurs only as suffix of verbs.\n        else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else {\n          doMore = false;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n\tboolean doMore = true;\n\twhile ( doMore && buffer.length() > 3 ) {\n\t    if ( ( buffer.length() + substCount > 5 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n\t    {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( ( buffer.length() + substCount > 4 ) &&\n\t\tbuffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n\t\tbuffer.delete( buffer.length() - 2, buffer.length() );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    // \"t\" occurs only as suffix of verbs.\n\t    else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n\t\tbuffer.deleteCharAt( buffer.length() - 1 );\n\t    }\n\t    else {\n\t\tdoMore = false;\n\t    }\n\t}\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2","date":1092688309,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/de/GermanStemmer#strip(StringBuffer).mjava","sourceNew":null,"sourceOld":"    /**\n     * suffix stripping (stemming) on the current term. The stripping is reduced\n     * to the seven \"base\" suffixes \"e\", \"s\", \"n\", \"t\", \"em\", \"er\" and * \"nd\",\n     * from which all regular suffixes are build of. The simplification causes\n     * some overstemming, and way more irregular stems, but still provides unique.\n     * discriminators in the most of those cases.\n     * The algorithm is context free, except of the length restrictions.\n     */\n    private void strip( StringBuffer buffer )\n    {\n      boolean doMore = true;\n      while ( doMore && buffer.length() > 3 ) {\n        if ( ( buffer.length() + substCount > 5 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"nd\" ) )\n        {\n          buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"em\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( ( buffer.length() + substCount > 4 ) &&\n          buffer.substring( buffer.length() - 2, buffer.length() ).equals( \"er\" ) ) {\n            buffer.delete( buffer.length() - 2, buffer.length() );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 's' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else if ( buffer.charAt( buffer.length() - 1 ) == 'n' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        // \"t\" occurs only as suffix of verbs.\n        else if ( buffer.charAt( buffer.length() - 1 ) == 't' ) {\n          buffer.deleteCharAt( buffer.length() - 1 );\n        }\n        else {\n          doMore = false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["d195ac4f5f0fd16249e88707973706feb1214df0"],"4230eef3a047e2a85e989e7ced62bf7fd4a9f859":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"d195ac4f5f0fd16249e88707973706feb1214df0":["4230eef3a047e2a85e989e7ced62bf7fd4a9f859"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"]},"commit2Childs":{"eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4230eef3a047e2a85e989e7ced62bf7fd4a9f859":["d195ac4f5f0fd16249e88707973706feb1214df0"],"d195ac4f5f0fd16249e88707973706feb1214df0":["eb502dc71e908fb2c30e64b73e1f7e7b6238f5a2"],"f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e":["4230eef3a047e2a85e989e7ced62bf7fd4a9f859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e"],"2cf2d6a8aa527ae2d11b26630eee5c9296d8d74e":["f1b51af49aa8e1c86a2453fc1d1b618effb6ec8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}