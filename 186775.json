{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(RussianCharsets.UnicodeRussian);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode,\n                RussianCharsets.UnicodeRussian);\n\n        final Token reusableToken = new Token();\n        final Token reusableSampleToken = new Token();\n        Token nextToken;\n        Token nextSampleToken;\n        for (;;)\n        {\n            nextToken = in.next(reusableToken);\n\n            if (nextToken == null)\n            {\n                break;\n            }\n\n            nextSampleToken = sample.next(reusableSampleToken);\n            assertEquals(\n                \"Unicode\",\n                nextToken.term(),\n                nextSampleToken == null\n                ? null\n                : nextSampleToken.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(RussianCharsets.UnicodeRussian);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode,\n                RussianCharsets.UnicodeRussian);\n\n        final Token reusableToken = new Token();\n        final Token reusableSampleToken = new Token();\n        Token nextToken;\n        Token nextSampleToken;\n        for (;;)\n        {\n            nextToken = in.next(reusableToken);\n\n            if (nextToken == null)\n            {\n                break;\n            }\n\n            nextSampleToken = sample.next(reusableSampleToken);\n            assertEquals(\n                \"Unicode\",\n                nextToken.term(),\n                nextSampleToken == null\n                ? null\n                : nextSampleToken.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(RussianCharsets.UnicodeRussian);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode,\n                RussianCharsets.UnicodeRussian);\n\n        TermAttribute text = (TermAttribute) in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = (TermAttribute) sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(RussianCharsets.UnicodeRussian);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode,\n                RussianCharsets.UnicodeRussian);\n\n        final Token reusableToken = new Token();\n        final Token reusableSampleToken = new Token();\n        Token nextToken;\n        Token nextSampleToken;\n        for (;;)\n        {\n            nextToken = in.next(reusableToken);\n\n            if (nextToken == null)\n            {\n                break;\n            }\n\n            nextSampleToken = sample.next(reusableSampleToken);\n            assertEquals(\n                \"Unicode\",\n                nextToken.term(),\n                nextSampleToken == null\n                ? null\n                : nextSampleToken.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8","date":1250973366,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer();\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = (TermAttribute) in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = (TermAttribute) sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(RussianCharsets.UnicodeRussian);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode,\n                RussianCharsets.UnicodeRussian);\n\n        TermAttribute text = (TermAttribute) in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = (TermAttribute) sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer();\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer();\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = (TermAttribute) in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = (TermAttribute) sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_CURRENT);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer();\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_CURRENT);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(Version.LUCENE_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_CURRENT);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2877c077c0dc229ee9871dc196b2a62442df599","date":1265411146,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode().mjava","sourceNew":"    /**\n     * @deprecated remove this test and its datafiles in Lucene 4.0\n     * the Snowball version has its own data tests.\n     */\n    @Deprecated\n    public void testUnicode30() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_30);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(Version.LUCENE_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    public void testUnicode() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_CURRENT);\n        inWords =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/testUTF8.txt\")),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                new FileInputStream(new File(dataDir, \"/org/apache/lucene/analysis/ru/resUTF8.htm\")),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(Version.LUCENE_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2877c077c0dc229ee9871dc196b2a62442df599":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2877c077c0dc229ee9871dc196b2a62442df599"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"c2877c077c0dc229ee9871dc196b2a62442df599":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["96e2db48ddfadd8c63de9ee8b4a0ff627e3daaa8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["ba1116b3450a9c1642c89445d131b37344055245"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["c2877c077c0dc229ee9871dc196b2a62442df599"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba1116b3450a9c1642c89445d131b37344055245":["85722042902595d9b0fbf38b7b57b139bdc12e4b"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}