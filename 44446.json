{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldTermStackTest#test2Terms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldTermStackTest#test2Terms().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldTermStackTest#test2Terms().mjava","sourceNew":"  public void test2Terms() throws Exception {\n    makeIndex();\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add( tq( \"b\" ), Occur.SHOULD );\n    query.add( tq( \"c\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 8, stack.termList.size() );\n    assertEquals( \"b(6,7,3)\", stack.pop().toString() );\n    assertEquals( \"b(8,9,4)\", stack.pop().toString() );\n    assertEquals( \"c(10,11,5)\", stack.pop().toString() );\n    assertEquals( \"b(14,15,7)\", stack.pop().toString() );\n    assertEquals( \"b(16,17,8)\", stack.pop().toString() );\n    assertEquals( \"c(18,19,9)\", stack.pop().toString() );\n    assertEquals( \"b(26,27,13)\", stack.pop().toString() );\n    assertEquals( \"b(30,31,15)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void test2Terms() throws Exception {\n    makeIndex();\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add( tq( \"b\" ), Occur.SHOULD );\n    query.add( tq( \"c\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 8, stack.termList.size() );\n    assertEquals( \"b(6,7,3)\", stack.pop().toString() );\n    assertEquals( \"b(8,9,4)\", stack.pop().toString() );\n    assertEquals( \"c(10,11,5)\", stack.pop().toString() );\n    assertEquals( \"b(14,15,7)\", stack.pop().toString() );\n    assertEquals( \"b(16,17,8)\", stack.pop().toString() );\n    assertEquals( \"c(18,19,9)\", stack.pop().toString() );\n    assertEquals( \"b(26,27,13)\", stack.pop().toString() );\n    assertEquals( \"b(30,31,15)\", stack.pop().toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldTermStackTest#test2Terms().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldTermStackTest#test2Terms().mjava","sourceNew":"  public void test2Terms() throws Exception {\n    makeIndex();\n    \n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add( tq( \"b\" ), Occur.SHOULD );\n    query.add( tq( \"c\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 8, stack.termList.size() );\n    assertEquals( \"b(6,7,3)\", stack.pop().toString() );\n    assertEquals( \"b(8,9,4)\", stack.pop().toString() );\n    assertEquals( \"c(10,11,5)\", stack.pop().toString() );\n    assertEquals( \"b(14,15,7)\", stack.pop().toString() );\n    assertEquals( \"b(16,17,8)\", stack.pop().toString() );\n    assertEquals( \"c(18,19,9)\", stack.pop().toString() );\n    assertEquals( \"b(26,27,13)\", stack.pop().toString() );\n    assertEquals( \"b(30,31,15)\", stack.pop().toString() );\n  }\n\n","sourceOld":"  public void test2Terms() throws Exception {\n    makeIndex();\n    \n    BooleanQuery query = new BooleanQuery();\n    query.add( tq( \"b\" ), Occur.SHOULD );\n    query.add( tq( \"c\" ), Occur.SHOULD );\n    FieldQuery fq = new FieldQuery( query, true, true );\n    FieldTermStack stack = new FieldTermStack( reader, 0, F, fq );\n    assertEquals( 8, stack.termList.size() );\n    assertEquals( \"b(6,7,3)\", stack.pop().toString() );\n    assertEquals( \"b(8,9,4)\", stack.pop().toString() );\n    assertEquals( \"c(10,11,5)\", stack.pop().toString() );\n    assertEquals( \"b(14,15,7)\", stack.pop().toString() );\n    assertEquals( \"b(16,17,8)\", stack.pop().toString() );\n    assertEquals( \"c(18,19,9)\", stack.pop().toString() );\n    assertEquals( \"b(26,27,13)\", stack.pop().toString() );\n    assertEquals( \"b(30,31,15)\", stack.pop().toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}