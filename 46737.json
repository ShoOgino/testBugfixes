{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20459fa16fd43975af90f1c6ba6894eb74800065","date":1341839561,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(NumberFormat.getNumberInstance().format(this.value),\n        Locale.ENGLISH, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/LegacyNumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode#getTermEscaped(EscapeQuerySyntax).mjava","sourceNew":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","sourceOld":"  /**\n   * This method is used to get the value converted to {@link String} and\n   * escaped using the given {@link EscapeQuerySyntax}.\n   * \n   * @param escaper the {@link EscapeQuerySyntax} used to escape the value {@link String}\n   * \n   * @return the value converte to {@link String} and escaped\n   */\n  protected CharSequence getTermEscaped(EscapeQuerySyntax escaper) {\n    return escaper.escape(numberFormat.format(this.value),\n        Locale.ROOT, Type.NORMAL);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20459fa16fd43975af90f1c6ba6894eb74800065":["9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","20459fa16fd43975af90f1c6ba6894eb74800065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"20459fa16fd43975af90f1c6ba6894eb74800065":["2acf500f78aa12b92e371fd89c719291986b6b90"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["20459fa16fd43975af90f1c6ba6894eb74800065"],"2acf500f78aa12b92e371fd89c719291986b6b90":["683242c67a3f6086bae8b1354748fcaa38edfbd5","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}