{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) {\n      return repeat(a);\n    }\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0) {\n      as.add(a);\n    }\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a, int min) {\n    if (min == 0) {\n      return repeatLight(a);\n    }\n    List<LightAutomaton> as = new ArrayList<>();\n    while (min-- > 0) {\n      as.add(a);\n    }\n    as.add(repeatLight(a));\n    return concatenateLight(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) {\n      return repeat(a);\n    }\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0) {\n      as.add(a);\n    }\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int count) {\n    if (count == 0) {\n      return repeat(a);\n    }\n    List<Automaton> as = new ArrayList<>();\n    while (count-- > 0) {\n      as.add(a);\n    }\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) {\n      return repeat(a);\n    }\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0) {\n      as.add(a);\n    }\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}