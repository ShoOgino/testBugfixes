{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","commits":[{"id":"73d216e8a31fcc28595d9f9518b2f081d9379789","date":1333813682,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a92b21feea3b1b4d7ad5a06439333c4f757318f","date":1333977928,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a960a2c8d8ca325137f7a262b70f270448352eb","date":1333985528,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86742eef063a9fee98e395315eec4ba4512dc787","date":1333992106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      // nocommit: wrap the uncaught handler with our own that prints the analyzer\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      // nocommit: wrap the uncaught handler with our own that prints the analyzer\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      // nocommit: wrap the uncaught handler with our own that prints the analyzer\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ec240b76d7ff137d58bc77b869525ebba68917f","date":1334086261,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      // nocommit: wrap the uncaught handler with our own that prints the analyzer\n      if (true || VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":["73d216e8a31fcc28595d9f9518b2f081d9379789"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#testRandomChains().mjava","sourceNew":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomChains() throws Throwable {\n    int numIterations = atLeast(20);\n    Random random = random();\n    for (int i = 0; i < numIterations; i++) {\n      MockRandomAnalyzer a = new MockRandomAnalyzer(random.nextLong());\n      if (VERBOSE) {\n        System.out.println(\"Creating random analyzer:\" + a);\n      }\n      try {\n        checkRandomData(random, a, 1000, 20, false,\n                        false /* We already validate our own offsets... */);\n      } catch (Throwable e) {\n        System.err.println(\"Exception from random analyzer: \" + a);\n        throw e;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["86742eef063a9fee98e395315eec4ba4512dc787"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"86742eef063a9fee98e395315eec4ba4512dc787":["1a960a2c8d8ca325137f7a262b70f270448352eb"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["73d216e8a31fcc28595d9f9518b2f081d9379789","6ec240b76d7ff137d58bc77b869525ebba68917f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"6ec240b76d7ff137d58bc77b869525ebba68917f":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"1a960a2c8d8ca325137f7a262b70f270448352eb":["5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["73d216e8a31fcc28595d9f9518b2f081d9379789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"73d216e8a31fcc28595d9f9518b2f081d9379789":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["6ec240b76d7ff137d58bc77b869525ebba68917f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86742eef063a9fee98e395315eec4ba4512dc787":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73d216e8a31fcc28595d9f9518b2f081d9379789"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1a960a2c8d8ca325137f7a262b70f270448352eb":["86742eef063a9fee98e395315eec4ba4512dc787"],"6ec240b76d7ff137d58bc77b869525ebba68917f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"5a92b21feea3b1b4d7ad5a06439333c4f757318f":["1a960a2c8d8ca325137f7a262b70f270448352eb"],"73d216e8a31fcc28595d9f9518b2f081d9379789":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","5a92b21feea3b1b4d7ad5a06439333c4f757318f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}