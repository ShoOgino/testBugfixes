{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (FutureArrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((FutureArrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && FutureArrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      private boolean matches(byte[] packedValue) {\n        // bounding box check\n        if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return false;\n        }\n\n        if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return false;\n        }\n\n        int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n        int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n        if (distancePredicate.test(docLatitude, docLongitude)) {\n          return true;\n        }\n        return false;\n      }\n\n      // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n      // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n      // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n      // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n      // 4. recurse naively (subtrees crossing over circle edge)\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        double latMin = decodeLatitude(minPackedValue, 0);\n        double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n        double latMax = decodeLatitude(maxPackedValue, 0);\n        double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n        return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n                && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimateDocCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      private boolean matches(byte[] packedValue) {\n        // bounding box check\n        if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return false;\n        }\n\n        if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return false;\n        }\n\n        int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n        int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n        if (distancePredicate.test(docLatitude, docLongitude)) {\n          return true;\n        }\n        return false;\n      }\n\n      // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n      // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n      // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n      // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n      // 4. recurse naively (subtrees crossing over circle edge)\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        double latMin = decodeLatitude(minPackedValue, 0);\n        double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n        double latMax = decodeLatitude(maxPackedValue, 0);\n        double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n        return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      private boolean matches(byte[] packedValue) {\n        // bounding box check\n        if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return false;\n        }\n\n        if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return false;\n        }\n\n        int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n        int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n        if (distancePredicate.test(docLatitude, docLongitude)) {\n          return true;\n        }\n        return false;\n      }\n\n      // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n      // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n      // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n      // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n      // 4. recurse naively (subtrees crossing over circle edge)\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        double latMin = decodeLatitude(minPackedValue, 0);\n        double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n        double latMax = decodeLatitude(maxPackedValue, 0);\n        double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n        return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":["9fc47cb7b4346802411bb432f501ed0673d7119e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimateDocCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      private boolean matches(byte[] packedValue) {\n        // bounding box check\n        if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return false;\n        }\n\n        if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return false;\n        }\n\n        int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n        int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n        if (distancePredicate.test(docLatitude, docLongitude)) {\n          return true;\n        }\n        return false;\n      }\n\n      // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n      // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n      // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n      // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n      // 4. recurse naively (subtrees crossing over circle edge)\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        double latMin = decodeLatitude(minPackedValue, 0);\n        double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n        double latMax = decodeLatitude(maxPackedValue, 0);\n        double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n        return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), scoreMode, iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), scoreMode, result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      private boolean matches(byte[] packedValue) {\n        // bounding box check\n        if (Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return false;\n        }\n\n        if ((Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(packedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return false;\n        }\n\n        int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n        int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n        if (distancePredicate.test(docLatitude, docLongitude)) {\n          return true;\n        }\n        return false;\n      }\n\n      // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n      // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n      // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n      // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n      // 4. recurse naively (subtrees crossing over circle edge)\n      private Relation relate(byte[] minPackedValue, byte[] maxPackedValue) {\n        if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0) {\n          // latitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if ((Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n            Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0)\n            && Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon2, 0, Integer.BYTES) < 0) {\n          // longitude out of bounding box range\n          return Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        double latMin = decodeLatitude(minPackedValue, 0);\n        double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n        double latMax = decodeLatitude(maxPackedValue, 0);\n        double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n        return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue)) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue)) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            return relate(minPackedValue, maxPackedValue);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (matches(packedValue) == false) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (matches(packedValue) == false) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            Relation relation = relate(minPackedValue, maxPackedValue);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["9c226b0eeb8b028f572020f459851a663a2c064e"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"646cad9a0473e40f431299c5d1567d1f4d32f689":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"9c226b0eeb8b028f572020f459851a663a2c064e":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"b0b597c65628ca9e73913a07e81691f8229bae35":["646cad9a0473e40f431299c5d1567d1f4d32f689","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9c226b0eeb8b028f572020f459851a663a2c064e"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"9c226b0eeb8b028f572020f459851a663a2c064e":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}