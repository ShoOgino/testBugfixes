{"path":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#create(SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<T>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<T>(fields, size);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static FieldValueHitQueue create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue(fields, size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<T>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<T>(fields, size);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<T>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<T>(fields, size);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#[T-extends-FieldValueHitQueue.Entry]_create(SortField[],int).mjava","sourceNew":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<T>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<T>(fields, size);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a hit queue sorted by the given list of fields.\n   * \n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length <code>numHits</code>.\n   * \n   * @param fields\n   *          SortField array we are sorting by in priority order (highest\n   *          priority first); cannot be <code>null</code> or empty\n   * @param size\n   *          The number of hits to retain. Must be greater than zero.\n   * @throws IOException\n   */\n  public static <T extends FieldValueHitQueue.Entry> FieldValueHitQueue<T> create(SortField[] fields, int size) throws IOException {\n\n    if (fields.length == 0) {\n      throw new IllegalArgumentException(\"Sort must contain at least one field\");\n    }\n\n    if (fields.length == 1) {\n      return new OneComparatorFieldValueHitQueue<T>(fields, size);\n    } else {\n      return new MultiComparatorsFieldValueHitQueue<T>(fields, size);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}