{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      new Double(NumericUtils.sortableLongToDouble(lower)), new Double(NumericUtils.sortableLongToDouble(upper)), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      new Double(NumericUtils.sortableLongToDouble(lower)), new Double(NumericUtils.sortableLongToDouble(upper)), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      new Double(NumericUtils.sortableLongToDouble(lower)), new Double(NumericUtils.sortableLongToDouble(upper)), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      new Double(NumericUtils.sortableLongToDouble(lower)), new Double(NumericUtils.sortableLongToDouble(upper)), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53b6c192847de8643a5da505cc433cbf8476a175":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}