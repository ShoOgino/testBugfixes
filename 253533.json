{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minusLight(LightAutomaton,LightAutomaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2));\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public LightAutomaton minusLight(LightAutomaton a1, LightAutomaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) {\n      return BasicAutomata.makeEmptyLight();\n    }\n    if (BasicOperations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersectionLight(a1, complementLight(a2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#minus(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2));\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (BasicOperations.isEmpty(a1) || a1 == a2) return BasicAutomata\n        .makeEmpty();\n    if (BasicOperations.isEmpty(a2)) return a1.cloneIfRequired();\n    if (a1.isSingleton()) {\n      if (BasicOperations.run(a2, a1.singleton)) return BasicAutomata.makeEmpty();\n      else return a1.cloneIfRequired();\n    }\n    return intersection(a1, a2.complement());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#minus(Automaton,Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states if a2 already deterministic and\n   *  exponential in number of a2's states otherwise.\n   */\n  static public Automaton minus(Automaton a1, Automaton a2, int maxDeterminizedStates) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2, maxDeterminizedStates));\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the intersection of the\n   * language of <code>a1</code> and the complement of the language of\n   * <code>a2</code>. As a side-effect, the automata may be determinized, if not\n   * already deterministic.\n   * <p>\n   * Complexity: quadratic in number of states (if already deterministic).\n   */\n  static public Automaton minus(Automaton a1, Automaton a2) {\n    if (Operations.isEmpty(a1) || a1 == a2) {\n      return Automata.makeEmpty();\n    }\n    if (Operations.isEmpty(a2)) {\n      return a1;\n    }\n    return intersection(a1, complement(a2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}