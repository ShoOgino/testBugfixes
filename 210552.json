{"path":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(q, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i=0; i<sd.length; i++) {\n      float score = sd[i].score;\n      log(s.explain(q,sd[i].doc));\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \"+id+\" shuould be \"+expectedScore+\" != \"+score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestFieldScoreQuery#doTestExactScore(String,FieldScoreQuery.Type).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(q, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestExactScore (String field, FieldScoreQuery.Type tp) throws Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    Query q = new FieldScoreQuery(field,tp);\n    TopDocs td = s.search(q,null,1000);\n    assertEquals(\"All docs should be matched!\",N_DOCS,td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (ScoreDoc aSd : sd) {\n      float score = aSd.score;\n      log(s.explain(q, aSd.doc));\n      String id = s.getIndexReader().document(aSd.doc).get(ID_FIELD);\n      float expectedScore = expectedFieldScore(id); // \"ID7\" --> 7.0\n      assertEquals(\"score of \" + id + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["3f74570911bfdb9f7b01948745dcd67c69676c0e","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["777b7ef341decfee8757f492d8a154637cd7a384"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["777b7ef341decfee8757f492d8a154637cd7a384"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"777b7ef341decfee8757f492d8a154637cd7a384":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}