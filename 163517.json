{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues, boolean cloudClient) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27e594a0c4bfe5e235e9de38c78944c254b6e17c","date":1576249297,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(null, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: {}\", report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: \" + report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a SolrReporter instance.\n   * @param httpClient HttpClient to use for constructing SolrClient instances.\n   * @param urlProvider what URL to send to.\n   * @param metricManager metric manager\n   * @param metrics metric specifications to report\n   * @param handler handler name to report to\n   * @param reporterId my reporter id\n   * @param rateUnit rate unit\n   * @param durationUnit duration unit\n   * @param params request parameters\n   * @param skipHistograms if true then don't send histogram metrics\n   * @param skipAggregateValues if true then don't send aggregate metrics' individual values\n   * @param cloudClient if true then use CloudSolrClient, plain HttpSolrClient otherwise.\n   * @param compact if true then use compact representation.\n   *\n   * @deprecated use {@link SolrReporter#SolrReporter(SolrClientCache, boolean, Supplier, SolrMetricManager, List, String, String, TimeUnit, TimeUnit, SolrParams, boolean, boolean, boolean, boolean)} instead.\n   */\n  @Deprecated(since = \"8.6.0\")\n  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    this (new SolrClientCache(httpClient), true, urlProvider, metricManager,\n        metrics, handler, reporterId, rateUnit, durationUnit,\n        params, skipHistograms, skipAggregateValues, cloudClient, compact);\n  }\n\n","sourceOld":"  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    super(dummyRegistry, \"solr-reporter\", MetricFilter.ALL, rateUnit, durationUnit, null, true);\n\n    this.metricManager = metricManager;\n    this.urlProvider = urlProvider;\n    this.reporterId = reporterId;\n    if (handler == null) {\n      handler = MetricsCollectorHandler.HANDLER_PATH;\n    }\n    this.handler = handler;\n    this.clientCache = new SolrClientCache(httpClient);\n    this.compiledReports = new ArrayList<>();\n    metrics.forEach(report -> {\n      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);\n      try {\n        CompiledReport cs = new CompiledReport(report);\n        compiledReports.add(cs);\n      } catch (PatternSyntaxException e) {\n        log.warn(\"Skipping report with invalid registryPattern: {}\", report.registryPattern, e);\n      }\n    });\n    this.skipHistograms = skipHistograms;\n    this.skipAggregateValues = skipAggregateValues;\n    this.cloudClient = cloudClient;\n    this.compact = compact;\n    this.params = new ModifiableSolrParams();\n    this.params.set(REPORTER_ID, reporterId);\n    // allow overrides to take precedence\n    if (params != null) {\n      this.params.add(params);\n    }\n    metadata = new HashMap<>();\n    metadata.put(REPORTER_ID, reporterId);\n  }\n\n","bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrReporter#SolrReporter(HttpClient,Supplier[String],SolrMetricManager,List[Report],String,String,TimeUnit,TimeUnit,SolrParams,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a SolrReporter instance.\n   * @param httpClient HttpClient to use for constructing SolrClient instances.\n   * @param urlProvider what URL to send to.\n   * @param metricManager metric manager\n   * @param metrics metric specifications to report\n   * @param handler handler name to report to\n   * @param reporterId my reporter id\n   * @param rateUnit rate unit\n   * @param durationUnit duration unit\n   * @param params request parameters\n   * @param skipHistograms if true then don't send histogram metrics\n   * @param skipAggregateValues if true then don't send aggregate metrics' individual values\n   * @param cloudClient if true then use CloudSolrClient, plain HttpSolrClient otherwise.\n   * @param compact if true then use compact representation.\n   *\n   * @deprecated use {@link SolrReporter#SolrReporter(SolrClientCache, boolean, Supplier, SolrMetricManager, List, String, String, TimeUnit, TimeUnit, SolrParams, boolean, boolean, boolean, boolean)} instead.\n   */\n  @Deprecated\n  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    this (new SolrClientCache(httpClient), true, urlProvider, metricManager,\n        metrics, handler, reporterId, rateUnit, durationUnit,\n        params, skipHistograms, skipAggregateValues, cloudClient, compact);\n  }\n\n","sourceOld":"  /**\n   * Create a SolrReporter instance.\n   * @param httpClient HttpClient to use for constructing SolrClient instances.\n   * @param urlProvider what URL to send to.\n   * @param metricManager metric manager\n   * @param metrics metric specifications to report\n   * @param handler handler name to report to\n   * @param reporterId my reporter id\n   * @param rateUnit rate unit\n   * @param durationUnit duration unit\n   * @param params request parameters\n   * @param skipHistograms if true then don't send histogram metrics\n   * @param skipAggregateValues if true then don't send aggregate metrics' individual values\n   * @param cloudClient if true then use CloudSolrClient, plain HttpSolrClient otherwise.\n   * @param compact if true then use compact representation.\n   *\n   * @deprecated use {@link SolrReporter#SolrReporter(SolrClientCache, boolean, Supplier, SolrMetricManager, List, String, String, TimeUnit, TimeUnit, SolrParams, boolean, boolean, boolean, boolean)} instead.\n   */\n  @Deprecated(since = \"8.6.0\")\n  public SolrReporter(HttpClient httpClient, Supplier<String> urlProvider, SolrMetricManager metricManager,\n                      List<Report> metrics, String handler,\n                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,\n                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,\n                      boolean cloudClient, boolean compact) {\n    this (new SolrClientCache(httpClient), true, urlProvider, metricManager,\n        metrics, handler, reporterId, rateUnit, durationUnit,\n        params, skipHistograms, skipAggregateValues, cloudClient, compact);\n  }\n\n","bugFix":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"bfc52860e6d13d034226a760813c59d984c6817a":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["9df8125ba9193a2e2e285ed92157810b1952a244"],"43564cbb30b064675027cfb569564e8531096e97":["daeaac5f7b42498079f0fb7c3a91802e588fc21a","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7ced979f39d7651addfc7d805e1d9bfac215822":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["43564cbb30b064675027cfb569564e8531096e97","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"9df8125ba9193a2e2e285ed92157810b1952a244":["27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"43564cbb30b064675027cfb569564e8531096e97":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","9df8125ba9193a2e2e285ed92157810b1952a244"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"9df8125ba9193a2e2e285ed92157810b1952a244":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}