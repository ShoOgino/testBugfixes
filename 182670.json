{"path":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if(bytes.length == 0)\n        return; // default\n      if (datOut == null)\n        initDataOut();\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      if (datOut == null)\n        initDataOut();\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if(bytes.length == 0)\n        return; // default\n      if (datOut == null)\n        initDataOut();\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      if (datOut == null)\n        initDataOut();\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0)\n        return; // default\n      fill(docID);\n      docToAddress[docID] = address;\n      datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      address += bytes.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      assert !merge;\n      if (bytes.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      docToAddress[docID] = address;\n      pool.copy(bytes);\n      address += bytes.length;\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["e128967bca58657bc0039d4bfe631e63e81f1977"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["e128967bca58657bc0039d4bfe631e63e81f1977","f9efc72acdea22f5285be0a808f8bba51bb8e367"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9235b9d4454a46c066cda47fed7ca0a34e614529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","e128967bca58657bc0039d4bfe631e63e81f1977"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"e128967bca58657bc0039d4bfe631e63e81f1977":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}