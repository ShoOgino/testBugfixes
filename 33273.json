{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66c64e8cfded6a585100e6430238faaf416f3fea","date":1344964603,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (BindException e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (BindException e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (BindException e3) {\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    \n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    \n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b28f0928f1f17bf5af380ad693363268fbb7b91","date":1385935125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.unblockPort(zklocalport);\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    \n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.unblockPort(zklocalport);\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    \n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50bdc7c19755e2cab7f6e81a5d70583c375950ce","date":1407852873,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.unblockPort(zklocalport);\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(2000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(5000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          log.error(\"Could not get the port to start jetty again\", e3);\n          // we coud not get the port\n          jetty.stop();\n          return false;\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.unblockPort(zklocalport);\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          if (cores.isZooKeeperAware()) {\n            int zklocalport = ((InetSocketAddress) cores.getZkController()\n                .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n            IpTables.unblockPort(zklocalport);\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          int zklocalport = ((InetSocketAddress) cores.getZkController()\n              .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n          IpTables.unblockPort(zklocalport);\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":["3b28f0928f1f17bf5af380ad693363268fbb7b91"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    FilterHolder filterHolder = jetty.getDispatchFilter();\n    if (filterHolder != null) {\n      Filter filter = filterHolder.getFilter();\n      if (filter != null) {\n        CoreContainer cores = ((SolrDispatchFilter) filter).getCores();\n        if (cores != null) {\n          if (cores.isZooKeeperAware()) {\n            int zklocalport = ((InetSocketAddress) cores.getZkController()\n                .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n            IpTables.unblockPort(zklocalport);\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    monkeyLog(\"starting jetty! \" + jetty.getLocalPort());\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    monkeyLog(\"starting jetty! \" + jetty.getLocalPort());\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#start(JettySolrRunner).mjava","sourceNew":null,"sourceOld":"  public static boolean start(JettySolrRunner jetty) throws Exception {\n    monkeyLog(\"starting jetty! \" + jetty.getLocalPort());\n    IpTables.unblockPort(jetty.getLocalPort());\n    try {\n      jetty.start();\n    } catch (Exception e) {\n      jetty.stop();\n      Thread.sleep(3000);\n      try {\n        jetty.start();\n      } catch (Exception e2) {\n        jetty.stop();\n        Thread.sleep(10000);\n        try {\n          jetty.start();\n        } catch (Exception e3) {\n          jetty.stop();\n          Thread.sleep(30000);\n          try {\n            jetty.start();\n          } catch (Exception e4) {\n            log.error(\"Could not get the port to start jetty again\", e4);\n            // we coud not get the port\n            jetty.stop();\n            return false;\n          }\n        }\n      }\n    }\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      if (cores.isZooKeeperAware()) {\n        int zklocalport = ((InetSocketAddress) cores.getZkController()\n            .getZkClient().getSolrZooKeeper().getSocketAddress()).getPort();\n        IpTables.unblockPort(zklocalport);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b28f0928f1f17bf5af380ad693363268fbb7b91":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"66c64e8cfded6a585100e6430238faaf416f3fea":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"61c45e99cf6676da48f19d7511c73712ad39402b":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"50bdc7c19755e2cab7f6e81a5d70583c375950ce":["3b28f0928f1f17bf5af380ad693363268fbb7b91"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["c7869f64c874ebf7f317d22c00baf2b6857797a6","66c64e8cfded6a585100e6430238faaf416f3fea"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","66c64e8cfded6a585100e6430238faaf416f3fea"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["66c64e8cfded6a585100e6430238faaf416f3fea"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["1088b72b3b4cc45316b7595bd09023c859cd2327","61c45e99cf6676da48f19d7511c73712ad39402b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["6013b4c7388f1627659c8f96c44abd10a294d3a6","3b28f0928f1f17bf5af380ad693363268fbb7b91"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["50bdc7c19755e2cab7f6e81a5d70583c375950ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3b28f0928f1f17bf5af380ad693363268fbb7b91":["50bdc7c19755e2cab7f6e81a5d70583c375950ce","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"66c64e8cfded6a585100e6430238faaf416f3fea":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"61c45e99cf6676da48f19d7511c73712ad39402b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"50bdc7c19755e2cab7f6e81a5d70583c375950ce":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["3b28f0928f1f17bf5af380ad693363268fbb7b91","05a14b2611ead08655a2b2bdc61632eb31316e57","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["61c45e99cf6676da48f19d7511c73712ad39402b","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["66c64e8cfded6a585100e6430238faaf416f3fea","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","05a14b2611ead08655a2b2bdc61632eb31316e57","e9017cf144952056066919f1ebc7897ff9bd71b1","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}