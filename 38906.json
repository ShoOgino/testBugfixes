{"path":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","commits":[{"id":"1833c624d42634c14299628650e0a70626349a71","date":1204207883,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @return\n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    }\n    else {\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750ae94a53c48546afa6bcf9b172428e09933da0","date":1216334670,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","sourceNew":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    }\n    else {\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","sourceOld":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @return\n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    }\n    else {\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f403af4d6e4de7f9c0881d6592dfb522d5fad41","date":1258470444,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","sourceNew":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    } else if (ch == '\"' || ch == '\\''){\n      valueSource = new LiteralValueSource(sp.getQuotedString());\n    }\n    else {\n\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","sourceOld":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    }\n    else {\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseValueSource(boolean).mjava","sourceNew":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    } else if (ch == '\"' || ch == '\\''){\n      valueSource = new LiteralValueSource(sp.getQuotedString());\n    }\n    else {\n\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","sourceOld":"  /**\n   * Parse an individual value source.\n   * \n   * @param doConsumeDelimiter whether to consume a delimiter following the ValueSource  \n   * @throws ParseException\n   */\n  protected ValueSource parseValueSource(boolean doConsumeDelimiter) throws ParseException {\n    ValueSource valueSource;\n    \n    int ch = sp.peek();\n    if (ch>='0' && ch<='9'  || ch=='.' || ch=='+' || ch=='-') {\n      valueSource = new ConstValueSource(sp.getFloat());\n    } else if (ch == '\"' || ch == '\\''){\n      valueSource = new LiteralValueSource(sp.getQuotedString());\n    }\n    else {\n\n      String id = sp.getId();\n      if (sp.opt(\"(\")) {\n        // a function... look it up.\n        ValueSourceParser argParser = req.getCore().getValueSourceParser(id);\n        if (argParser==null) {\n          throw new ParseException(\"Unknown function \" + id + \" in FunctionQuery(\" + sp + \")\");\n        }\n        valueSource = argParser.parse(this);\n        sp.expect(\")\");\n      }\n      else {\n        SchemaField f = req.getSchema().getField(id);\n        valueSource = f.getType().getValueSource(f, this);\n      }\n    }\n    \n    if (doConsumeDelimiter)\n      consumeArgumentDelimiter();\n    \n    return valueSource;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"750ae94a53c48546afa6bcf9b172428e09933da0":["1833c624d42634c14299628650e0a70626349a71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8f403af4d6e4de7f9c0881d6592dfb522d5fad41":["750ae94a53c48546afa6bcf9b172428e09933da0"],"ad94625fb8d088209f46650c8097196fec67f00c":["8f403af4d6e4de7f9c0881d6592dfb522d5fad41"],"1833c624d42634c14299628650e0a70626349a71":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"750ae94a53c48546afa6bcf9b172428e09933da0":["8f403af4d6e4de7f9c0881d6592dfb522d5fad41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1833c624d42634c14299628650e0a70626349a71"],"8f403af4d6e4de7f9c0881d6592dfb522d5fad41":["ad94625fb8d088209f46650c8097196fec67f00c"],"1833c624d42634c14299628650e0a70626349a71":["750ae94a53c48546afa6bcf9b172428e09933da0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}