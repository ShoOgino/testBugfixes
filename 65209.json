{"path":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","bugFix":["f1efe3edca215dd9891cb42af283fed96f792ca0","67aadace85f701c87a4e0721eedcda25d8415a70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) throws IOException {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() throws IOException {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n\n      @Override\n      public IndexInput openFullSlice() {\n        return openSlice(\"full-slice\", 0, descriptor.length);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c50a88b580d08fc67d9a94b8b32b9d07a5972f8c","date":1347635292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final Descriptor descriptor = new Descriptor(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","sourceOld":"  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf83b1542b01ad5cddb41b01dc51f751215919","date":1376231222,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context), getReadChunkSize());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSDirectory#createSlicer(String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexInputSlicer createSlicer(final String name,\n      final IOContext context) throws IOException {\n    ensureOpen();\n    final File file = new File(getDirectory(), name);\n    final RandomAccessFile descriptor = new RandomAccessFile(file, \"r\");\n    return new IndexInputSlicer() {\n\n      @Override\n      public void close() throws IOException {\n        descriptor.close();\n      }\n\n      @Override\n      public IndexInput openSlice(String sliceDescription, long offset, long length) {\n        return new SimpleFSIndexInput(\"SimpleFSIndexInput(\" + sliceDescription + \" in path=\\\"\" + file.getPath() + \"\\\" slice=\" + offset + \":\" + (offset+length) + \")\", descriptor, offset,\n            length, BufferedIndexInput.bufferSize(context));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c50a88b580d08fc67d9a94b8b32b9d07a5972f8c","7530de27b87b961b51f01bd1299b7004d46e8823"],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["0dcf83b1542b01ad5cddb41b01dc51f751215919","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"c50a88b580d08fc67d9a94b8b32b9d07a5972f8c":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c50a88b580d08fc67d9a94b8b32b9d07a5972f8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["c50a88b580d08fc67d9a94b8b32b9d07a5972f8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c50a88b580d08fc67d9a94b8b32b9d07a5972f8c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["56572ec06f1407c066d6b7399413178b33176cd8","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0dcf83b1542b01ad5cddb41b01dc51f751215919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}