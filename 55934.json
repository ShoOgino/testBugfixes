{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","commits":[{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#rehash().mjava","sourceNew":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","sourceOld":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#rehash().mjava","sourceNew":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","sourceOld":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric.LongCounts#rehash().mjava","sourceNew":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","sourceOld":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorNumeric.LongCounts#rehash().mjava","sourceNew":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","sourceOld":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV.LongCounts#rehash().mjava","sourceNew":"    protected void rehash() {\n      long[] oldVals = vals;\n      long[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new long[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        long count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","sourceOld":"    protected void rehash() {\n      long[] oldVals = vals;\n      int[] oldCounts = counts;  // after retrieving the count, this array is reused as a mapping to new array\n      int newCapacity = vals.length << 1;\n      vals = new long[newCapacity];\n      counts = new int[newCapacity];\n      threshold = (int) (newCapacity * LOAD_FACTOR);\n\n      for (int i=0; i<oldVals.length; i++) {\n        int count = oldCounts[i];\n        if (count == 0) {\n          oldCounts[i] = -1;\n          continue;\n        }\n\n        long val = oldVals[i];\n\n        int h = hash(val);\n        int slot = h & (vals.length-1);\n        while (counts[slot] != 0) {\n          slot = (slot + ((h>>7)|1)) & (vals.length-1);\n        }\n        counts[slot] = count;\n        vals[slot] = val;\n        oldCounts[i] = slot;\n      }\n\n      oldToNewMapping = oldCounts;\n    }\n\n","bugFix":["dd0759e8803a09424422a329163d5900f6b10c42"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"602cca3f75af03832471d8324bbc5b977a02969c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","602cca3f75af03832471d8324bbc5b977a02969c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"602cca3f75af03832471d8324bbc5b977a02969c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1c841e27891873cab110ebeb89f124a8ec470176","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["602cca3f75af03832471d8324bbc5b977a02969c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}