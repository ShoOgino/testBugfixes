{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#nonManagedSchemaExists().mjava","commits":[{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#nonManagedSchemaExists().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private boolean nonManagedSchemaExists() {\n    boolean exists = false;\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      String nonManagedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n      try {\n        exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n        log.warn(\"\", e); // Log as warning and suppress the exception \n      } catch (KeeperException e) {\n        // log as warning and suppress the exception\n        log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n      }\n    } else { // Config is not in ZooKeeper\n      InputStream nonManagedSchemaInputStream = null;\n      try {\n        nonManagedSchemaInputStream = loader.openSchema(resourceName);\n        if (null != nonManagedSchemaInputStream) {\n          exists = true;\n        }\n      } catch (IOException e) {\n        // This is expected when the non-managed schema does not exist\n      } finally {\n        IOUtils.closeQuietly(nonManagedSchemaInputStream);\n      }\n    }\n    return exists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchemaFactory#nonManagedSchemaExists().mjava","sourceNew":null,"sourceOld":"  /**\n   * Return whether a non-managed schema exists, either in local storage or on ZooKeeper. \n   */\n  private boolean nonManagedSchemaExists() {\n    boolean exists = false;\n    SolrResourceLoader loader = config.getResourceLoader();\n    if (loader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader zkLoader = (ZkSolrResourceLoader)loader;\n      String nonManagedSchemaPath = zkLoader.getCollectionZkPath() + \"/\" + resourceName;\n      try {\n        exists = zkLoader.getZkController().pathExists(nonManagedSchemaPath);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt(); // Restore the interrupted status\n        log.warn(\"\", e); // Log as warning and suppress the exception \n      } catch (KeeperException e) {\n        // log as warning and suppress the exception\n        log.warn(\"Error checking for the existence of the non-managed schema \" + resourceName, e);\n      }\n    } else { // Config is not in ZooKeeper\n      InputStream nonManagedSchemaInputStream = null;\n      try {\n        nonManagedSchemaInputStream = loader.openSchema(resourceName);\n        if (null != nonManagedSchemaInputStream) {\n          exists = true;\n        }\n      } catch (IOException e) {\n        // This is expected when the non-managed schema does not exist\n      } finally {\n        IOUtils.closeQuietly(nonManagedSchemaInputStream);\n      }\n    }\n    return exists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"]},"commit2Childs":{"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}