{"path":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#load(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908c8e2c79736122e37d47d73a053999c24bac65","date":1374200099,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fieldnames.length) {\n          input_err(\"expected \"+fieldnames.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":["e34a66231ee53fe909c5f7c0e71131fcb5246d89"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fieldnames.length) {\n          input_err(\"expected \"+fieldnames.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fields.length) {\n          input_err(\"expected \"+fields.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor)\n      throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = stream.getReader();\n    if (skipLines > 0) {\n      if (!(reader instanceof BufferedReader)) {\n        reader = new BufferedReader(reader);\n      }\n      BufferedReader r = (BufferedReader) reader;\n      for (int i = 0; i < skipLines; i++) {\n        r.readLine();\n      }\n    }\n\n    CSVParser parser = new CSVParser(reader, strategy);\n\n    // parse the fieldnames from the header of the file\n    if (fieldnames == null) {\n      fieldnames = parser.getLine();\n      if (fieldnames == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Expected fieldnames in CSV input\");\n      }\n      prepareFields();\n    }\n\n    // read the rest of the CSV file\n    for (;;) {\n      int line = parser.getLineNumber(); // for error reporting in MT mode\n      String[] vals = null;\n      try {\n        vals = parser.getLine();\n      } catch (IOException e) {\n        // Catch the exception and rethrow it with more line information\n        input_err(\"can't read line: \" + line, null, line, e);\n      }\n      if (vals == null) break;\n\n      if (vals.length != fieldnames.length) {\n        input_err(\"expected \" + fieldnames.length + \" values but got \" + vals.length, vals, line);\n      }\n\n      addDoc(line, vals);\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fieldnames.length) {\n          input_err(\"expected \"+fieldnames.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff47d27eb02068a9e554ff2d11e4bfd83875c20","date":1525634759,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase#load(SolrQueryRequest,SolrQueryResponse,ContentStream,UpdateRequestProcessor).mjava","sourceNew":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor) throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = null;\n    try {\n      reader = stream.getReader();\n      if (skipLines>0) {\n        if (!(reader instanceof BufferedReader)) {\n          reader = new BufferedReader(reader);\n        }\n        BufferedReader r = (BufferedReader)reader;\n        for (int i=0; i<skipLines; i++) {\n          r.readLine();\n        }\n      }\n\n      CSVParser parser = new CSVParser(reader, strategy);\n\n      // parse the fieldnames from the header of the file\n      if (fieldnames==null) {\n        fieldnames = parser.getLine();\n        if (fieldnames==null) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Expected fieldnames in CSV input\");\n        }\n        prepareFields();\n      }\n\n      // read the rest of the CSV file\n      for(;;) {\n        int line = parser.getLineNumber();  // for error reporting in MT mode\n        String[] vals = null;\n        try {\n          vals = parser.getLine();\n        } catch (IOException e) {\n          //Catch the exception and rethrow it with more line information\n         input_err(\"can't read line: \" + line, null, line, e);\n        }\n        if (vals==null) break;\n\n        if (vals.length != fieldnames.length) {\n          input_err(\"expected \"+fieldnames.length+\" values but got \"+vals.length, vals, line);\n        }\n\n        addDoc(line,vals);\n      }\n    } finally{\n      if (reader != null) {\n        IOUtils.closeQuietly(reader);\n      }\n    }\n  }\n\n","sourceOld":"  /** load the CSV input */\n  @Override\n  public void load(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream, UpdateRequestProcessor processor)\n      throws IOException {\n    errHeader = \"CSVLoader: input=\" + stream.getSourceInfo();\n    Reader reader = stream.getReader();\n    if (skipLines > 0) {\n      if (!(reader instanceof BufferedReader)) {\n        reader = new BufferedReader(reader);\n      }\n      BufferedReader r = (BufferedReader) reader;\n      for (int i = 0; i < skipLines; i++) {\n        r.readLine();\n      }\n    }\n\n    CSVParser parser = new CSVParser(reader, strategy);\n\n    // parse the fieldnames from the header of the file\n    if (fieldnames == null) {\n      fieldnames = parser.getLine();\n      if (fieldnames == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Expected fieldnames in CSV input\");\n      }\n      prepareFields();\n    }\n\n    // read the rest of the CSV file\n    for (;;) {\n      int line = parser.getLineNumber(); // for error reporting in MT mode\n      String[] vals = null;\n      try {\n        vals = parser.getLine();\n      } catch (IOException e) {\n        // Catch the exception and rethrow it with more line information\n        input_err(\"can't read line: \" + line, null, line, e);\n      }\n      if (vals == null) break;\n\n      if (vals.length != fieldnames.length) {\n        input_err(\"expected \" + fieldnames.length + \" values but got \" + vals.length, vals, line);\n      }\n\n      addDoc(line, vals);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cff47d27eb02068a9e554ff2d11e4bfd83875c20":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["042e4d934397657ba04c82b46cc5665076bc5c58","908c8e2c79736122e37d47d73a053999c24bac65"],"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908c8e2c79736122e37d47d73a053999c24bac65":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac35531329b1809368fb0780bcf1e72d0add3c21":["908c8e2c79736122e37d47d73a053999c24bac65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cff47d27eb02068a9e554ff2d11e4bfd83875c20"]},"commit2Childs":{"cff47d27eb02068a9e554ff2d11e4bfd83875c20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"042e4d934397657ba04c82b46cc5665076bc5c58":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","908c8e2c79736122e37d47d73a053999c24bac65"],"908c8e2c79736122e37d47d73a053999c24bac65":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ac35531329b1809368fb0780bcf1e72d0add3c21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["cff47d27eb02068a9e554ff2d11e4bfd83875c20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}