{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","sourceNew":"    /**\n     * @deprecated remove this test and its datafiles in Lucene 4.0\n     * the Snowball version has its own data tests.\n     */\n    @Deprecated\n    public void testUnicode30() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_30);\n        inWords =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"testUTF8.txt\"),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"resUTF8.htm\"),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(TEST_VERSION_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    /**\n     * @deprecated remove this test and its datafiles in Lucene 4.0\n     * the Snowball version has its own data tests.\n     */\n    @Deprecated\n    public void testUnicode30() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_30);\n        inWords =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"testUTF8.txt\"),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"resUTF8.htm\"),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(TEST_VERSION_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/ru/TestRussianAnalyzer#testUnicode30().mjava","sourceNew":"    /**\n     * @deprecated remove this test and its datafiles in Lucene 4.0\n     * the Snowball version has its own data tests.\n     */\n    @Deprecated\n    public void testUnicode30() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_30);\n        inWords =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"testUTF8.txt\"),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"resUTF8.htm\"),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(TEST_VERSION_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","sourceOld":"    /**\n     * @deprecated remove this test and its datafiles in Lucene 4.0\n     * the Snowball version has its own data tests.\n     */\n    @Deprecated\n    public void testUnicode30() throws IOException\n    {\n        RussianAnalyzer ra = new RussianAnalyzer(Version.LUCENE_30);\n        inWords =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"testUTF8.txt\"),\n                \"UTF-8\");\n\n        sampleUnicode =\n            new InputStreamReader(\n                getClass().getResourceAsStream(\"resUTF8.htm\"),\n                \"UTF-8\");\n\n        TokenStream in = ra.tokenStream(\"all\", inWords);\n\n        RussianLetterTokenizer sample =\n            new RussianLetterTokenizer(TEST_VERSION_CURRENT,\n                sampleUnicode);\n\n        TermAttribute text = in.getAttribute(TermAttribute.class);\n        TermAttribute sampleText = sample.getAttribute(TermAttribute.class);\n\n        for (;;)\n        {\n          if (in.incrementToken() == false)\n            break;\n\n            boolean nextSampleToken = sample.incrementToken();\n            assertEquals(\n                \"Unicode\",\n                text.term(),\n                nextSampleToken == false\n                ? null\n                : sampleText.term());\n        }\n\n        inWords.close();\n        sampleUnicode.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}