{"path":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","commits":[{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(Command,Object,Method).mjava","sourceNew":"    Cmd(String command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(Command command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","sourceNew":"    Cmd(String command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes.length == 1) {\n          readPayloadType(method.getGenericParameterTypes()[0]);\n        } else if (parameterTypes.length == 3) {\n          if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n            throw new RuntimeException(\"Invalid params for method \" + method);\n          }\n          Type t = method.getGenericParameterTypes()[2];\n          readPayloadType(t);\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","sourceOld":"    Cmd(String command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        if (parameterTypes.length == 3) {\n          Type t = method.getGenericParameterTypes()[2];\n          if (t instanceof ParameterizedType) {\n            ParameterizedType typ = (ParameterizedType) t;\n            if (typ.getRawType() == PayloadObj.class) {\n              isWrappedInPayloadObj = true;\n              Type t1 = typ.getActualTypeArguments()[0];\n              if (t1 instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) t1;\n                c = (Class) parameterizedType.getRawType();\n              } else {\n                c = (Class) typ.getActualTypeArguments()[0];\n              }\n            }\n          } else {\n            c = (Class) t;\n          }\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9","date":1593520826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/AnnotatedApi.Cmd#Cmd(String,Object,Method).mjava","sourceNew":"    Cmd(String command, Object obj, Method method) {\n      this.command = command;\n      this.obj = obj;\n      try {\n        this.method = MethodHandles.publicLookup().unreflect(method);\n      } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to access method, may be not public or accessible \", e);\n      }\n      Class<?>[] parameterTypes = method.getParameterTypes();\n      paramsCount = parameterTypes.length;\n      if (parameterTypes.length == 1) {\n        readPayloadType(method.getGenericParameterTypes()[0]);\n      } else if (parameterTypes.length == 3) {\n        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n          throw new RuntimeException(\"Invalid params for method \" + method);\n        }\n        Type t = method.getGenericParameterTypes()[2];\n        readPayloadType(t);\n      }\n      if (parameterTypes.length > 3) {\n        throw new RuntimeException(\"Invalid params count for method \" + method);\n      }\n    }\n\n","sourceOld":"    Cmd(String command, Object obj, Method method) {\n      if (Modifier.isPublic(method.getModifiers())) {\n        this.command = command;\n        this.obj = obj;\n        this.method = method;\n        Class<?>[] parameterTypes = method.getParameterTypes();\n        paramsCount = parameterTypes.length;\n        if (parameterTypes.length == 1) {\n          readPayloadType(method.getGenericParameterTypes()[0]);\n        } else if (parameterTypes.length == 3) {\n          if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {\n            throw new RuntimeException(\"Invalid params for method \" + method);\n          }\n          Type t = method.getGenericParameterTypes()[2];\n          readPayloadType(t);\n        }\n        if (parameterTypes.length > 3) {\n          throw new RuntimeException(\"Invalid params count for method \" + method);\n        }\n      } else {\n        throw new RuntimeException(method.toString() + \" is not a public static method\");\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"]},"commit2Childs":{"6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["6cf6b8a09f9884658aca1723a4fa1efa4ba16dd9"],"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}