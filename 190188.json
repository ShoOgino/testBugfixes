{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#SepSkipListReader(IndexInput,IntIndexInput,IntIndexInput,IntIndexInput,int,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#SepSkipListReader(IndexInput,IntIndexInput,IntIndexInput,IntIndexInput,int,int).mjava","pathOld":"/dev/null","sourceNew":"  SepSkipListReader(IndexInput skipStream,\n                    IntIndexInput freqIn,\n                    IntIndexInput docIn,\n                    IntIndexInput posIn,\n                    int maxSkipLevels,\n                    int skipInterval)\n    throws IOException {\n    super(skipStream, maxSkipLevels, skipInterval);\n    if (freqIn != null) {\n      freqIndex = new IntIndexInput.Index[maxSkipLevels];\n    }\n    docIndex = new IntIndexInput.Index[maxSkipLevels];\n    if (posIn != null) {\n      posIndex = new IntIndexInput.Index[maxNumberOfSkipLevels];\n    }\n    for(int i=0;i<maxSkipLevels;i++) {\n      if (freqIn != null) {\n        freqIndex[i] = freqIn.index();\n      }\n      docIndex[i] = docIn.index();\n      if (posIn != null) {\n        posIndex[i] = posIn.index();\n      }\n    }\n    payloadPointer = new long[maxSkipLevels];\n    payloadLength = new int[maxSkipLevels];\n\n    if (freqIn != null) {\n      lastFreqIndex = freqIn.index();\n    } else {\n      lastFreqIndex = null;\n    }\n    lastDocIndex = docIn.index();\n    if (posIn != null) {\n      lastPosIndex = posIn.index();\n    } else {\n      lastPosIndex = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepSkipListReader#SepSkipListReader(IndexInput,IntIndexInput,IntIndexInput,IntIndexInput,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepSkipListReader#SepSkipListReader(IndexInput,IntIndexInput,IntIndexInput,IntIndexInput,int,int).mjava","sourceNew":"  SepSkipListReader(IndexInput skipStream,\n                    IntIndexInput freqIn,\n                    IntIndexInput docIn,\n                    IntIndexInput posIn,\n                    int maxSkipLevels,\n                    int skipInterval)\n    throws IOException {\n    super(skipStream, maxSkipLevels, skipInterval);\n    if (freqIn != null) {\n      freqIndex = new IntIndexInput.Index[maxSkipLevels];\n    }\n    docIndex = new IntIndexInput.Index[maxSkipLevels];\n    if (posIn != null) {\n      posIndex = new IntIndexInput.Index[maxNumberOfSkipLevels];\n    }\n    for(int i=0;i<maxSkipLevels;i++) {\n      if (freqIn != null) {\n        freqIndex[i] = freqIn.index();\n      }\n      docIndex[i] = docIn.index();\n      if (posIn != null) {\n        posIndex[i] = posIn.index();\n      }\n    }\n    payloadPointer = new long[maxSkipLevels];\n    payloadLength = new int[maxSkipLevels];\n\n    if (freqIn != null) {\n      lastFreqIndex = freqIn.index();\n    } else {\n      lastFreqIndex = null;\n    }\n    lastDocIndex = docIn.index();\n    if (posIn != null) {\n      lastPosIndex = posIn.index();\n    } else {\n      lastPosIndex = null;\n    }\n  }\n\n","sourceOld":"  SepSkipListReader(IndexInput skipStream,\n                    IntIndexInput freqIn,\n                    IntIndexInput docIn,\n                    IntIndexInput posIn,\n                    int maxSkipLevels,\n                    int skipInterval)\n    throws IOException {\n    super(skipStream, maxSkipLevels, skipInterval);\n    if (freqIn != null) {\n      freqIndex = new IntIndexInput.Index[maxSkipLevels];\n    }\n    docIndex = new IntIndexInput.Index[maxSkipLevels];\n    if (posIn != null) {\n      posIndex = new IntIndexInput.Index[maxNumberOfSkipLevels];\n    }\n    for(int i=0;i<maxSkipLevels;i++) {\n      if (freqIn != null) {\n        freqIndex[i] = freqIn.index();\n      }\n      docIndex[i] = docIn.index();\n      if (posIn != null) {\n        posIndex[i] = posIn.index();\n      }\n    }\n    payloadPointer = new long[maxSkipLevels];\n    payloadLength = new int[maxSkipLevels];\n\n    if (freqIn != null) {\n      lastFreqIndex = freqIn.index();\n    } else {\n      lastFreqIndex = null;\n    }\n    lastDocIndex = docIn.index();\n    if (posIn != null) {\n      lastPosIndex = posIn.index();\n    } else {\n      lastPosIndex = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}