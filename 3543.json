{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (autowarm.isAutoWarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["dd10f25652bcb979f0a522653b94f86ad65f6656"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) throws IOException {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"562af19dd274acc548d4e2390499f42bd53c6c84","date":1398929979,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, V>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K,V> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue();\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n        \n        int sz = autowarm.getWarmCount(other.map.size());\n        \n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#warm(SolrIndexSearcher,SolrCache[K,V]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void warm(SolrIndexSearcher searcher, SolrCache<K,V> old) {\n    if (regenerator==null) return;\n    long warmingStartTime = System.nanoTime();\n    LRUCache<K,V> other = (LRUCache<K,V>)old;\n\n    // warm entries\n    if (isAutowarmingOn()) {\n      Object[] keys,vals = null;\n\n      // Don't do the autowarming in the synchronized block, just pull out the keys and values.\n      synchronized (other.map) {\n\n        int sz = autowarm.getWarmCount(other.map.size());\n\n        keys = new Object[sz];\n        vals = new Object[sz];\n\n        Iterator<Map.Entry<K, CacheValue<V>>> iter = other.map.entrySet().iterator();\n\n        // iteration goes from oldest (least recently used) to most recently used,\n        // so we need to skip over the oldest entries.\n        int skip = other.map.size() - sz;\n        for (int i=0; i<skip; i++) iter.next();\n\n\n        for (int i=0; i<sz; i++) {\n          Map.Entry<K, CacheValue<V>> entry = iter.next();\n          keys[i]=entry.getKey();\n          vals[i]=entry.getValue().value;\n        }\n      }\n\n      // autowarm from the oldest to the newest entries so that the ordering will be\n      // correct in the new cache.\n      for (int i=0; i<keys.length; i++) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher, this, old, keys[i], vals[i]);\n          if (!continueRegen) break;\n        }\n        catch (Exception e) {\n          SolrException.log(log,\"Error during auto-warming of key:\" + keys[i], e);\n        }\n      }\n    }\n\n    warmupTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - warmingStartTime, TimeUnit.NANOSECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a117d95183986014a31f25bb04e5464ca06d6068"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"562af19dd274acc548d4e2390499f42bd53c6c84":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"a117d95183986014a31f25bb04e5464ca06d6068":["562af19dd274acc548d4e2390499f42bd53c6c84"],"63131741120598595ba46620adaf3fad049ca291":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["63131741120598595ba46620adaf3fad049ca291","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["63131741120598595ba46620adaf3fad049ca291"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["4d7d3943904804560937e6239effeebda0f920e4"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c26f00b574427b55127e869b935845554afde1fa":["63131741120598595ba46620adaf3fad049ca291"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"562af19dd274acc548d4e2390499f42bd53c6c84":["a117d95183986014a31f25bb04e5464ca06d6068"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"a117d95183986014a31f25bb04e5464ca06d6068":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"63131741120598595ba46620adaf3fad049ca291":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["562af19dd274acc548d4e2390499f42bd53c6c84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}