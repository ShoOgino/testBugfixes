{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","commits":[{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74a3f9de17560c487922d75ddf229c09900058e","date":1462406562,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getCollectionsMap().mjava","sourceNew":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Get a map of collection name vs DocCollection objects\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   *\n   * @return a map of collection name vs DocCollection object\n   */\n  public Map<String, DocCollection> getCollectionsMap()  {\n    Map<String, DocCollection> result = new HashMap<>(collectionStates.size());\n    for (Entry<String, CollectionRef> entry : collectionStates.entrySet()) {\n      DocCollection collection = entry.getValue().get();\n      if (collection != null) {\n        result.put(entry.getKey(), collection);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["73450c0955930295d34703e7ddbfc6973b7a121a","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a74a3f9de17560c487922d75ddf229c09900058e":["e9974f61802aea1d15849a1053f88f5e89fc32b4"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a74a3f9de17560c487922d75ddf229c09900058e"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73450c0955930295d34703e7ddbfc6973b7a121a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"a74a3f9de17560c487922d75ddf229c09900058e":["73450c0955930295d34703e7ddbfc6973b7a121a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["d3aa683bba99315838c968fefedf3d74f44aa993","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","6681d02f2302c363be938426e68f8dfd090cc1bf"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["a74a3f9de17560c487922d75ddf229c09900058e"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}