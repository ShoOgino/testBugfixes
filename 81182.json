{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"/dev/null","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testMaxBufferedDocsChange().mjava","sourceNew":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where both mergeFactor and maxBufferedDocs change\n  public void testMaxBufferedDocsChange() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    writer.setMaxBufferedDocs(101);\n    writer.setMergeFactor(101);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    // leftmost* segment has 1 doc\n    // rightmost* segment has 100 docs\n    for (int i = 1; i <= 100; i++) {\n      for (int j = 0; j < i; j++) {\n        addDoc(writer);\n        checkInvariants(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(101);\n      writer.setMergeFactor(101);\n      writer.setMergePolicy(new LogDocMergePolicy(writer));\n    }\n\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    // merge policy only fixes segments on levels where merges\n    // have been triggered, so check invariants after all adds\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n    checkInvariants(writer);\n\n    for (int i = 100; i < 1000; i++) {\n      addDoc(writer);\n    }\n    writer.commit();\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n    writer.commit();\n    checkInvariants(writer);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}