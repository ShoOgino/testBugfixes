{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/ext/Extensions#escapeExtensionField(String).mjava","sourceNew":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParser.escape(extfield);\n  }\n\n","sourceOld":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParser.escape(extfield);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","sourceNew":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParserBase.escape(extfield);\n  }\n\n","sourceOld":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParser.escape(extfield);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","sourceNew":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParserBase.escape(extfield);\n  }\n\n","sourceOld":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParser.escape(extfield);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#escapeExtensionField(String).mjava","sourceNew":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParserBase.escape(extfield);\n  }\n\n","sourceOld":"  /**\n   * Escapes an extension field. The default implementation is equivalent to\n   * {@link QueryParser#escape(String)}.\n   * \n   * @param extfield\n   *          the extension field identifier\n   * @return the extension field identifier with all special chars escaped with\n   *         a backslash character.\n   */\n  public String escapeExtensionField(String extfield) {\n    return QueryParserBase.escape(extfield);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a53a291ad9b1cc050d846b68758c061a55d52734","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}