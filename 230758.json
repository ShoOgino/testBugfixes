{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        //\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        synchronized (StorageCoreController.class) {\n         \n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n          \n            if (this.storageDir == null) {\n\n                \n                File storeDir = new File(this.storageDirectory);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + this.storageDirectory);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw new StorageException(e);\n                }\n                \n                this.storageBufferSize = this.storageBufferSize < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.storageBufferSize;\n                this.storagePersistFactor = this.storagePersistFactor < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.storagePersistFactor;\n\n            }else\n                createNewStorage = true;\n               \n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            try{\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n            }catch (Exception e) {\n               throw new StorageException(\"Can not create Searcher/Modifier -- \"+e.getMessage(),e);\n            }\n           \n            \n            if(createNewStorage)\n                createAdminAccount();\n            if(!this.recover)\n                return;\n            try{\n            tryRecover();\n            }catch (Exception e) {\n                LOG.fatal(\"Recovering failed\",e);\n                throw new StorageException(\"Recovering failed -- \"+e.getMessage(),e); \n            }\n            \n            this.recoverController = createRecoverController(false,false);\n            try{\n            this.recoverController.initialize();\n            }catch (Exception e) {\n                LOG.fatal(\"Can not initialize recover controller\",e);\n                throw new StorageException(\"Can not initialize recover controller -- \"+e.getMessage(),e);\n            }\n\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        //\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageCoreController#initialize().mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        synchronized (StorageCoreController.class) {\n         \n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n          \n            if (this.storageDir == null) {\n\n                \n                File storeDir = new File(this.storageDirectory);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + this.storageDirectory);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw new StorageException(e);\n                }\n                \n                this.storageBufferSize = this.storageBufferSize < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.storageBufferSize;\n                this.storagePersistFactor = this.storagePersistFactor < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.storagePersistFactor;\n\n            }else\n                createNewStorage = true;\n               \n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            try{\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n            }catch (Exception e) {\n               throw new StorageException(\"Can not create Searcher/Modifier -- \"+e.getMessage(),e);\n            }\n           \n            \n            if(createNewStorage)\n                createAdminAccount();\n            if(!this.recover)\n                return;\n            try{\n            tryRecover();\n            }catch (Exception e) {\n                LOG.fatal(\"Recovering failed\",e);\n                throw new StorageException(\"Recovering failed -- \"+e.getMessage(),e); \n            }\n            \n            this.recoverController = createRecoverController(false,false);\n            try{\n            this.recoverController.initialize();\n            }catch (Exception e) {\n                LOG.fatal(\"Can not initialize recover controller\",e);\n                throw new StorageException(\"Can not initialize recover controller -- \"+e.getMessage(),e);\n            }\n\n        }\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.server.registry.ServerComponent#initialize()\n     */\n    public void initialize() {\n        synchronized (StorageCoreController.class) {\n         \n            try {\n                this.idGenerator = new IDGenerator(10);\n            } catch (Exception e) {\n                throw new StorageException(\"Can't create ID Generator\", e);\n            }\n\n            boolean createNewStorage = false;\n          \n            if (this.storageDir == null) {\n\n                \n                File storeDir = new File(this.storageDirectory);\n                File storageLog = new File(storeDir.getAbsolutePath()\n                        + System.getProperty(\"file.separator\") + STORAGELOG);\n                try {\n                    if (storeDir.isDirectory() && !storageLog.exists()) {\n\n                        if (createLuceneStorageLog(storeDir)) {\n                            this.storageDir = FSDirectory.getDirectory(\n                                    storeDir, true);\n                            createNewStorage = true;\n                        } else\n                            throw new StorageException(\n                                    \"could not create storage lock file in \"\n                                            + this.storageDirectory);\n\n                    } else\n                        this.storageDir = FSDirectory.getDirectory(storeDir,\n                                false);\n                } catch (IOException e) {\n                    storageLog.delete();\n                    throw new StorageException(e);\n                }\n                \n                this.storageBufferSize = this.storageBufferSize < DEFAULT_STORAGE_BUFFER_SIZE ? DEFAULT_STORAGE_BUFFER_SIZE\n                        : this.storageBufferSize;\n                this.storagePersistFactor = this.storagePersistFactor < DEFAULT_STORAGE_PERSIST_FACTOR ? DEFAULT_STORAGE_PERSIST_FACTOR\n                        : this.storagePersistFactor;\n\n            }else\n                createNewStorage = true;\n               \n\n            this.currentBuffer = new StorageBuffer(this.storageBufferSize);\n            try{\n            this.modifier = createStorageModifier(createNewStorage);\n            this.searcher = new IndexSearcher(this.storageDir);\n            }catch (Exception e) {\n               throw new StorageException(\"Can not create Searcher/Modifier -- \"+e.getMessage(),e);\n            }\n           \n            \n            if(createNewStorage)\n                createAdminAccount();\n            if(!this.recover)\n                return;\n            try{\n            tryRecover();\n            }catch (Exception e) {\n                LOG.fatal(\"Recovering failed\",e);\n                throw new StorageException(\"Recovering failed -- \"+e.getMessage(),e); \n            }\n            \n            this.recoverController = createRecoverController(false,false);\n            try{\n            this.recoverController.initialize();\n            }catch (Exception e) {\n                LOG.fatal(\"Can not initialize recover controller\",e);\n                throw new StorageException(\"Can not initialize recover controller -- \"+e.getMessage(),e);\n            }\n\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}