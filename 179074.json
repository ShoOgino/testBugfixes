{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrInputDocument(SolrDocument,IndexSchema).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrInputDocument(SolrDocument,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrInputDocument toSolrInputDocument(SolrDocument doc, IndexSchema schema) {\n    SolrInputDocument out = new SolrInputDocument();\n    for( String fname : doc.getFieldNames() ) {\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null) {\n        if ((!sf.hasDocValues() && !sf.stored()) || schema.isCopyFieldTarget(sf)) continue;\n      }\n      for (Object val: doc.getFieldValues(fname)) {\n        if (val instanceof Field) {\n          Field f = (Field) val;\n          if (sf != null) {\n            val = sf.getType().toObject(f);   // object or external string?\n          } else {\n            val = f.stringValue();\n            if (val == null) val = f.numericValue();\n            if (val == null) val = f.binaryValue();\n            if (val == null) val = f;\n          }\n        }\n        out.addField(fname, val);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrInputDocument(SolrDocument,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrInputDocument toSolrInputDocument(SolrDocument doc, IndexSchema schema) {\n    SolrInputDocument out = new SolrInputDocument();\n    for( String fname : doc.getFieldNames() ) {\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null) {\n        if ((!sf.hasDocValues() && !sf.stored()) || schema.isCopyFieldTarget(sf)) continue;\n      }\n      for (Object val: doc.getFieldValues(fname)) {\n        if (val instanceof Field) {\n          Field f = (Field) val;\n          if (sf != null) {\n            val = sf.getType().toObject(f);   // object or external string?\n          } else {\n            val = f.stringValue();\n            if (val == null) val = f.numericValue();\n            if (val == null) val = f.binaryValue();\n            if (val == null) val = f;\n          }\n        }\n        out.addField(fname, val);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrInputDocument(SolrDocument,IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrInputDocument(SolrDocument,IndexSchema).mjava","sourceNew":"  private static SolrInputDocument toSolrInputDocument(SolrDocument doc, IndexSchema schema) {\n    SolrInputDocument out = new SolrInputDocument();\n    for( String fname : doc.getFieldNames() ) {\n      boolean fieldArrayListCreated = false;\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null) {\n        if ((!sf.hasDocValues() && !sf.stored()) || schema.isCopyFieldTarget(sf)) continue;\n      }\n      for (Object val: doc.getFieldValues(fname)) {\n        if (val instanceof Field) {\n          Field f = (Field) val;\n          if (sf != null) {\n            val = sf.getType().toObject(f);   // object or external string?\n          } else {\n            val = f.stringValue();\n            if (val == null) val = f.numericValue();\n            if (val == null) val = f.binaryValue();\n            if (val == null) val = f;\n          }\n        } else if(val instanceof SolrDocument) {\n          val = toSolrInputDocument((SolrDocument) val, schema);\n          if(!fieldArrayListCreated && doc.getFieldValue(fname) instanceof Collection) {\n            // previous value was array so we must return as an array even if was a single value array\n            out.setField(fname, Lists.newArrayList(val));\n            fieldArrayListCreated = true;\n            continue;\n          }\n        }\n        out.addField(fname, val);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  private static SolrInputDocument toSolrInputDocument(SolrDocument doc, IndexSchema schema) {\n    SolrInputDocument out = new SolrInputDocument();\n    for( String fname : doc.getFieldNames() ) {\n      SchemaField sf = schema.getFieldOrNull(fname);\n      if (sf != null) {\n        if ((!sf.hasDocValues() && !sf.stored()) || schema.isCopyFieldTarget(sf)) continue;\n      }\n      for (Object val: doc.getFieldValues(fname)) {\n        if (val instanceof Field) {\n          Field f = (Field) val;\n          if (sf != null) {\n            val = sf.getType().toObject(f);   // object or external string?\n          } else {\n            val = f.stringValue();\n            if (val == null) val = f.numericValue();\n            if (val == null) val = f.binaryValue();\n            if (val == null) val = f;\n          }\n        }\n        out.addField(fname, val);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07749612bed4eb54dd05255c1434c301133310c1":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","07749612bed4eb54dd05255c1434c301133310c1"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}