{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", collectionName,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting to see 2 replicas for collection: \" + collectionName,\n        collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aee7536c0dab5f97165523b2077d324095f5518","date":1544481552,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":"  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudUtil.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudTestUtils.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddReplica().mjava","sourceNew":null,"sourceOld":"  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testCreateCollectionAddReplica() throws Exception  {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode();\n\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:0 , shard:'#EACH', port: '!\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n\n    String collectionName = \"testCreateCollectionAddReplica\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, collectionName, 120, TimeUnit.SECONDS,\n        CloudUtil.clusterShape(1, 1, false, true));\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\").process(solrClient);\n    CloudUtil.waitForState(cluster,\n        collectionName, 120l, TimeUnit.SECONDS,\n        (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);\n\n    getCollectionState(collectionName).forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aee7536c0dab5f97165523b2077d324095f5518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["1aee7536c0dab5f97165523b2077d324095f5518"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"1aee7536c0dab5f97165523b2077d324095f5518":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1aee7536c0dab5f97165523b2077d324095f5518"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}