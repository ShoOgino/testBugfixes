{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","commits":[{"id":"50599bdf4e0c26952f76b740a4280d058cab3539","date":1355180801,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(FieldInfo,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(FieldInfo fi, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fi, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fi.name + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e13bf6998389e201ae22c6e84079b9d6b5da0af","date":1358809420,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10e89cbe24422ef92a37fc037a955728de2e12cf","date":1359053475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      // nocommit: looks like maybe a bug in 4.0 indexes? dig on this (and think if we can correct it somehow...)\n      // throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ef514ff4e66c8f03df0d725849877ace5c16da0a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e93b477a465bb7b012eb16214d6fe0214003e3ab","date":1359058944,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      // nocommit: looks like maybe a bug in 4.0 indexes? dig on this (and think if we can correct it somehow...)\n      // throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      checkBounds(scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      // nocommit: looks like maybe a bug in 4.0 indexes? dig on this (and think if we can correct it somehow...)\n      // throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef514ff4e66c8f03df0d725849877ace5c16da0a","date":1359061656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      checkBounds(scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      // nocommit: looks like maybe a bug in 4.0 indexes? dig on this (and think if we can correct it somehow...)\n      // throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      checkBounds(scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d00acb12c9809438e21de7c24f016356973d46","date":1359349254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      checkBounds(scratch);\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv, Bits docsWithField) {\n    checkBinaryDocValues(fieldName, reader, dv, docsWithField);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord == -1) {\n        if (docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has -1 ord but is not marked missing for doc: \" + i);\n        }\n      } else if (ord < -1 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      } else {\n        if (!docsWithField.get(i)) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is missing but has ord=\" + ord + \" for doc: \" + i);\n        }\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedDocValues(String,AtomicReader,SortedDocValues).mjava","sourceNew":null,"sourceOld":"  private static void checkSortedDocValues(String fieldName, AtomicReader reader, SortedDocValues dv) {\n    checkBinaryDocValues(fieldName, reader, dv);\n    final int maxOrd = dv.getValueCount()-1;\n    FixedBitSet seenOrds = new FixedBitSet(dv.getValueCount());\n    int maxOrd2 = -1;\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      int ord = dv.getOrd(i);\n      if (ord < 0 || ord > maxOrd) {\n        throw new RuntimeException(\"ord out of bounds: \" + ord);\n      }\n      maxOrd2 = Math.max(maxOrd2, ord);\n      seenOrds.set(ord);\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    BytesRef lastValue = null;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i <= maxOrd; i++) {\n      dv.lookupOrd(i, scratch);\n      assert scratch.isValid();\n      if (lastValue != null) {\n        if (scratch.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + scratch);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(scratch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d00acb12c9809438e21de7c24f016356973d46":["ef514ff4e66c8f03df0d725849877ace5c16da0a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59d00acb12c9809438e21de7c24f016356973d46"],"50599bdf4e0c26952f76b740a4280d058cab3539":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["50599bdf4e0c26952f76b740a4280d058cab3539"],"ef514ff4e66c8f03df0d725849877ace5c16da0a":["e93b477a465bb7b012eb16214d6fe0214003e3ab"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"]},"commit2Childs":{"59d00acb12c9809438e21de7c24f016356973d46":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"50599bdf4e0c26952f76b740a4280d058cab3539":["1e13bf6998389e201ae22c6e84079b9d6b5da0af"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","50599bdf4e0c26952f76b740a4280d058cab3539"],"e93b477a465bb7b012eb16214d6fe0214003e3ab":["ef514ff4e66c8f03df0d725849877ace5c16da0a"],"1e13bf6998389e201ae22c6e84079b9d6b5da0af":["10e89cbe24422ef92a37fc037a955728de2e12cf"],"ef514ff4e66c8f03df0d725849877ace5c16da0a":["59d00acb12c9809438e21de7c24f016356973d46"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10e89cbe24422ef92a37fc037a955728de2e12cf":["e93b477a465bb7b012eb16214d6fe0214003e3ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}