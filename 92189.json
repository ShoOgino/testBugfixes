{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6ef1ac57615594df99b4d227449fa09de6c255f","date":1331046752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    LogMergePolicy mp = newLogMergePolicy();\n    // turn off compound file, this test will open some index files directly.\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    LogMergePolicy mp = newLogMergePolicy();\n    // turn off compound file, this test will open some index files directly.\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random(), 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    LogMergePolicy mp = newLogMergePolicy();\n    // turn off compound file, this test will open some index files directly.\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random()));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random())), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random, 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    LogMergePolicy mp = newLogMergePolicy();\n    // turn off compound file, this test will open some index files directly.\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random)), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#beforeClass().mjava","sourceNew":null,"sourceOld":"  /** we will manually instantiate preflex-rw here */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE = true;\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    \n    termIndexInterval = config.getTermIndexInterval();\n    indexDivisor = _TestUtil.nextInt(random(), 1, 10);\n    NUMBER_OF_DOCUMENTS = atLeast(100);\n    NUMBER_OF_FIELDS = atLeast(Math.max(10, 3*termIndexInterval*indexDivisor/NUMBER_OF_DOCUMENTS));\n    \n    directory = newDirectory();\n\n    config.setCodec(new PreFlexRWCodec());\n    LogMergePolicy mp = newLogMergePolicy();\n    // turn off compound file, this test will open some index files directly.\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    \n    populate(directory, config);\n\n    DirectoryReader r0 = IndexReader.open(directory);\n    SegmentReader r = LuceneTestCase.getOnlySegmentReader(r0);\n    String segment = r.getSegmentName();\n    r.close();\n\n    FieldInfosReader infosReader = new PreFlexRWCodec().fieldInfosFormat().getFieldInfosReader();\n    FieldInfos fieldInfos = infosReader.read(directory, segment, IOContext.READONCE);\n    String segmentFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n    long tiiFileLength = directory.fileLength(segmentFileName);\n    IndexInput input = directory.openInput(segmentFileName, newIOContext(random()));\n    termEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION), newIOContext(random())), fieldInfos, false);\n    int totalIndexInterval = termEnum.indexInterval * indexDivisor;\n    \n    SegmentTermEnum indexEnum = new SegmentTermEnum(input, fieldInfos, true);\n    index = new TermInfosReaderIndex(indexEnum, indexDivisor, tiiFileLength, totalIndexInterval);\n    indexEnum.close();\n    input.close();\n    \n    reader = IndexReader.open(directory);\n    sampleTerms = sample(reader,1000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b6ef1ac57615594df99b4d227449fa09de6c255f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"b6ef1ac57615594df99b4d227449fa09de6c255f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b6ef1ac57615594df99b4d227449fa09de6c255f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"b6ef1ac57615594df99b4d227449fa09de6c255f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}