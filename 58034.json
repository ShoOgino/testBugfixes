{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","commits":[{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testSelectedCollections().mjava","sourceNew":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  @Test\n  //2018-06-18 (commented) @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testSelectedCollections() throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : 'testSelected1,testSelected2'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","sourceNew":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","sourceNew":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<Replica>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","sourceOld":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<ReplicaInfo>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testCollectionsPredicate(String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {\n    if (log.isInfoEnabled()) {\n      log.info(\"Found number of jetties: {}\", cluster.getJettySolrRunners().size());\n    }\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n            \"'set-trigger' : {\" +\n            \"'name' : 'node_lost_trigger',\" +\n            \"'event' : 'nodeLost',\" +\n            \"'waitFor' : '1s',\" +\n            \"'enabled' : true,\" +\n            \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : \" + collectionsFilter + \"},\" +\n            \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n            \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testSelected1\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected1\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected1\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected2\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected2\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected2\"));\n    }\n    create.process(solrClient);\n\n    create = CollectionAdminRequest.createCollection(\"testSelected3\",\n        \"conf\", 2, 2);\n    if (createCollectionParameters.get(\"testSelected3\") != null)  {\n      create.setPolicy(createCollectionParameters.get(\"testSelected3\"));\n    }\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testSelected1\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected2\", 2, 4);\n    cluster.waitForActiveCollection(\"testSelected3\", 2, 4);\n    \n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected1\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected2\", clusterShape(2, 4));\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testSelected3\", clusterShape(2, 4));\n\n    // find a node that has replicas from all collections\n    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();\n    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();\n    List<String> nodes = new ArrayList<>();\n    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {\n      Map<String, Map<String, List<Replica>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);\n      if (map.containsKey(\"testSelected3\") && map.containsKey(\"testSelected2\") && map.containsKey(\"testSelected1\")) {\n        nodes.add(n);\n      }\n    });\n    assertTrue(nodes.size() > 0);\n    // kill first such node\n    String node = nodes.get(0);\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null. \" + getNodeStateProviderState() + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operations\", 2, operations.size());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n    request = operations.get(1);\n    params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    assertFalse(\"not expected testSelected3\", \"testSelected3\".equals(params.get(\"collection\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}