{"path":"lucene/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer#reusableTokenStream(String,Reader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {\n    if (overridesTokenStreamMethod) {\n      // LUCENE-1678: force fallback to tokenStream() if we\n      // have been subclassed and that subclass overrides\n      // tokenStream but not reusableTokenStream\n      return tokenStream(fieldName, reader);\n    }\n    SavedStreams streams = (SavedStreams) getPreviousTokenStream();\n    if (streams == null) {\n      streams = new SavedStreams();\n      setPreviousTokenStream(streams);\n      streams.tokenStream = new StandardTokenizer(matchVersion, reader);\n      streams.filteredTokenStream = new StandardFilter(streams.tokenStream);\n      streams.filteredTokenStream = new LowerCaseFilter(matchVersion,\n          streams.filteredTokenStream);\n      streams.filteredTokenStream = new StopFilter(matchVersion, streams.filteredTokenStream, stopSet);\n    } else {\n      streams.tokenStream.reset(reader);\n    }\n    streams.tokenStream.setMaxTokenLength(maxTokenLength);\n    \n    streams.tokenStream.setReplaceInvalidAcronym(replaceInvalidAcronym);\n\n    return streams.filteredTokenStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a775c547c3519b47efd41c09cb47100ddb9604c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}