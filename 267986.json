{"path":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#encodeLat(double).mjava","commits":[{"id":"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96","date":1433340999,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#encodeLat(double).mjava","pathOld":"/dev/null","sourceNew":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  static int encodeLat(double lat) {\n    assert validLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    // We use Integer.MAX_VALUE as a sentinel:\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#encodeLat(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter#encodeLat(double).mjava","sourceNew":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  public static int encodeLat(double lat) {\n    assert GeoUtils.isValidLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","sourceOld":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  static int encodeLat(double lat) {\n    assert validLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    // We use Integer.MAX_VALUE as a sentinel:\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e50a8c6cf9370a926c7efe6aa39429e6a18cf96"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e50a8c6cf9370a926c7efe6aa39429e6a18cf96":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}