{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","commits":[{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = new BytesRef();\n                binaries.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                sorted.get(j, scratch);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                assertEquals(j, binaries.nextDoc());\n                BytesRef scratch = binaries.binaryValue();\n                assertEquals(binaryValue, scratch);\n                assertEquals(j, sorted.nextDoc());\n                scratch = sorted.binaryValue();\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(j, numerics.nextDoc());\n                assertEquals(Long.parseLong(expected), numerics.longValue());\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                assertEquals(j, binaries.nextDoc());\n                BytesRef scratch = binaries.binaryValue();\n                assertEquals(binaryValue, scratch);\n                assertEquals(j, sorted.nextDoc());\n                scratch = sorted.binaryValue();\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(j, numerics.nextDoc());\n                assertEquals(Long.parseLong(expected), numerics.longValue());\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads().mjava","sourceNew":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                assertEquals(j, binaries.nextDoc());\n                BytesRef scratch = binaries.binaryValue();\n                assertEquals(binaryValue, scratch);\n                assertEquals(j, sorted.nextDoc());\n                scratch = sorted.binaryValue();\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(j, numerics.nextDoc());\n                assertEquals(Long.parseLong(expected), numerics.longValue());\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (binary/numeric/sorted, no missing) */\n  public void testThreads() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Document doc = new Document();\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    doc.add(idField);\n    doc.add(storedBinField);\n    doc.add(dvBinField);\n    doc.add(dvSortedField);\n    doc.add(storedNumericField);\n    doc.add(dvNumericField);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                BytesRef scratch = binaries.get(j);\n                assertEquals(binaryValue, scratch);\n                scratch = sorted.get(j);\n                assertEquals(binaryValue, scratch);\n                String expected = r.document(j).get(\"storedNum\");\n                assertEquals(Long.parseLong(expected), numerics.get(j));\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12774649e77a6efccc3502c735c2893b52af6d6"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d12774649e77a6efccc3502c735c2893b52af6d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["6613659748fe4411a7dcf85266e55db1f95f7315","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d12774649e77a6efccc3502c735c2893b52af6d6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d12774649e77a6efccc3502c735c2893b52af6d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}