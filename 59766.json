{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<Automaton>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<Automaton>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<Automaton>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton,int).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) {\n      return repeat(a);\n    }\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0) {\n      as.add(a);\n    }\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts <code>min</code> or more concatenated\n   * repetitions of the language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states and in <code>min</code>.\n   */\n  static public Automaton repeat(Automaton a, int min) {\n    if (min == 0) return repeat(a);\n    List<Automaton> as = new ArrayList<>();\n    while (min-- > 0)\n      as.add(a);\n    as.add(repeat(a));\n    return concatenate(as);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}