{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(IndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static CompositeIndexReader openIfChanged(CompositeIndexReader oldReader) throws IOException {\n    final CompositeIndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static IndexReader openIfChanged(IndexReader oldReader) throws IOException {\n    final IndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#openIfChanged(DirectoryReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#openIfChanged(CompositeIndexReader).mjava","sourceNew":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static DirectoryReader openIfChanged(DirectoryReader oldReader) throws IOException {\n    final DirectoryReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","sourceOld":"  /**\n   * If the index has changed since the provided reader was\n   * opened, open and return a new reader; else, return\n   * null.  The new reader, if not null, will be the same\n   * type of reader as the previous one, ie an NRT reader\n   * will open a new NRT reader, a MultiReader will open a\n   * new MultiReader,  etc.\n   *\n   * <p>This method is typically far less costly than opening a\n   * fully new <code>IndexReader</code> as it shares\n   * resources (for example sub-readers) with the provided\n   * <code>IndexReader</code>, when possible.\n   *\n   * <p>The provided reader is not closed (you are responsible\n   * for doing so); if a new reader is returned you also\n   * must eventually close it.  Be sure to never close a\n   * reader while other threads are still using it; see\n   * {@link SearcherManager} to simplify managing this.\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * IndexReader instance which you must eventually close\n   */  \n  public static CompositeIndexReader openIfChanged(CompositeIndexReader oldReader) throws IOException {\n    final CompositeIndexReader newReader = oldReader.doOpenIfChanged();\n    assert newReader != oldReader;\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"893d07555f01912f57b453a320e4d46363a31b50":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["893d07555f01912f57b453a320e4d46363a31b50","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}