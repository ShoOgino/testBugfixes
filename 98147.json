{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","pathOld":"/dev/null","sourceNew":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n\n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey();\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) return false;\n\n      String repCore = null;\n      String zkCore = null;\n\n      if (data == null) {\n        return false;\n      } else {\n        Map m = (Map) ZkStateReader.fromJSON(data);\n        zkCore = (String) m.get(\"core\");\n        repCore = ent.getValue().getStr(\"core\");\n        if (zkCore.equals(repCore) == false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","sourceNew":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n\n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey();\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) return false;\n\n      String repCore = null;\n      String zkCore = null;\n\n      if (data == null) {\n        return false;\n      } else {\n        Map m = (Map) Utils.fromJSON(data);\n        zkCore = (String) m.get(\"core\");\n        repCore = ent.getValue().getStr(\"core\");\n        if (zkCore.equals(repCore) == false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n\n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey();\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) return false;\n\n      String repCore = null;\n      String zkCore = null;\n\n      if (data == null) {\n        return false;\n      } else {\n        Map m = (Map) ZkStateReader.fromJSON(data);\n        zkCore = (String) m.get(\"core\");\n        repCore = ent.getValue().getStr(\"core\");\n        if (zkCore.equals(repCore) == false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","sourceNew":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String,Replica> ent : expected.entrySet()) {\n      \n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey() + \"/leader\";\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) {\n        log.warn(\"path to check not found {}\", path);\n        return false;\n      }\n      \n      String repCore = null;\n      String zkCore = null;\n      \n      Map m = (Map) Utils.fromJSON(data);\n      zkCore = (String) m.get(\"core\");\n      repCore = ent.getValue().getStr(\"core\");\n      if (zkCore.equals(repCore) == false) {\n        log.warn(\"leader in zk does not match what we expect: {} != {}\", zkCore, repCore);\n        return false;\n      }\n      \n    }\n    return true;\n  }\n\n","sourceOld":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String, Replica> ent : expected.entrySet()) {\n\n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey();\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) return false;\n\n      String repCore = null;\n      String zkCore = null;\n\n      if (data == null) {\n        return false;\n      } else {\n        Map m = (Map) Utils.fromJSON(data);\n        zkCore = (String) m.get(\"core\");\n        repCore = ent.getValue().getStr(\"core\");\n        if (zkCore.equals(repCore) == false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n","bugFix":["b693a83132c9e45afcd564fd65a25b60ed80388b","4e6b620c271c84c0f14919eec7b90083b292ee51"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","sourceNew":null,"sourceOld":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String,Replica> ent : expected.entrySet()) {\n      \n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey() + \"/leader\";\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) {\n        log.warn(\"path to check not found {}\", path);\n        return false;\n      }\n      \n      String repCore = null;\n      String zkCore = null;\n      \n      Map m = (Map) Utils.fromJSON(data);\n      zkCore = (String) m.get(\"core\");\n      repCore = ent.getValue().getStr(\"core\");\n      if (zkCore.equals(repCore) == false) {\n        log.warn(\"leader in zk does not match what we expect: {} != {}\", zkCore, repCore);\n        return false;\n      }\n      \n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#checkZkLeadersAgree().mjava","sourceNew":null,"sourceOld":"  // Do who we _think_ should be the leader agree with the leader nodes?\n  Boolean checkZkLeadersAgree() throws KeeperException, InterruptedException {\n    for (Map.Entry<String,Replica> ent : expected.entrySet()) {\n      \n      String path = \"/collections/\" + COLLECTION_NAME + \"/leaders/\" + ent.getKey() + \"/leader\";\n      byte[] data = getZkData(cloudClient, path);\n      if (data == null) {\n        log.warn(\"path to check not found {}\", path);\n        return false;\n      }\n      \n      String repCore = null;\n      String zkCore = null;\n      \n      Map m = (Map) Utils.fromJSON(data);\n      zkCore = (String) m.get(\"core\");\n      repCore = ent.getValue().getStr(\"core\");\n      if (zkCore.equals(repCore) == false) {\n        log.warn(\"leader in zk does not match what we expect: {} != {}\", zkCore, repCore);\n        return false;\n      }\n      \n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}