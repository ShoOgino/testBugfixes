{"path":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\r\n  public void testBasic() throws IOException {\r\n\r\n    ZkNodeProps props = new ZkNodeProps();\r\n    props.put(\"prop1\", \"value1\");\r\n    props.put(\"prop2\", \"value2\");\r\n    props.put(\"prop3\", \"value3\");\r\n    props.put(\"prop4\", \"value4\");\r\n    props.put(\"prop5\", \"value5\");\r\n    props.put(\"prop6\", \"value6\");\r\n    byte[] bytes = props.store();\r\n    \r\n    ZkNodeProps props2 = new ZkNodeProps();\r\n    props2.load(bytes);\r\n    assertEquals(\"value1\", props2.get(\"prop1\"));\r\n    assertEquals(\"value2\", props2.get(\"prop2\"));\r\n    assertEquals(\"value3\", props2.get(\"prop3\"));\r\n    assertEquals(\"value4\", props2.get(\"prop4\"));\r\n    assertEquals(\"value5\", props2.get(\"prop5\"));\r\n    assertEquals(\"value6\", props2.get(\"prop6\"));\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkNodePropsTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws IOException {\n\n    ZkNodeProps props = new ZkNodeProps();\n    props.put(\"prop1\", \"value1\");\n    props.put(\"prop2\", \"value2\");\n    props.put(\"prop3\", \"value3\");\n    props.put(\"prop4\", \"value4\");\n    props.put(\"prop5\", \"value5\");\n    props.put(\"prop6\", \"value6\");\n    byte[] bytes = props.store();\n    \n    ZkNodeProps props2 = new ZkNodeProps();\n    props2.load(bytes);\n    assertEquals(\"value1\", props2.get(\"prop1\"));\n    assertEquals(\"value2\", props2.get(\"prop2\"));\n    assertEquals(\"value3\", props2.get(\"prop3\"));\n    assertEquals(\"value4\", props2.get(\"prop4\"));\n    assertEquals(\"value5\", props2.get(\"prop5\"));\n    assertEquals(\"value6\", props2.get(\"prop6\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c26f00b574427b55127e869b935845554afde1fa":["bed62fe6383040eaff2ec720cdc55bb1462c61da","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}