{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","commits":[{"id":"6e2944372726ed00fc05229687367002194c6c81","date":1300969333,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/ContentSource#getInputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  protected InputStream getInputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    \n    String fileName = file.getName();\n    int idx = fileName.lastIndexOf('.');\n    String type = null;\n    if (idx != -1) {\n      type = extensionToType.get(fileName.substring(idx).toLowerCase(Locale.ENGLISH));\n    }\n    \n    if (type!=null) { // bzip or gzip\n    \ttry {\n    \t\treturn closableCompressorInputStream(type,is);\n    \t} catch (CompressorException e) {\n    \t\tIOException ioe = new IOException(e.getMessage());\n    \t\tioe.initCause(e);\n    \t\tthrow ioe;\n    \t}\n    } \n    \n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils#inputStream(File).mjava","sourceNew":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","sourceOld":"  /**\n   * Returns an {@link InputStream} over the requested file. This method\n   * attempts to identify the appropriate {@link InputStream} instance to return\n   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a\n   * 'bzip' {@link InputStream}).\n   */\n  public static InputStream inputStream(File file) throws IOException {\n    // First, create a FileInputStream, as this will be required by all types.\n    // Wrap with BufferedInputStream for better performance\n    InputStream in = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);\n    return fileType(file).inputStream(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6e2944372726ed00fc05229687367002194c6c81"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e2944372726ed00fc05229687367002194c6c81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6e2944372726ed00fc05229687367002194c6c81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","6e2944372726ed00fc05229687367002194c6c81"],"6e2944372726ed00fc05229687367002194c6c81":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}