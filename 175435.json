{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","commits":[{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we rollback writer we can easily try to write to the same filenames:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w, true);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we rollback writer we can easily try to write to the same filenames:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we rollback writer we can easily try to write to the same filenames:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w, true);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we rollback writer we can easily try to write to the same filenames:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we rollback writer we can easily try to write to the same filenames:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.getDocStats().numDocs);\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.getDocStats().numDocs);\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Directory dir = newDirectory();\n\n    int numOps = atLeast(100);\n\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n\n    // We must have a starting commit for this test because whenever we rollback with\n    // an NRT reader, the commit before that NRT reader must exist\n    w.commit();\n\n    DirectoryReader r = DirectoryReader.open(w);\n    int nrtReaderNumDocs = 0;\n    int writerNumDocs = 0;\n\n    boolean commitAfterNRT = false;\n\n    Set<Integer> liveIDs = new HashSet<>();\n    Set<Integer> nrtLiveIDs = new HashSet<>();\n\n    for(int op=0;op<numOps;op++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nITER op=\" + op + \" nrtReaderNumDocs=\" + nrtReaderNumDocs + \" writerNumDocs=\" + writerNumDocs + \" r=\" + r + \" r.numDocs()=\" + r.numDocs());\n      }\n\n      assertEquals(nrtReaderNumDocs, r.numDocs());\n      int x = random().nextInt(5);\n\n      switch(x) {\n\n      case 0:\n        if (VERBOSE) {\n          System.out.println(\"  add doc id=\" + op);\n        }\n        // add doc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+op, Field.Store.NO));\n        w.addDocument(doc);\n        liveIDs.add(op);\n        writerNumDocs++;\n        break;\n\n      case 1:\n        if (VERBOSE) {\n          System.out.println(\"  delete doc\");\n        }\n        // delete docs\n        if (liveIDs.size() > 0) {\n          int id = random().nextInt(op);\n          if (VERBOSE) {\n            System.out.println(\"    id=\" + id);\n          }\n          w.deleteDocuments(new Term(\"id\", \"\"+id));\n          if (liveIDs.remove(id)) {\n            if (VERBOSE) {\n              System.out.println(\"    really deleted\");\n            }\n            writerNumDocs--;\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    nothing to delete yet\");\n          }\n        }\n        break;\n\n      case 2:\n        // reopen NRT reader\n        if (VERBOSE) {\n          System.out.println(\"  reopen NRT reader\");\n        }\n        DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n        if (r2 != null) {\n          r.close();\n          r = r2;\n          if (VERBOSE) {\n            System.out.println(\"    got new reader oldNumDocs=\" + nrtReaderNumDocs + \" newNumDocs=\" + writerNumDocs);\n          }\n          nrtReaderNumDocs = writerNumDocs;\n          nrtLiveIDs = new HashSet<>(liveIDs);\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"    reader is unchanged\");\n          }\n          assertEquals(nrtReaderNumDocs, r.numDocs());\n        }\n        commitAfterNRT = false;\n        break;\n\n      case 3:\n        if (commitAfterNRT == false) {\n          // rollback writer to last nrt reader\n          if (random().nextBoolean()) {\n            if (VERBOSE) {\n              System.out.println(\"  close writer and open new writer from non-NRT reader numDocs=\" + w.numDocs());\n            }\n            w.close();\n            r.close();\n            r = DirectoryReader.open(dir);\n            assertEquals(writerNumDocs, r.numDocs());\n            nrtReaderNumDocs = writerNumDocs;\n            nrtLiveIDs = new HashSet<>(liveIDs);\n          } else {\n            if (VERBOSE) {\n              System.out.println(\"  rollback writer and open new writer from NRT reader numDocs=\" + w.numDocs());\n            }\n            w.rollback();\n          }\n          IndexWriterConfig iwc = newIndexWriterConfig();\n          iwc.setIndexCommit(r.getIndexCommit());\n          w = new IndexWriter(dir, iwc);\n          writerNumDocs = nrtReaderNumDocs;\n          liveIDs = new HashSet<>(nrtLiveIDs);\n          r.close();\n          r = DirectoryReader.open(w);\n        }\n        break;\n\n      case 4:\n        if (VERBOSE) {\n          System.out.println(\"    commit\");\n        }\n        w.commit();\n        commitAfterNRT = true;\n        break;\n      }\n    }\n\n    IOUtils.close(w, r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["2a1862266772deb28cdcb7d996b64d2177022687"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a1862266772deb28cdcb7d996b64d2177022687","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["feb4029567b43f074ed7b6eb8fb126d355075dfd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}