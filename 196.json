{"path":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","commits":[{"id":"74ed9eb409fb21010eb20e5b798fc1deba3c0dae","date":1269324125,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(error.getMessage());\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac3b5208d36301348f71e59a6dd182bd9489064","date":1269356814,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","sourceNew":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(error.getMessage());\n    sb.append(StringUtils.LINE_SEP);\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","sourceOld":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(error.getMessage());\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef42f5d49d3a54e82653530696f6fff0eb81b5b","date":1269640557,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#formatError(String,Test,Throwable).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","sourceNew":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(error.getMessage());\n    sb.append(StringUtils.LINE_SEP);\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","sourceOld":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(error.getMessage());\n    sb.append(StringUtils.LINE_SEP);\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef42f5d49d3a54e82653530696f6fff0eb81b5b","date":1269640557,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#formatError(String,Test,Throwable).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#formatError(String,Test,Throwable).mjava","sourceNew":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(error.getMessage());\n    sb.append(StringUtils.LINE_SEP);\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","sourceOld":"  /**\n   * Format an error and print it.\n   * @param type the type of error\n   * @param test the test that failed\n   * @param error the exception that the test threw\n   */\n  protected synchronized void formatError(String type, Test test,\n      Throwable error) {\n    if (test != null) {\n      endTest(test);\n    }\n    \n    sb.append(formatTest(test) + type);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(error.getMessage());\n    sb.append(StringUtils.LINE_SEP);\n    String strace = JUnitTestRunner.getFilteredTrace(error);\n    sb.append(strace);\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74ed9eb409fb21010eb20e5b798fc1deba3c0dae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["1ac3b5208d36301348f71e59a6dd182bd9489064"],"1ac3b5208d36301348f71e59a6dd182bd9489064":["74ed9eb409fb21010eb20e5b798fc1deba3c0dae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"]},"commit2Childs":{"74ed9eb409fb21010eb20e5b798fc1deba3c0dae":["1ac3b5208d36301348f71e59a6dd182bd9489064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74ed9eb409fb21010eb20e5b798fc1deba3c0dae"],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ac3b5208d36301348f71e59a6dd182bd9489064":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}