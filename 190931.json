{"path":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        \n        // flush to hdfs\n        tlogOutStream.hflush();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d9da6af0d6e0b9ee92e3adbfd2796792453afbef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"/dev/null","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        \n        // flush to hdfs\n        tlogOutStream.hflush();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9da6af0d6e0b9ee92e3adbfd2796792453afbef","date":1472233199,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      ensureFlushed();\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        \n        // flush to hdfs\n        tlogOutStream.hflush();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      ensureFlushed();\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        \n        // flush to hdfs\n        tlogOutStream.hflush();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      ensureFlushed();\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      synchronized (this) {\n        // TODO: optimize this by keeping track of what we have flushed up to\n        fos.flushBuffer();\n        \n        // flush to hdfs\n        tlogOutStream.hflush();\n        /***\n         System.out.println(\"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        if (fos.size() != raf.length() || pos >= fos.size() ) {\n          throw new RuntimeException(\"ERROR\" + \"###flushBuffer to \" + fos.size() + \" raf.length()=\" + raf.length() + \" pos=\"+pos);\n        }\n        ***/\n      }\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog#lookup(long).mjava","sourceNew":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      ensureFlushed();\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        try (LogCodec codec = new LogCodec(resolver)) {\n          return codec.readVal(new FastInputStream(dis));\n        }\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","sourceOld":"  /* This method is thread safe */\n  @Override\n  public Object lookup(long pos) {\n    // A negative position can result from a log replay (which does not re-log, but does\n    // update the version map.  This is OK since the node won't be ACTIVE when this happens.\n    if (pos < 0) return null;\n\n    try {\n      // make sure any unflushed buffer has been flushed\n      ensureFlushed();\n\n      FSDataFastInputStream dis = new FSDataFastInputStream(fs.open(tlogFile),\n          pos);\n      try {\n        dis.seek(pos);\n        LogCodec codec = new LogCodec(resolver);\n        return codec.readVal(new FastInputStream(dis));\n      } finally {\n        dis.close();\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"pos=\" + pos, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9da6af0d6e0b9ee92e3adbfd2796792453afbef":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["849494cf2f3a96af5c8c84995108ddd8456fcd04","d9da6af0d6e0b9ee92e3adbfd2796792453afbef"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["849494cf2f3a96af5c8c84995108ddd8456fcd04","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["d9da6af0d6e0b9ee92e3adbfd2796792453afbef","37a0f60745e53927c4c876cfe5b5a58170f0646c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d9da6af0d6e0b9ee92e3adbfd2796792453afbef":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}