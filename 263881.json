{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void addConvertedTrieCodedDocumentField(\n\t\tfinal Document ldoc, final String fieldname, final String val,\n\t\tfinal boolean index, final Field.Store store\n\t) {\n\t\tField f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED:Field.Index.NO);\n\t\tif (index) {\n\t\t\tf.setOmitTf(true);\n\t\t\tldoc.add(f);\n\t\t\t// add the lower precision values in the helper field with prefix\n\t\t\tfinal StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n\t\t\tsynchronized(sb) {\n\t\t\t\tfor (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n\t\t\t\t\tsb.setLength(0);\n\t\t\t\t\tf=new Field(\n\t\t\t\t\t\tfieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n\t\t\t\t\t\tsb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n\t\t\t\t\t\tField.Store.NO, Field.Index.NOT_ANALYZED\n\t\t\t\t\t);\n\t\t\t\t\tf.setOmitTf(true);\n\t\t\t\t\tldoc.add(f);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tldoc.add(f);\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","sourceNew":"  private void addConvertedTrieCodedDocumentField(\n    final Document ldoc, final String fieldname, final String val,\n    final boolean index, final Field.Store store\n  ) {\n    Field f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED:Field.Index.NO);\n    if (index) {\n      f.setOmitTf(true);\n      ldoc.add(f);\n      // add the lower precision values in the helper field with prefix\n      final StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n      synchronized(sb) {\n        for (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n          sb.setLength(0);\n          f=new Field(\n            fieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n            sb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n            Field.Store.NO, Field.Index.NOT_ANALYZED\n          );\n          f.setOmitTf(true);\n          ldoc.add(f);\n        }\n      }\n    } else {\n      ldoc.add(f);\n    }\n  }\n\n","sourceOld":"\tprivate void addConvertedTrieCodedDocumentField(\n\t\tfinal Document ldoc, final String fieldname, final String val,\n\t\tfinal boolean index, final Field.Store store\n\t) {\n\t\tField f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED:Field.Index.NO);\n\t\tif (index) {\n\t\t\tf.setOmitTf(true);\n\t\t\tldoc.add(f);\n\t\t\t// add the lower precision values in the helper field with prefix\n\t\t\tfinal StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n\t\t\tsynchronized(sb) {\n\t\t\t\tfor (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n\t\t\t\t\tsb.setLength(0);\n\t\t\t\t\tf=new Field(\n\t\t\t\t\t\tfieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n\t\t\t\t\t\tsb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n\t\t\t\t\t\tField.Store.NO, Field.Index.NOT_ANALYZED\n\t\t\t\t\t);\n\t\t\t\t\tf.setOmitTf(true);\n\t\t\t\t\tldoc.add(f);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tldoc.add(f);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43f3e41d13635764f5eec054debd9333fa5c70c6","date":1231945765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","sourceNew":"  private void addConvertedTrieCodedDocumentField(\n    final Document ldoc, final String fieldname, final String val,\n    final boolean index, final Field.Store store\n  ) {\n    Field f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED_NO_NORMS:Field.Index.NO);\n    if (index) {\n      f.setOmitTf(true);\n      ldoc.add(f);\n      // add the lower precision values in the helper field with prefix\n      final StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n      synchronized(sb) {\n        for (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n          sb.setLength(0);\n          f=new Field(\n            fieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n            sb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n            Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS\n          );\n          f.setOmitTf(true);\n          ldoc.add(f);\n        }\n      }\n    } else {\n      ldoc.add(f);\n    }\n  }\n\n","sourceOld":"  private void addConvertedTrieCodedDocumentField(\n    final Document ldoc, final String fieldname, final String val,\n    final boolean index, final Field.Store store\n  ) {\n    Field f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED:Field.Index.NO);\n    if (index) {\n      f.setOmitTf(true);\n      ldoc.add(f);\n      // add the lower precision values in the helper field with prefix\n      final StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n      synchronized(sb) {\n        for (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n          sb.setLength(0);\n          f=new Field(\n            fieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n            sb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n            Field.Store.NO, Field.Index.NOT_ANALYZED\n          );\n          f.setOmitTf(true);\n          ldoc.add(f);\n        }\n      }\n    } else {\n      ldoc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieUtils#addConvertedTrieCodedDocumentField(Document,String,String,boolean,Field.Store).mjava","sourceNew":null,"sourceOld":"  private void addConvertedTrieCodedDocumentField(\n    final Document ldoc, final String fieldname, final String val,\n    final boolean index, final Field.Store store\n  ) {\n    Field f=new Field(fieldname, val, store, index?Field.Index.NOT_ANALYZED_NO_NORMS:Field.Index.NO);\n    if (index) {\n      f.setOmitTf(true);\n      ldoc.add(f);\n      // add the lower precision values in the helper field with prefix\n      final StringBuffer sb=new StringBuffer(TRIE_CODED_LENGTH);\n      synchronized(sb) {\n        for (int i=TRIE_CODED_LENGTH-1; i>0; i--) {\n          sb.setLength(0);\n          f=new Field(\n            fieldname + LOWER_PRECISION_FIELD_NAME_SUFFIX,\n            sb.append( (char)(TRIE_CODED_PADDING_START+i) ).append( val.substring(0,i) ).toString(),\n            Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS\n          );\n          f.setOmitTf(true);\n          ldoc.add(f);\n        }\n      }\n    } else {\n      ldoc.add(f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["43f3e41d13635764f5eec054debd9333fa5c70c6"],"43f3e41d13635764f5eec054debd9333fa5c70c6":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43f3e41d13635764f5eec054debd9333fa5c70c6":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["43f3e41d13635764f5eec054debd9333fa5c70c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}