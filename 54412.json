{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","commits":[{"id":"f1d5408c3fa04da2652aa3db3f21d700f7111cef","date":1360854465,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testMaxScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", \"\"+docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, null, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, null, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","5f183729ece15402db94402d482f29ebac4f7f54"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b41f996b22bd5518650f897d050088ff808ec03","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["5f183729ece15402db94402d482f29ebac4f7f54","3b41f996b22bd5518650f897d050088ff808ec03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}