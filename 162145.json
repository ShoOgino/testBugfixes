{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","commits":[{"id":"b17aab72b6576c145865eafaf502403b11caeaea","date":1353012500,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"/dev/null","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      assertEquals(expected, dv.getSource().getBytes(i, new BytesRef()).utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd329bd749496f6c58b586a6c0dd0dc8201206f","date":1353092226,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    DocValues dv = ireader.leaves().get(0).reader().docValues(\"dv\");\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      assertEquals(expected, dv.getSource().getBytes(i, new BytesRef()).utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\", random().nextBoolean());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6295f14d43685811599f8a8f02a63d75ec6bd8fe","date":1353248103,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello world 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc53d09502e7e9683618107ef3cd087df2d6152","date":1357571745,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    assertFalse(dv.isFixedLength());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"746e3645169db50c8f53252b30d6bc9ac21dea7c","date":1357597773,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    assertFalse(dv.isFixedLength());\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef","date":1358808656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new StraightBytesDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testBytesTwoDocumentsMerged().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testBytesTwoDocumentsMerged().mjava","sourceNew":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    conf.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testBytesTwoDocumentsMerged() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    IndexWriter iwriter = new IndexWriter(directory, iwc);\n    Document doc = new Document();\n    doc.add(newField(\"id\", \"0\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello world 1\")));\n    iwriter.addDocument(doc);\n    iwriter.commit();\n    doc = new Document();\n    doc.add(newField(\"id\", \"1\", StringField.TYPE_STORED));\n    doc.add(new BinaryDocValuesField(\"dv\", new BytesRef(\"hello 2\")));\n    iwriter.addDocument(doc);\n    iwriter.forceMerge(1);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    assert ireader.leaves().size() == 1;\n    BinaryDocValues dv = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv\");\n    BytesRef scratch = new BytesRef();\n    for(int i=0;i<2;i++) {\n      StoredDocument doc2 = ireader.leaves().get(0).reader().document(i);\n      String expected;\n      if (doc2.get(\"id\").equals(\"0\")) {\n        expected = \"hello world 1\";\n      } else {\n        expected = \"hello 2\";\n      }\n      dv.get(i, scratch);\n      assertEquals(expected, scratch.utf8ToString());\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["bfc53d09502e7e9683618107ef3cd087df2d6152"],"bfc53d09502e7e9683618107ef3cd087df2d6152":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["b17aab72b6576c145865eafaf502403b11caeaea"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"b17aab72b6576c145865eafaf502403b11caeaea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"]},"commit2Childs":{"6295f14d43685811599f8a8f02a63d75ec6bd8fe":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"746e3645169db50c8f53252b30d6bc9ac21dea7c":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"bfc53d09502e7e9683618107ef3cd087df2d6152":["746e3645169db50c8f53252b30d6bc9ac21dea7c"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["bfc53d09502e7e9683618107ef3cd087df2d6152"],"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17aab72b6576c145865eafaf502403b11caeaea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cd329bd749496f6c58b586a6c0dd0dc8201206f":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["6295f14d43685811599f8a8f02a63d75ec6bd8fe"],"b17aab72b6576c145865eafaf502403b11caeaea":["7cd329bd749496f6c58b586a6c0dd0dc8201206f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}