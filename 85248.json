{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestCachingWrapperFilter#assertDocIdSetCacheable(IndexReader,Filter,boolean).mjava","sourceNew":null,"sourceOld":"  private static void assertDocIdSetCacheable(IndexReader reader, Filter filter, boolean shouldCacheable) throws IOException {\n    final CachingWrapperFilter cacher = new CachingWrapperFilter(filter);\n    final DocIdSet originalSet = filter.getDocIdSet(reader);\n    final DocIdSet cachedSet = cacher.getDocIdSet(reader);\n    assertTrue(cachedSet.isCacheable());\n    assertEquals(shouldCacheable, originalSet.isCacheable());\n    //System.out.println(\"Original: \"+originalSet.getClass().getName()+\" -- cached: \"+cachedSet.getClass().getName());\n    if (originalSet.isCacheable()) {\n      assertEquals(\"Cached DocIdSet must be of same class like uncached, if cacheable\", originalSet.getClass(), cachedSet.getClass());\n    } else {\n      assertTrue(\"Cached DocIdSet must be an OpenBitSet if the original one was not cacheable\", cachedSet instanceof OpenBitSetDISI || cachedSet == DocIdSet.EMPTY_DOCIDSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}