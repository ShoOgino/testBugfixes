{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","commits":[{"id":"e7754464847b06ced605515bd48219280ede29e9","date":1354586462,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetShard(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetShard(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919e6b4fea3dbc81ee31eff28b2b74b057f5361f","date":1355072041,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = collection.getStr(ROUTE_FIELD);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o == null) o = sdoc.getFieldValue(\"_shard_\");//deprecated . for backcompat remove later\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n      if(shard == null) shard =params.get(\"_shard_\"); //deperecated for back compat\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = collection.getStr(ROUTE_FIELD);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o == null) o = sdoc.getFieldValue(\"_shard_\");//deprecated . for backcompat remove later\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n      if(shard == null) shard =params.get(\"_shard_\"); //deperecated for back compat\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      Object o = sdoc.getFieldValue(\"_shard_\");\n      if (o != null) {\n        shard = o.toString();\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(\"_shard_\");\n    }\n\n    if (shard != null) {\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No _shard_=\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e187a371a1d09379bb452c2c13a7b9221525dff8","date":1379517004,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = getRouteField(collection);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o == null) o = sdoc.getFieldValue(\"_shard_\");//deprecated . for backcompat remove later\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n      if(shard == null) shard =params.get(\"_shard_\"); //deperecated for back compat\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = collection.getStr(ROUTE_FIELD);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o == null) o = sdoc.getFieldValue(\"_shard_\");//deprecated . for backcompat remove later\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n      if(shard == null) shard =params.get(\"_shard_\"); //deperecated for back compat\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = getRouteField(collection);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = getRouteField(collection);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o == null) o = sdoc.getFieldValue(\"_shard_\");//deprecated . for backcompat remove later\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n      if(shard == null) shard =params.get(\"_shard_\"); //deperecated for back compat\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,String,SolrParams,DocCollection).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ImplicitDocRouter#getTargetSlice(String,SolrInputDocument,SolrParams,DocCollection).mjava","sourceNew":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, String route, SolrParams params, DocCollection collection) {\n    String shard = null;\n\n    if (route != null) // if a route is already passed in, try to use it\n      shard = route;\n    else if (sdoc != null) {\n      String f = getRouteField(collection);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","sourceOld":"  @Override\n  public Slice getTargetSlice(String id, SolrInputDocument sdoc, SolrParams params, DocCollection collection) {\n    String shard = null;\n    if (sdoc != null) {\n      String f = getRouteField(collection);\n      if(f !=null) {\n        Object o = sdoc.getFieldValue(f);\n        if (o != null) shard = o.toString();\n        else throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No value for field \"+f +\" in \" + sdoc);\n      }\n      if(shard == null) {\n        Object o = sdoc.getFieldValue(_ROUTE_);\n        if (o != null) {\n          shard = o.toString();\n        }\n      }\n    }\n\n    if (shard == null) {\n      shard = params.get(_ROUTE_);\n    }\n\n    if (shard != null) {\n\n      Slice slice = collection.getSlice(shard);\n      if (slice == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shard called =\" + shard + \" in \" + collection);\n      }\n      return slice;\n    }\n\n    return null;  // no shard specified... use default.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7754464847b06ced605515bd48219280ede29e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["e187a371a1d09379bb452c2c13a7b9221525dff8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f","1eeda7e62e149f90eee8895af874c74efa7d4852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"e187a371a1d09379bb452c2c13a7b9221525dff8":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"919e6b4fea3dbc81ee31eff28b2b74b057f5361f":["e7754464847b06ced605515bd48219280ede29e9"],"747dd71fefcbc7142661c25334b74c518fef4d81":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["747dd71fefcbc7142661c25334b74c518fef4d81"]},"commit2Childs":{"e7754464847b06ced605515bd48219280ede29e9":["919e6b4fea3dbc81ee31eff28b2b74b057f5361f"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["747dd71fefcbc7142661c25334b74c518fef4d81"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7754464847b06ced605515bd48219280ede29e9","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e187a371a1d09379bb452c2c13a7b9221525dff8":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"919e6b4fea3dbc81ee31eff28b2b74b057f5361f":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","1eeda7e62e149f90eee8895af874c74efa7d4852"],"747dd71fefcbc7142661c25334b74c518fef4d81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e187a371a1d09379bb452c2c13a7b9221525dff8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}