{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","commits":[{"id":"4ab2938d01fe23337bcad36c5ad7207deb33a6a4","date":1205259391,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.TOKENIZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void xxxtestDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void xxxtestDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3","date":1266940597,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDoBeforeAfterFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDoAfterFlush().mjava","sourceNew":"  // LUCENE-1222\n  public void testDoBeforeAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.beforeWasCalled = false;\n    w.afterWasCalled = false;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.beforeWasCalled);\n    assertTrue(w.afterWasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1222\n  public void testDoAfterFlush() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    MockIndexWriter3 w = new MockIndexWriter3(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.wasCalled = true;\n    w.deleteDocuments(new Term(\"field\", \"field\"));\n    w.commit();\n    assertTrue(w.wasCalled);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    assertEquals(1, ir.maxDoc());\n    assertEquals(0, ir.numDocs());\n    ir.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["4ab2938d01fe23337bcad36c5ad7207deb33a6a4"],"4ab2938d01fe23337bcad36c5ad7207deb33a6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ab2938d01fe23337bcad36c5ad7207deb33a6a4"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"4ab2938d01fe23337bcad36c5ad7207deb33a6a4":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"09c482d1e63332617181729a225b215c452d8a79":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}