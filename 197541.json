{"path":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5526c7296d909d49bc2ce493b4e8435db4979db0","date":1299104057,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    this.queryAnalyzer = analyzer;\n    log.trace(\"FieldType: \" + typeName + \".setQueryAnalyzer(\" + analyzer.getClass().getName() + \")\" );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#setQueryAnalyzer(Analyzer).mjava","sourceNew":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","sourceOld":"  /**\n   * Sets the Analyzer to be used when querying fields of this type.\n   *\n   * <p>\n   * The default implementation throws a SolrException.  \n   * Subclasses that override this method need to ensure the behavior \n   * of the analyzer is consistent with the implementation of toInternal.\n   * </p>\n   * \n   * @see #toInternal\n   * @see #setAnalyzer\n   * @see #getQueryAnalyzer\n   */\n  public void setQueryAnalyzer(Analyzer analyzer) {\n    SolrException e = new SolrException\n      (ErrorCode.SERVER_ERROR,\n       \"FieldType: \" + this.getClass().getSimpleName() + \n       \" (\" + typeName + \") does not support specifying an analyzer\");\n    SolrException.logOnce(log,null,e);\n    throw e;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5526c7296d909d49bc2ce493b4e8435db4979db0":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["5526c7296d909d49bc2ce493b4e8435db4979db0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","5526c7296d909d49bc2ce493b4e8435db4979db0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5526c7296d909d49bc2ce493b4e8435db4979db0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","5526c7296d909d49bc2ce493b4e8435db4979db0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5526c7296d909d49bc2ce493b4e8435db4979db0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"5526c7296d909d49bc2ce493b4e8435db4979db0":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["5526c7296d909d49bc2ce493b4e8435db4979db0","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}