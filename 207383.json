{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //   System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      // }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //   System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + toHex(targetLabel) + \" vs nextFloorLabel=\" + toHex(nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    // }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //   System.out.println(\"      already on correct block\");\n      // }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //   System.out.println(\"      label=\" + toHex(nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      // }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //   System.out.println(\"        stop!  last block nextFloorLabel=\" + toHex(nextFloorLabel));\n        // }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //   System.out.println(\"        stop!  nextFloorLabel=\" + toHex(nextFloorLabel));\n          // }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //   System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      // }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"      stay on same fp=\" + newFP);\n      // }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //   System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      // }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //   System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + toHex(targetLabel) + \" vs nextFloorLabel=\" + toHex(nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    // }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //   System.out.println(\"      already on correct block\");\n      // }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //   System.out.println(\"      label=\" + toHex(nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      // }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //   System.out.println(\"        stop!  last block nextFloorLabel=\" + toHex(nextFloorLabel));\n        // }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //   System.out.println(\"        stop!  nextFloorLabel=\" + toHex(nextFloorLabel));\n          // }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //   System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      // }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"      stay on same fp=\" + newFP);\n      // }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnumFrame#scanToFloorFrame(BytesRef).mjava","sourceNew":null,"sourceOld":"  // TODO: make this array'd so we can do bin search?\n  // likely not worth it?  need to measure how many\n  // floor blocks we \"typically\" get\n  public void scanToFloorFrame(BytesRef target) {\n\n    if (!isFloor || target.length <= prefix) {\n      // if (DEBUG) {\n      //   System.out.println(\"    scanToFloorFrame skip: isFloor=\" + isFloor + \" target.length=\" + target.length + \" vs prefix=\" + prefix);\n      // }\n      return;\n    }\n\n    final int targetLabel = target.bytes[target.offset + prefix] & 0xFF;\n\n    // if (DEBUG) {\n    //   System.out.println(\"    scanToFloorFrame fpOrig=\" + fpOrig + \" targetLabel=\" + toHex(targetLabel) + \" vs nextFloorLabel=\" + toHex(nextFloorLabel) + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n    // }\n\n    if (targetLabel < nextFloorLabel) {\n      // if (DEBUG) {\n      //   System.out.println(\"      already on correct block\");\n      // }\n      return;\n    }\n\n    assert numFollowFloorBlocks != 0;\n\n    long newFP = fpOrig;\n    while (true) {\n      final long code = floorDataReader.readVLong();\n      newFP = fpOrig + (code >>> 1);\n      hasTerms = (code & 1) != 0;\n      // if (DEBUG) {\n      //   System.out.println(\"      label=\" + toHex(nextFloorLabel) + \" fp=\" + newFP + \" hasTerms?=\" + hasTerms + \" numFollowFloor=\" + numFollowFloorBlocks);\n      // }\n            \n      isLastInFloor = numFollowFloorBlocks == 1;\n      numFollowFloorBlocks--;\n\n      if (isLastInFloor) {\n        nextFloorLabel = 256;\n        // if (DEBUG) {\n        //   System.out.println(\"        stop!  last block nextFloorLabel=\" + toHex(nextFloorLabel));\n        // }\n        break;\n      } else {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n        if (targetLabel < nextFloorLabel) {\n          // if (DEBUG) {\n          //   System.out.println(\"        stop!  nextFloorLabel=\" + toHex(nextFloorLabel));\n          // }\n          break;\n        }\n      }\n    }\n\n    if (newFP != fp) {\n      // Force re-load of the block:\n      // if (DEBUG) {\n      //   System.out.println(\"      force switch to fp=\" + newFP + \" oldFP=\" + fp);\n      // }\n      nextEnt = -1;\n      fp = newFP;\n    } else {\n      // if (DEBUG) {\n      //   System.out.println(\"      stay on same fp=\" + newFP);\n      // }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}