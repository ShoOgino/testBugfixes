{"path":"backwards/src/test/org/apache/lucene/search/function/TestDocValues#testGetAverageValue().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/function/TestDocValues#testGetAverageValue().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetAverageValue() {\n    float[] innerArray = new float[] { 1.0f, 1.0f, 1.0f, 1.0f };\n    DocValuesTestImpl docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 1.0f\", 1.0f, docValues.getAverageValue(), 0);\n\n    innerArray = new float[] { 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 3.5f\", 3.5f, docValues.getAverageValue(), 0);\n\n    // test with negative values\n    innerArray = new float[] { -1.0f, 2.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 0.5f\", 0.5f, docValues.getAverageValue(), 0);\n\n    // test with without values - NaN\n    innerArray = new float[] {};\n    docValues = new DocValuesTestImpl(innerArray);\n    assertTrue(\"the average is NaN - no values in inner array\", Float\n        .isNaN(docValues.getAverageValue()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/function/TestDocValues#testGetAverageValue().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/function/TestDocValues#testGetAverageValue().mjava","sourceNew":"  public void testGetAverageValue() {\n    float[] innerArray = new float[] { 1.0f, 1.0f, 1.0f, 1.0f };\n    DocValuesTestImpl docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 1.0f\", 1.0f, docValues.getAverageValue(), 0);\n\n    innerArray = new float[] { 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 3.5f\", 3.5f, docValues.getAverageValue(), 0);\n\n    // test with negative values\n    innerArray = new float[] { -1.0f, 2.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 0.5f\", 0.5f, docValues.getAverageValue(), 0);\n\n    // test with without values - NaN\n    innerArray = new float[] {};\n    docValues = new DocValuesTestImpl(innerArray);\n    assertTrue(\"the average is NaN - no values in inner array\", Float\n        .isNaN(docValues.getAverageValue()));\n  }\n\n","sourceOld":"  public void testGetAverageValue() {\n    float[] innerArray = new float[] { 1.0f, 1.0f, 1.0f, 1.0f };\n    DocValuesTestImpl docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 1.0f\", 1.0f, docValues.getAverageValue(), 0);\n\n    innerArray = new float[] { 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 3.5f\", 3.5f, docValues.getAverageValue(), 0);\n\n    // test with negative values\n    innerArray = new float[] { -1.0f, 2.0f };\n    docValues = new DocValuesTestImpl(innerArray);\n    assertEquals(\"the average is 0.5f\", 0.5f, docValues.getAverageValue(), 0);\n\n    // test with without values - NaN\n    innerArray = new float[] {};\n    docValues = new DocValuesTestImpl(innerArray);\n    assertTrue(\"the average is NaN - no values in inner array\", Float\n        .isNaN(docValues.getAverageValue()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}