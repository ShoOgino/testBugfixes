{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"/dev/null","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"/dev/null","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7c92aa84d51cdc33842956b37693d068bbc5b29","date":1447696029,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetRequest.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetRequest.SortDirection.asc : FacetRequest.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetRequest.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetRequest.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetRequest.SortDirection.asc : FacetRequest.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetRequest.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetRequest.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetRequest.SortDirection.asc : FacetRequest.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetRequest.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetField.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetField.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetField.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetField.SortDirection.asc : FacetField.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetField.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private static FacetRequest.FacetSort parseSort(Object sort) {\n    if (sort == null) {\n      return null;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" asc\".length()),\n                                          FacetRequest.SortDirection.asc);\n      } else if (sortStr.endsWith(\" desc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" desc\".length()),\n                                          FacetRequest.SortDirection.desc);\n      } else {\n        return new FacetRequest.FacetSort(sortStr,\n                                          // default direction for \"index\" is ascending\n                                          (\"index\".equals(sortStr)\n                                           ? FacetRequest.SortDirection.asc\n                                           : FacetRequest.SortDirection.desc));\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      return new FacetRequest.FacetSort(k, FacetRequest.SortDirection.valueOf(v.toString()));\n    }\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private void parseSort(Object sort) {\n    if (sort == null) {\n      facet.sortVariable = \"count\";\n      facet.sortDirection = FacetRequest.SortDirection.desc;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" asc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.asc;\n      } else if (sortStr.endsWith(\" desc\")) {\n        facet.sortVariable = sortStr.substring(0, sortStr.length()-\" desc\".length());\n        facet.sortDirection = FacetRequest.SortDirection.desc;\n      } else {\n        facet.sortVariable = sortStr;\n        facet.sortDirection = \"index\".equals(facet.sortVariable) ? FacetRequest.SortDirection.asc : FacetRequest.SortDirection.desc;  // default direction for \"index\" is ascending\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      facet.sortVariable = k;\n      facet.sortDirection = FacetRequest.SortDirection.valueOf(v.toString());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private static FacetRequest.FacetSort parseSort(Object sort) {\n    if (sort == null) {\n      return null;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" asc\".length()),\n                                          FacetRequest.SortDirection.asc);\n      } else if (sortStr.endsWith(\" desc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" desc\".length()),\n                                          FacetRequest.SortDirection.desc);\n      } else {\n        return new FacetRequest.FacetSort(sortStr,\n                                          // default direction for \"index\" is ascending\n                                          (\"index\".equals(sortStr)\n                                           ? FacetRequest.SortDirection.asc\n                                           : FacetRequest.SortDirection.desc));\n      }\n    } else if (sort instanceof Map) {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      return new FacetRequest.FacetSort(k, FacetRequest.SortDirection.valueOf(v.toString()));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected string/map for 'sort', received \"+ sort.getClass().getSimpleName() + \"=\" + sort);\n    }\n  }\n\n","sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private static FacetRequest.FacetSort parseSort(Object sort) {\n    if (sort == null) {\n      return null;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" asc\".length()),\n                                          FacetRequest.SortDirection.asc);\n      } else if (sortStr.endsWith(\" desc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" desc\".length()),\n                                          FacetRequest.SortDirection.desc);\n      } else {\n        return new FacetRequest.FacetSort(sortStr,\n                                          // default direction for \"index\" is ascending\n                                          (\"index\".equals(sortStr)\n                                           ? FacetRequest.SortDirection.asc\n                                           : FacetRequest.SortDirection.desc));\n      }\n    } else {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      return new FacetRequest.FacetSort(k, FacetRequest.SortDirection.valueOf(v.toString()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"055706edcc08dfbacd42d8ed4144209d3dc05b67","date":1569388195,"type":4,"author":"Munendra S N","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldParser[FacetRequest]#parseSort(Object).mjava","sourceNew":null,"sourceOld":"  // Sort specification is currently\n  // sort : 'mystat desc'\n  // OR\n  // sort : { mystat : 'desc' }\n  private static FacetRequest.FacetSort parseSort(Object sort) {\n    if (sort == null) {\n      return null;\n    } else if (sort instanceof String) {\n      String sortStr = (String)sort;\n      if (sortStr.endsWith(\" asc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" asc\".length()),\n                                          FacetRequest.SortDirection.asc);\n      } else if (sortStr.endsWith(\" desc\")) {\n        return new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-\" desc\".length()),\n                                          FacetRequest.SortDirection.desc);\n      } else {\n        return new FacetRequest.FacetSort(sortStr,\n                                          // default direction for \"index\" is ascending\n                                          (\"index\".equals(sortStr)\n                                           ? FacetRequest.SortDirection.asc\n                                           : FacetRequest.SortDirection.desc));\n      }\n    } else if (sort instanceof Map) {\n     // sort : { myvar : 'desc' }\n      Map<String,Object> map = (Map<String,Object>)sort;\n      // TODO: validate\n      Map.Entry<String,Object> entry = map.entrySet().iterator().next();\n      String k = entry.getKey();\n      Object v = entry.getValue();\n      return new FacetRequest.FacetSort(k, FacetRequest.SortDirection.valueOf(v.toString()));\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected string/map for 'sort', received \"+ sort.getClass().getSimpleName() + \"=\" + sort);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["1918d03541b875664e27eae44b6b157da044f0b8"],"1918d03541b875664e27eae44b6b157da044f0b8":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7c92aa84d51cdc33842956b37693d068bbc5b29":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1931d98b40b01d5075753b197c2461a5c2652689":["d7c92aa84d51cdc33842956b37693d068bbc5b29"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["d7c92aa84d51cdc33842956b37693d068bbc5b29","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d7c92aa84d51cdc33842956b37693d068bbc5b29","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["055706edcc08dfbacd42d8ed4144209d3dc05b67"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1918d03541b875664e27eae44b6b157da044f0b8":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d7c92aa84d51cdc33842956b37693d068bbc5b29"],"d7c92aa84d51cdc33842956b37693d068bbc5b29":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["1918d03541b875664e27eae44b6b157da044f0b8"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["94ce69d020f939568b84a1dbbfbd11bfd9907b73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}