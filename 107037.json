{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDistance#computeDeltaDistance(DistanceStyle,GeoPoint).mjava","commits":[{"id":"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","date":1510144003,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoDistance#computeDeltaDistance(DistanceStyle,GeoPoint).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compute the shape's <em>delta</em> distance given a point.  This is defined as the distance that someone traveling\n   * the \"length\" of the shape would have to go out of their way to include the point.\n   * For some shapes, e.g. paths, this makes perfect sense.  For other shapes, e.g. circles, the \"length\" of the shape is zero, \n   * and the delta is computed as the distance from the center to the point and back.\n   * A return value of Double.POSITIVE_INFINITY should be returned for\n   * points outside of the shape.\n   *\n   * @param distanceStyle is the distance style.\n   * @param point is the point to compute the distance to.\n   * @return the distance.\n   */\n  public default double computeDeltaDistance(final DistanceStyle distanceStyle, final GeoPoint point) {\n    return computeDeltaDistance(distanceStyle, point.x, point.y, point.z);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"]},"commit2Childs":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}