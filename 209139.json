{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","sourceNew":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","sourceOld":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","sourceNew":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5) {\n      throw new IllegalArgumentException(\"Latitude \" + lat + \" is out of range: must range from -Math.PI/2 to Math.PI/2\");\n    }\n    if (lon < -Math.PI || lon > Math.PI) {\n      throw new IllegalArgumentException(\"Longitude \" + lon + \" is out of range: must range from -Math.PI to Math.PI\");\n    }\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","sourceOld":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of range\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of range\");\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoPoint#GeoPoint(double,double,double,double,double,double).mjava","sourceNew":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5) {\n      throw new IllegalArgumentException(\"Latitude \" + lat + \" is out of range: must range from -Math.PI/2 to Math.PI/2\");\n    }\n    if (lon < -Math.PI || lon > Math.PI) {\n      throw new IllegalArgumentException(\"Longitude \" + lon + \" is out of range: must range from -Math.PI to Math.PI\");\n    }\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","sourceOld":"  /** Construct a GeoPoint from a unit (x,y,z) vector and a magnitude.\n   * @param magnitude is the desired magnitude, provided to put the point on the ellipsoid.\n   * @param x is the unit x value.\n   * @param y is the unit y value.\n   * @param z is the unit z value.\n   * @param lat is the latitude.\n   * @param lon is the longitude.\n   */\n  public GeoPoint(final double magnitude, final double x, final double y, final double z, double lat, double lon) {\n    super(x * magnitude, y * magnitude, z * magnitude);\n    this.magnitude = magnitude;\n    if (lat > Math.PI * 0.5 || lat < -Math.PI * 0.5) {\n      throw new IllegalArgumentException(\"Latitude \" + lat + \" is out of range: must range from -Math.PI/2 to Math.PI/2\");\n    }\n    if (lon < -Math.PI || lon > Math.PI) {\n      throw new IllegalArgumentException(\"Longitude \" + lon + \" is out of range: must range from -Math.PI to Math.PI\");\n    }\n    this.latitude = lat;\n    this.longitude = lon;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}