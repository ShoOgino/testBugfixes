{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset, fillFields);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset, fillFields);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<BytesRef> collector = (FirstPassGroupingCollector<BytesRef>) c;\n      return collector.getTopGroups(groupOffset, fillFields);\n    } else if (ValueSourceGroupSelector.class.isAssignableFrom(c.getGroupSelector().getClass())) {\n      FirstPassGroupingCollector<MutableValue> collector = (FirstPassGroupingCollector<MutableValue>) c;\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = collector.getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04c370507e5521b2eb998530736f1c19b851ed5a"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"04c370507e5521b2eb998530736f1c19b851ed5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7ae958a739da1866696f442384393ba2f13e33e5":["04c370507e5521b2eb998530736f1c19b851ed5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}