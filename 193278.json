{"path":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","pathOld":"src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","sourceNew":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#equals(char[],int,char[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","sourceNew":"  // Since Arrays.equals doesn't implement offsets for equals\n  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#equals(int[],int,int[],int,int).mjava","pathOld":"solr/src/java/org/apache/solr/util/ArraysUtils#equals(char[],int,char[],int,int).mjava","sourceNew":"  // Since Arrays.equals doesn't implement offsets for equals\n  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(int[] left, int offsetLeft, int[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * See if two array slices are the same.\n   *\n   * @param left        The left array to compare\n   * @param offsetLeft  The offset into the array.  Must be positive\n   * @param right       The right array to compare\n   * @param offsetRight the offset into the right array.  Must be positive\n   * @param length      The length of the section of the array to compare\n   * @return true if the two arrays, starting at their respective offsets, are equal\n   * \n   * @see java.util.Arrays#equals(char[], char[])\n   */\n  public static boolean equals(char[] left, int offsetLeft, char[] right, int offsetRight, int length) {\n    if ((offsetLeft + length <= left.length) && (offsetRight + length <= right.length)) {\n      for (int i = 0; i < length; i++) {\n        if (left[offsetLeft + i] != right[offsetRight + i]) {\n          return false;\n        }\n\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}