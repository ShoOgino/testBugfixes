{"path":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.putAll(DEFAULT_VERSION_PARAM);\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  @Test\n  public void testMultiWordSynonyms() throws IOException {\n    List<String> rules = new ArrayList<String>();\n    rules.add(\"a b c,d\");\n    SynonymMap synMap = new SynonymMap(true);\n    SynonymFilterFactory.parseRules(rules, synMap, \"=>\", \",\", true, null);\n\n    SynonymFilter ts = new SynonymFilter(new WhitespaceTokenizer(DEFAULT_VERSION, new StringReader(\"a e\")), synMap);\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.putAll(DEFAULT_VERSION_PARAM);\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3db4916365e651108fa37ee03410e87f26e10547","date":1343325323,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","sourceOld":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":null,"sourceOld":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestMultiWordSynonyms#testMultiWordSynonyms().mjava","sourceNew":null,"sourceOld":"  public void testMultiWordSynonyms() throws IOException {\n    SynonymFilterFactory factory = new SynonymFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"synonyms\", \"synonyms.txt\");\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(\"a b c,d\"));\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"a e\"), MockTokenizer.WHITESPACE, false));\n    // This fails because [\"e\",\"e\"] is the value of the token stream\n    assertTokenStreamContents(ts, new String[] { \"a\", \"e\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["92ed69fd02d759d98f62e869eaa64e64e22302bf","3db4916365e651108fa37ee03410e87f26e10547"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["92ed69fd02d759d98f62e869eaa64e64e22302bf","3db4916365e651108fa37ee03410e87f26e10547"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"3db4916365e651108fa37ee03410e87f26e10547":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3db4916365e651108fa37ee03410e87f26e10547"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3db4916365e651108fa37ee03410e87f26e10547"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"3db4916365e651108fa37ee03410e87f26e10547":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}