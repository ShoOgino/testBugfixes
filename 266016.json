{"path":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"/dev/null","sourceNew":"    // Simple tests to test the Payload class\r\n    public void testPayload() throws Exception {\r\n        byte[] testData = \"This is a test!\".getBytes();\r\n        Payload payload = new Payload(testData);\r\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\r\n        \r\n        // test copyTo()\r\n        byte[] target = new byte[testData.length - 1];\r\n        try {\r\n            payload.copyTo(target, 0);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        target = new byte[testData.length + 3];\r\n        payload.copyTo(target, 3);\r\n        \r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(testData[i], target[i + 3]);\r\n        }\r\n        \r\n\r\n        // test toByteArray()\r\n        target = payload.toByteArray();\r\n        assertByteArrayEquals(testData, target);\r\n\r\n        // test byteAt()\r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(payload.byteAt(i), testData[i]);\r\n        }\r\n        \r\n        try {\r\n            payload.byteAt(testData.length + 1);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97c663a0e8cf62834049da11ecd70bd4a639ac9c","date":1195852652,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\r\n    public void testPayload() throws Exception {\r\n        byte[] testData = \"This is a test!\".getBytes();\r\n        Payload payload = new Payload(testData);\r\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\r\n        \r\n        // test copyTo()\r\n        byte[] target = new byte[testData.length - 1];\r\n        try {\r\n            payload.copyTo(target, 0);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        target = new byte[testData.length + 3];\r\n        payload.copyTo(target, 3);\r\n        \r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(testData[i], target[i + 3]);\r\n        }\r\n        \r\n\r\n        // test toByteArray()\r\n        target = payload.toByteArray();\r\n        assertByteArrayEquals(testData, target);\r\n\r\n        // test byteAt()\r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(payload.byteAt(i), testData[i]);\r\n        }\r\n        \r\n        try {\r\n            payload.byteAt(testData.length + 1);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        Payload clone = (Payload) payload.clone();\r\n        assertEquals(payload.length(), clone.length());\r\n        for (int i = 0; i < payload.length(); i++) {\r\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\r\n        }\r\n        \r\n    }\r\n\n","sourceOld":"    // Simple tests to test the Payload class\r\n    public void testPayload() throws Exception {\r\n        byte[] testData = \"This is a test!\".getBytes();\r\n        Payload payload = new Payload(testData);\r\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\r\n        \r\n        // test copyTo()\r\n        byte[] target = new byte[testData.length - 1];\r\n        try {\r\n            payload.copyTo(target, 0);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        target = new byte[testData.length + 3];\r\n        payload.copyTo(target, 3);\r\n        \r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(testData[i], target[i + 3]);\r\n        }\r\n        \r\n\r\n        // test toByteArray()\r\n        target = payload.toByteArray();\r\n        assertByteArrayEquals(testData, target);\r\n\r\n        // test byteAt()\r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(payload.byteAt(i), testData[i]);\r\n        }\r\n        \r\n        try {\r\n            payload.byteAt(testData.length + 1);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\r\n    public void testPayload() throws Exception {\r\n        byte[] testData = \"This is a test!\".getBytes();\r\n        Payload payload = new Payload(testData);\r\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\r\n        \r\n        // test copyTo()\r\n        byte[] target = new byte[testData.length - 1];\r\n        try {\r\n            payload.copyTo(target, 0);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        target = new byte[testData.length + 3];\r\n        payload.copyTo(target, 3);\r\n        \r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(testData[i], target[i + 3]);\r\n        }\r\n        \r\n\r\n        // test toByteArray()\r\n        target = payload.toByteArray();\r\n        assertByteArrayEquals(testData, target);\r\n\r\n        // test byteAt()\r\n        for (int i = 0; i < testData.length; i++) {\r\n            assertEquals(payload.byteAt(i), testData[i]);\r\n        }\r\n        \r\n        try {\r\n            payload.byteAt(testData.length + 1);\r\n            fail(\"Expected exception not thrown\");\r\n        } catch (Exception expected) {\r\n            // expected exception\r\n        }\r\n        \r\n        Payload clone = (Payload) payload.clone();\r\n        assertEquals(payload.length(), clone.length());\r\n        for (int i = 0; i < payload.length(); i++) {\r\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\r\n        }\r\n        \r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testPayload().mjava","sourceNew":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","sourceOld":"    // Simple tests to test the Payload class\n    public void testPayload() throws Exception {\n        rnd = newRandom();\n        byte[] testData = \"This is a test!\".getBytes();\n        Payload payload = new Payload(testData);\n        assertEquals(\"Wrong payload length.\", testData.length, payload.length());\n        \n        // test copyTo()\n        byte[] target = new byte[testData.length - 1];\n        try {\n            payload.copyTo(target, 0);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        target = new byte[testData.length + 3];\n        payload.copyTo(target, 3);\n        \n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(testData[i], target[i + 3]);\n        }\n        \n\n        // test toByteArray()\n        target = payload.toByteArray();\n        assertByteArrayEquals(testData, target);\n\n        // test byteAt()\n        for (int i = 0; i < testData.length; i++) {\n            assertEquals(payload.byteAt(i), testData[i]);\n        }\n        \n        try {\n            payload.byteAt(testData.length + 1);\n            fail(\"Expected exception not thrown\");\n        } catch (Exception expected) {\n            // expected exception\n        }\n        \n        Payload clone = (Payload) payload.clone();\n        assertEquals(payload.length(), clone.length());\n        for (int i = 0; i < payload.length(); i++) {\n          assertEquals(payload.byteAt(i), clone.byteAt(i));\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["2123bddbd65dea198cac380540636ce43a880403"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cb1066f2afe9450585d0d10063ea4450085236f1"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8522ae207a56c6db28ca06fe6cc33e70911c3600":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"2123bddbd65dea198cac380540636ce43a880403":["cb1066f2afe9450585d0d10063ea4450085236f1"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}