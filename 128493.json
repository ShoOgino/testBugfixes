{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) throws IOException {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void shortVal(int doc, short[] vals) throws IOException {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) throws IOException {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) throws IOException {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) throws IOException {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) throws IOException {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) throws IOException {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) throws IOException {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void shortVal(int doc, short[] vals) throws IOException {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) throws IOException {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) throws IOException {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) throws IOException {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) throws IOException {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) throws IOException {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) throws IOException {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void shortVal(int doc, short[] vals) throws IOException {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) throws IOException {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) throws IOException {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) throws IOException {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) throws IOException {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) throws IOException {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n\n        @Override\n        public void shortVal(int doc, short[] vals) {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/VectorValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) throws IOException {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void shortVal(int doc, short[] vals) throws IOException {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) throws IOException {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) throws IOException {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) throws IOException {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) throws IOException {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) throws IOException {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    int size = sources.size();\n\n    // special-case x,y and lat,lon since it's so common\n    if (size==2) {\n      final FunctionValues x = sources.get(0).getValues(context, readerContext);\n      final FunctionValues y = sources.get(1).getValues(context, readerContext);\n      return new FunctionValues() {\n        @Override\n        public void byteVal(int doc, byte[] vals) throws IOException {\n          vals[0] = x.byteVal(doc);\n          vals[1] = y.byteVal(doc);\n        }\n        @Override\n        public void shortVal(int doc, short[] vals) throws IOException {\n          vals[0] = x.shortVal(doc);\n          vals[1] = y.shortVal(doc);\n        }\n        @Override\n        public void intVal(int doc, int[] vals) throws IOException {\n          vals[0] = x.intVal(doc);\n          vals[1] = y.intVal(doc);\n        }\n        @Override\n        public void longVal(int doc, long[] vals) throws IOException {\n          vals[0] = x.longVal(doc);\n          vals[1] = y.longVal(doc);\n        }\n        @Override\n        public void floatVal(int doc, float[] vals) throws IOException {\n          vals[0] = x.floatVal(doc);\n          vals[1] = y.floatVal(doc);\n        }\n        @Override\n        public void doubleVal(int doc, double[] vals) throws IOException {\n          vals[0] = x.doubleVal(doc);\n          vals[1] = y.doubleVal(doc);\n        }\n        @Override\n        public void strVal(int doc, String[] vals) throws IOException {\n          vals[0] = x.strVal(doc);\n          vals[1] = y.strVal(doc);\n        }\n        @Override\n        public String toString(int doc) throws IOException {\n          return name() + \"(\" + x.toString(doc) + \",\" + y.toString(doc) + \")\";\n        }\n      };\n    }\n\n\n    final FunctionValues[] valsArr = new FunctionValues[size];\n    for (int i = 0; i < size; i++) {\n      valsArr[i] = sources.get(i).getValues(context, readerContext);\n    }\n\n    return new FunctionValues() {\n      @Override\n      public void byteVal(int doc, byte[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].byteVal(doc);\n        }\n      }\n\n      @Override\n      public void shortVal(int doc, short[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].shortVal(doc);\n        }\n      }\n\n      @Override\n      public void floatVal(int doc, float[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].floatVal(doc);\n        }\n      }\n\n      @Override\n      public void intVal(int doc, int[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].intVal(doc);\n        }\n      }\n\n      @Override\n      public void longVal(int doc, long[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].longVal(doc);\n        }\n      }\n\n      @Override\n      public void doubleVal(int doc, double[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].doubleVal(doc);\n        }\n      }\n\n      @Override\n      public void strVal(int doc, String[] vals) throws IOException {\n        for (int i = 0; i < valsArr.length; i++) {\n          vals[i] = valsArr[i].strVal(doc);\n        }\n      }\n\n      @Override\n      public String toString(int doc) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        sb.append(name()).append('(');\n        boolean firstTime = true;\n        for (FunctionValues vals : valsArr) {\n          if (firstTime) {\n            firstTime = false;\n          } else {\n            sb.append(',');\n          }\n          sb.append(vals.toString(doc));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}