{"path":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    Random random = newRandom();\n    MockDirectoryWrapper directory = newDirectory(random);\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, false, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n\n    MockRAMDirectory directory = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          failure.clearDoFail();\n          break;\n        }\n      }\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    writer.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory, true);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testFlushExceptions().mjava","sourceNew":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Make sure running BG merges still work fine even when\n  // we are hitting exceptions during flushing.\n  public void testFlushExceptions() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    directory.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    int extraCount = 0;\n\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter=\" + i);\n      }\n\n      for(int j=0;j<20;j++) {\n        idField.setValue(Integer.toString(i*20+j));\n        writer.addDocument(doc);\n      }\n\n      // must cycle here because sometimes the merge flushes\n      // the doc we just added and so there's nothing to\n      // flush, and we don't hit the exception\n      while(true) {\n        writer.addDocument(doc);\n        failure.setDoFail();\n        try {\n          writer.flush(true, true);\n          if (failure.hitExc) {\n            fail(\"failed to hit IOException\");\n          }\n          extraCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            ioe.printStackTrace(System.out);\n          }\n          failure.clearDoFail();\n          break;\n        }\n      }\n      assertEquals(20*(i+1)+extraCount, writer.numDocs());\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    assertEquals(200+extraCount, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["132903c28af3aa6f67284b78de91c0f0a99488c2","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["d572389229127c297dd1fa5ce4758e1cec41e799"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","833a7987bc1c94455fde83e3311f72bddedcfb93"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}