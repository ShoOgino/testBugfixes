{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#DatePartEvaluator(StreamExpression,StreamFactory).mjava","commits":[{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#DatePartEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DateEvaluator#DateEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public DatePartEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    String functionName = expression.getFunctionName();\n\n    try {\n      this.function = FUNCTION.valueOf(functionName);\n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid date expression %s - expecting one of %s\",functionName, Arrays.toString(FUNCTION.values())));\n    }\n\n    fieldName = factory.getValueOperand(expression, 0);\n\n    //Taken from Field evaluator\n    if(fieldName != null && fieldName.startsWith(\"'\") && fieldName.endsWith(\"'\") && fieldName.length() > 1){\n      fieldName = fieldName.substring(1, fieldName.length() - 1);\n    }\n\n    if(1 != subEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting one value but found %d\",expression,subEvaluators.size()));\n    }\n  }\n\n","sourceOld":"  public DateEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    String functionName = expression.getFunctionName();\n\n    try {\n      this.function = FUNCTION.valueOf(functionName);\n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid date expression %s - expecting one of %s\",functionName, Arrays.toString(FUNCTION.values())));\n    }\n\n    fieldName = factory.getValueOperand(expression, 0);\n\n    //Taken from Field evaluator\n    if(fieldName != null && fieldName.startsWith(\"'\") && fieldName.endsWith(\"'\") && fieldName.length() > 1){\n      fieldName = fieldName.substring(1, fieldName.length() - 1);\n    }\n\n    if(1 != subEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting one value but found %d\",expression,subEvaluators.size()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b70b3ba150f93fa94768c7b0f2098a039ab59c5","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#DatePartEvaluator(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#DatePartEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":"  public DatePartEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    String functionName = expression.getFunctionName();\n\n    try {\n      this.function = FUNCTION.valueOf(functionName);\n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid date expression %s - expecting one of %s\", functionName, Arrays.toString(FUNCTION.values())));\n    }\n\n    if (1 != subEvaluators.size()) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting one value but found %d\", expression, subEvaluators.size()));\n    }\n  }\n\n","sourceOld":"  public DatePartEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    String functionName = expression.getFunctionName();\n\n    try {\n      this.function = FUNCTION.valueOf(functionName);\n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT,\"Invalid date expression %s - expecting one of %s\",functionName, Arrays.toString(FUNCTION.values())));\n    }\n\n    fieldName = factory.getValueOperand(expression, 0);\n\n    //Taken from Field evaluator\n    if(fieldName != null && fieldName.startsWith(\"'\") && fieldName.endsWith(\"'\") && fieldName.length() > 1){\n      fieldName = fieldName.substring(1, fieldName.length() - 1);\n    }\n\n    if(1 != subEvaluators.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting one value but found %d\",expression,subEvaluators.size()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26c62f13499437ce6143905f35f30ab19f3adf6","date":1492023891,"type":4,"author":"Gethin James","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DatePartEvaluator#DatePartEvaluator(StreamExpression,StreamFactory).mjava","sourceNew":null,"sourceOld":"  public DatePartEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {\n    super(expression, factory);\n\n    String functionName = expression.getFunctionName();\n\n    try {\n      this.function = FUNCTION.valueOf(functionName);\n    } catch (IllegalArgumentException e) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid date expression %s - expecting one of %s\", functionName, Arrays.toString(FUNCTION.values())));\n    }\n\n    if (1 != subEvaluators.size()) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - expecting one value but found %d\", expression, subEvaluators.size()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["40b789607c421011dabf36a935528a74fb8b2032"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c26c62f13499437ce6143905f35f30ab19f3adf6":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"40b789607c421011dabf36a935528a74fb8b2032":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26c62f13499437ce6143905f35f30ab19f3adf6"]},"commit2Childs":{"1b70b3ba150f93fa94768c7b0f2098a039ab59c5":["c26c62f13499437ce6143905f35f30ab19f3adf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40b789607c421011dabf36a935528a74fb8b2032"],"c26c62f13499437ce6143905f35f30ab19f3adf6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"40b789607c421011dabf36a935528a74fb8b2032":["1b70b3ba150f93fa94768c7b0f2098a039ab59c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}