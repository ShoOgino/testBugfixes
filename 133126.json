{"path":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","commits":[{"id":"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","date":1295834280,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7af39ddfe08efa20e4c56e454a0d5935a085c53","date":1304952961,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,MapField]).mjava","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","sourceNew":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, MapField> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          MapField mapField = featureFieldsmapping.get(featureName);\n          String fieldNameFeature = mapField.getFieldNameFeature();\n          String fieldNameFeatureValue = fieldNameFeature == null ? null :\n            fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));\n          String fieldName = mapField.getFieldName(fieldNameFeatureValue);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/UIMAToSolrMapper#map(String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * map features of a certain UIMA type to corresponding Solr fields based on the mapping\n   * \n   * @param typeName\n   *          name of UIMA type to map\n   * @param featureFieldsmapping\n   */\n  public void map(String typeName, Map<String, String> featureFieldsmapping) {\n    try {\n      FeatureStructure fsMock = (FeatureStructure) Class.forName(typeName).getConstructor(\n              JCas.class).newInstance(cas);\n      Type type = fsMock.getType();\n      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator\n              .hasNext();) {\n        FeatureStructure fs = iterator.next();\n        for (String featureName : featureFieldsmapping.keySet()) {\n          String fieldName = featureFieldsmapping.get(featureName);\n          log.info(new StringBuffer(\"mapping \").append(typeName).append(\"@\").append(featureName)\n                  .append(\" to \").append(fieldName).toString());\n          String featureValue = null;\n          if (fs instanceof Annotation && \"coveredText\".equals(featureName)) {\n            featureValue = ((Annotation) fs).getCoveredText();\n          } else {\n            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));\n          }\n          log.info(new StringBuffer(\"writing \").append(featureValue).append(\" in \").append(\n                  fieldName).toString());\n          document.addField(fieldName, featureValue, 1.0f);\n        }\n      }\n    } catch (Exception e) {\n      log.error(e.getLocalizedMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"a3776dccca01c11e7046323cfad46a3b4a471233":["bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7af39ddfe08efa20e4c56e454a0d5935a085c53"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca"]},"commit2Childs":{"a7af39ddfe08efa20e4c56e454a0d5935a085c53":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"bcbe885ae2ce6f06da92061ec4deebdf19cdf6ca":["a7af39ddfe08efa20e4c56e454a0d5935a085c53","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}