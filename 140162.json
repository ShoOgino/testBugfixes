{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","commits":[{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0370d6fb5289875090a50a9d0887ee584fed440"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n    \n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n    \n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n  }\n\n","bugFix":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      .withFunctionName(\"std\", StdMetric.class)\n      .withFunctionName(\"per\", PercentileMetric.class);\n\n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    //Add sorts for percentile\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"per(a_i, 50) desc, std(a_i) desc\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"std(a_i), per(a_i,50)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    double stdi = tuple.getDouble(\"std(a_i)\");\n    double peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(stdi  == 1.5275252316519468D);\n    assertTrue(peri == 12.0D);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(stdi  == 0.0D);\n    assertTrue(peri == 11.0);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(stdi  == 9.192388155425117D);\n    assertTrue(peri == 7.5D);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(stdi  == 0.0D);\n    assertTrue(peri == 4.0D);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(stdi  == 0.0D);\n    assertTrue(peri == 3.0D);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    stdi = tuple.getDouble(\"std(a_i)\");\n    peri = tuple.getDouble(\"per(a_i,50)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(stdi  == 1.4142135623730951D);\n    assertTrue(peri == 1.0D);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n    // Basic test\n    clause = \"facet(\"\n              +   \"collection1, \"\n              +   \"q=\\\"*:*\\\", \"\n              +   \"buckets=\\\"level1_s, level2_s\\\", \"\n              +   \"bucketSorts=\\\"sum(a_i) desc, sum(a_i) desc)\\\", \"\n              +   \"bucketSizeLimit=100, \"\n              +   \"sum(a_i), count(*)\"\n              + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    clause = \"facet(\"\n        +   \"collection1, \"\n        +   \"q=\\\"*:*\\\", \"\n        +   \"buckets=\\\"level1_s, level2_s\\\", \"\n        +   \"bucketSorts=\\\"level1_s desc, level2_s desc)\\\", \"\n        +   \"bucketSizeLimit=100, \"\n        +   \"sum(a_i), count(*)\"\n        + \")\";\n\n    stream = factory.constructStream(clause);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["5287d62ad5da27d35a88ada646ae7d9adfb76826","b940572a59da1b42b6c20ab5278155b12816807a"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0370d6fb5289875090a50a9d0887ee584fed440":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["5287d62ad5da27d35a88ada646ae7d9adfb76826","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["5287d62ad5da27d35a88ada646ae7d9adfb76826","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["a0370d6fb5289875090a50a9d0887ee584fed440"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"b940572a59da1b42b6c20ab5278155b12816807a":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"]},"commit2Childs":{"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"a0370d6fb5289875090a50a9d0887ee584fed440":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a0370d6fb5289875090a50a9d0887ee584fed440","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}