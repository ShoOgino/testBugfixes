{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","pathOld":"/dev/null","sourceNew":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    try {\n      CodecUtil.checkFooter(input, mine);\n      fail(\"didn't get expected exception\");\n    } catch (RuntimeException expected) {\n      assertEquals(\"fake exception\", expected.getMessage());\n      Throwable suppressed[] = expected.getSuppressed();\n      assertEquals(1, suppressed.length);\n      assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    }\n    input.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","sourceNew":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    try {\n      CodecUtil.checkFooter(input, mine);\n      fail(\"didn't get expected exception\");\n    } catch (RuntimeException expected) {\n      assertEquals(\"fake exception\", expected.getMessage());\n      Throwable suppressed[] = expected.getSuppressed();\n      assertEquals(1, suppressed.length);\n      assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    }\n    input.close();\n  }\n\n","bugFix":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValid().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","sourceNew":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testCheckFooterValid().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testCheckFooterValid().mjava","sourceNew":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    input.close();\n  }\n\n","sourceOld":"  public void testCheckFooterValid() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, true);\n    CodecUtil.writeHeader(output, \"FooBar\", 5);\n    output.writeString(\"this is the data\");\n    CodecUtil.writeFooter(output);\n    output.close();\n    \n    ChecksumIndexInput input = new BufferedChecksumIndexInput(new RAMInputStream(\"file\", file));\n    Exception mine = new RuntimeException(\"fake exception\");\n    RuntimeException expected = expectThrows(RuntimeException.class, () -> {\n      CodecUtil.checkFooter(input, mine);\n    });\n    assertEquals(\"fake exception\", expected.getMessage());\n    Throwable suppressed[] = expected.getSuppressed();\n    assertEquals(1, suppressed.length);\n    assertTrue(suppressed[0].getMessage().contains(\"checksum passed\"));\n    input.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"71488d7f5786ae87541276121ecb69705a11a295":["05fe562aa248790944d43cdd478f512572835ba0"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"05fe562aa248790944d43cdd478f512572835ba0":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["05fe562aa248790944d43cdd478f512572835ba0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}