{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object[]).mjava","commits":[{"id":"4b8166000722392fae60bb7dedf546abf7da58de","date":1572719262,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object values[]) throws IOException {\n\n    Matrix matrix = null;\n    double e = 0;\n    int minPoints = 1;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values.length < 3 || values.length > 4) {\n      throw new IOException(\"The dbscan scan function requires 3 or 4 parameters.\");\n    }\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for dbscan should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      e = ((Number)values[1]).doubleValue();\n    } else {\n      throw new IOException(\"The second parameter for dbscan should be e.\");\n    }\n\n    if(values[2] instanceof Number) {\n      minPoints = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for dbscan should be minPoints.\");\n    }\n\n    if(values.length > 3) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    }\n\n    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      if(ids != null) {\n        points.add(new ClusterPoint(ids.get(i), vec));\n      } else {\n        points.add(new ClusterPoint(Integer.toString(i), vec));\n      }\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"e\", e);\n    fields.put(\"minPoints\", minPoints);\n    fields.put(\"distance\", distanceMeasure.toString());\n\n    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ecccbbb5df38d30672b757f22eeef2050098e9","date":1576767784,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    Matrix matrix = null;\n    double e = 0;\n    int minPoints = 1;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values.length < 3 || values.length > 4) {\n      throw new IOException(\"The dbscan scan function requires 3 or 4 parameters.\");\n    }\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for dbscan should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      e = ((Number)values[1]).doubleValue();\n    } else {\n      throw new IOException(\"The second parameter for dbscan should be e.\");\n    }\n\n    if(values[2] instanceof Number) {\n      minPoints = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for dbscan should be minPoints.\");\n    }\n\n    if(values.length > 3) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    }\n\n    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      if(ids != null) {\n        points.add(new ClusterPoint(ids.get(i), vec));\n      } else {\n        points.add(new ClusterPoint(Integer.toString(i), vec));\n      }\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"e\", e);\n    fields.put(\"minPoints\", minPoints);\n    fields.put(\"distance\", distanceMeasure.toString());\n\n    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object values[]) throws IOException {\n\n    Matrix matrix = null;\n    double e = 0;\n    int minPoints = 1;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values.length < 3 || values.length > 4) {\n      throw new IOException(\"The dbscan scan function requires 3 or 4 parameters.\");\n    }\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for dbscan should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      e = ((Number)values[1]).doubleValue();\n    } else {\n      throw new IOException(\"The second parameter for dbscan should be e.\");\n    }\n\n    if(values[2] instanceof Number) {\n      minPoints = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for dbscan should be minPoints.\");\n    }\n\n    if(values.length > 3) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    }\n\n    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      if(ids != null) {\n        points.add(new ClusterPoint(ids.get(i), vec));\n      } else {\n        points.add(new ClusterPoint(Integer.toString(i), vec));\n      }\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"e\", e);\n    fields.put(\"minPoints\", minPoints);\n    fields.put(\"distance\", distanceMeasure.toString());\n\n    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DbscanEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    Matrix matrix = null;\n    double e = 0;\n    int minPoints = 1;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values.length < 3 || values.length > 4) {\n      throw new IOException(\"The dbscan scan function requires 3 or 4 parameters.\");\n    }\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for dbscan should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      e = ((Number)values[1]).doubleValue();\n    } else {\n      throw new IOException(\"The second parameter for dbscan should be e.\");\n    }\n\n    if(values[2] instanceof Number) {\n      minPoints = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for dbscan should be minPoints.\");\n    }\n\n    if(values.length > 3) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    }\n\n    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      if(ids != null) {\n        points.add(new ClusterPoint(ids.get(i), vec));\n      } else {\n        points.add(new ClusterPoint(Integer.toString(i), vec));\n      }\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"e\", e);\n    fields.put(\"minPoints\", minPoints);\n    fields.put(\"distance\", distanceMeasure.toString());\n\n    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object values[]) throws IOException {\n\n    Matrix matrix = null;\n    double e = 0;\n    int minPoints = 1;\n    DistanceMeasure distanceMeasure = new EuclideanDistance();\n\n    if(values.length < 3 || values.length > 4) {\n      throw new IOException(\"The dbscan scan function requires 3 or 4 parameters.\");\n    }\n\n    if(values[0] instanceof Matrix) {\n      matrix = (Matrix)values[0];\n    } else {\n      throw new IOException(\"The first parameter for dbscan should be the observation matrix.\");\n    }\n\n    if(values[1] instanceof Number) {\n      e = ((Number)values[1]).doubleValue();\n    } else {\n      throw new IOException(\"The second parameter for dbscan should be e.\");\n    }\n\n    if(values[2] instanceof Number) {\n      minPoints = ((Number)values[2]).intValue();\n    } else {\n      throw new IOException(\"The third parameter for dbscan should be minPoints.\");\n    }\n\n    if(values.length > 3) {\n      distanceMeasure = (DistanceMeasure)values[3];\n    }\n\n    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);\n    List<ClusterPoint> points = new ArrayList();\n    double[][] data = matrix.getData();\n    List<String> ids = matrix.getRowLabels();\n\n    for(int i=0; i<data.length; i++) {\n      double[] vec = data[i];\n      if(ids != null) {\n        points.add(new ClusterPoint(ids.get(i), vec));\n      } else {\n        points.add(new ClusterPoint(Integer.toString(i), vec));\n      }\n    }\n\n    Map fields = new HashMap();\n\n    fields.put(\"e\", e);\n    fields.put(\"minPoints\", minPoints);\n    fields.put(\"distance\", distanceMeasure.toString());\n\n    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["4b8166000722392fae60bb7dedf546abf7da58de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["4b8166000722392fae60bb7dedf546abf7da58de","a1ecccbbb5df38d30672b757f22eeef2050098e9"],"4b8166000722392fae60bb7dedf546abf7da58de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1ecccbbb5df38d30672b757f22eeef2050098e9"]},"commit2Childs":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4b8166000722392fae60bb7dedf546abf7da58de"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"4b8166000722392fae60bb7dedf546abf7da58de":["a1ecccbbb5df38d30672b757f22eeef2050098e9","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}