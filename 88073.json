{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","commits":[{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream != null) {\n        message(\"publishFlushedSegment\");  \n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream != null) {\n        message(\"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");  \n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream != null) {\n        message(\"publishFlushedSegment\");  \n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream != null) {\n        message(\"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      infoStream.message(\"IW\", \"publishFlushedSegment\");  \n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");  \n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream != null) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      infoStream.message(\"IW\", \"publishFlushedSegment\");  \n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      infoStream.message(\"IW\", \"publishFlushedSegment\");  \n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#publishFlushedSegment(SegmentInfo,FrozenBufferedDeletes,FrozenBufferedDeletes).mjava","sourceNew":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Atomically adds the segment private delete packet and publishes the flushed\n   * segments SegmentInfo to the index writer. NOTE: use\n   * {@link #prepareFlushedSegment(FlushedSegment)} to obtain the\n   * {@link SegmentInfo} for the flushed segment.\n   * \n   * @see #prepareFlushedSegment(FlushedSegment)\n   */\n  synchronized void publishFlushedSegment(SegmentInfo newSegment,\n      FrozenBufferedDeletes packet, FrozenBufferedDeletes globalPacket) throws IOException {\n    // Lock order IW -> BDS\n    synchronized (bufferedDeletesStream) {\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publishFlushedSegment\");\n      }\n      \n      if (globalPacket != null && globalPacket.any()) {\n        bufferedDeletesStream.push(globalPacket);\n      } \n      // Publishing the segment must be synched on IW -> BDS to make the sure\n      // that no merge prunes away the seg. private delete packet\n      final long nextGen;\n      if (packet != null && packet.any()) {\n        nextGen = bufferedDeletesStream.push(packet);\n      } else {\n        // Since we don't have a delete packet to apply we can get a new\n        // generation right away\n        nextGen = bufferedDeletesStream.getNextGen();\n      }\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"publish sets newSegment delGen=\" + nextGen + \" seg=\" + newSegment);\n      }\n      newSegment.setBufferedDeletesGen(nextGen);\n      segmentInfos.add(newSegment);\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f4cae61e16730201371ab7e9912721c19324e7"],"f6f4cae61e16730201371ab7e9912721c19324e7":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f","a3776dccca01c11e7046323cfad46a3b4a471233"],"f6f4cae61e16730201371ab7e9912721c19324e7":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["f6f4cae61e16730201371ab7e9912721c19324e7"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7d45e9e2ad7f57776540627c78f5e22e469ccdc1","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}