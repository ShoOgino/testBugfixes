{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final Map.Entry<String, String> entry : colForValByRound.entrySet()) {\n      String colName = entry.getValue();\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        String valByRoundName = entry.getKey();\n\n        // append actual values, for that round\n        Object a = valByRound.get(valByRoundName);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#getColsValuesForValsByRound(int).mjava","sourceNew":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final Map.Entry<String, String> entry : colForValByRound.entrySet()) {\n      String colName = entry.getValue();\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        String valByRoundName = entry.getKey();\n\n        // append actual values, for that round\n        Object a = valByRound.get(valByRoundName);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * @return values of params set by round, for reports lines.\n   */\n  public String getColsValuesForValsByRound(int roundNum) {\n    if (colForValByRound.size() == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for (final String name : colForValByRound.keySet()) {\n      String colName = colForValByRound.get(name);\n      String template = \" \" + colName;\n      if (roundNum < 0) {\n        // just append blanks\n        sb.append(Format.formatPaddLeft(\"-\", template));\n      } else {\n        // append actual values, for that round\n        Object a = valByRound.get(name);\n        if (a instanceof int[]) {\n          int ai[] = (int[]) a;\n          int n = roundNum % ai.length;\n          sb.append(Format.format(ai[n], template));\n        } else if (a instanceof double[]) {\n          double ad[] = (double[]) a;\n          int n = roundNum % ad.length;\n          sb.append(Format.format(2, ad[n], template));\n        } else if (a instanceof String[]) {\n          String ad[] = (String[]) a;\n          int n = roundNum % ad.length;\n          sb.append(ad[n]);\n        } else {\n          boolean ab[] = (boolean[]) a;\n          int n = roundNum % ab.length;\n          sb.append(Format.formatPaddLeft(\"\" + ab[n], template));\n        }\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}