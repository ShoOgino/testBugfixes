{"path":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","commits":[{"id":"3beec0828e9973095a4de926b078ebc3bdbfd2aa","date":1464816871,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#getSSLRandomizerForClass(Class).mjava","sourceNew":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(@SuppressWarnings({\"rawtypes\"})Class clazz) {\n\n      @SuppressWarnings({\"unchecked\"})\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","sourceOld":"    /**\n     * Returns an SSLRandomizer suitable for the specified (test) class\n     */\n    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {\n\n      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);\n      if (null != suppression) {\n        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a\n        // super class -- overrules that.\n        //\n        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a\n        // broad hierarchy of tests)\n        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());\n      }\n\n      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);\n      \n      if (null == annotation) {\n        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + \" annotation not specified\");\n      }\n\n      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();\n      if (def < 0.0D || 1.0D < def) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": default value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();\n      if (ssl < 0.0D || 1.0D < ssl) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": ssl value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();\n      if (clientAuth < 0.0D || 1 < clientAuth) {\n        throw new IllegalArgumentException\n          (clazz.getName() + \": clientAuth value is not a ratio between 0 and 1: \" + annotation.toString());\n      }\n      return new SSLRandomizer(ssl, clientAuth, annotation.toString());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["1f69e96b07e265f3e18957be540909b01fae36f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f69e96b07e265f3e18957be540909b01fae36f8":["6809a6d7924df2c864d6a5863944aff9dfeb372c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}