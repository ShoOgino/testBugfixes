{"path":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"    /** Prints a user-readable version of this query. */\n    public String toString(String field)\n    {\n        StringBuffer buffer = new StringBuffer();\n        if (!getField().equals(field))\n        {\n            buffer.append(getField());\n            buffer.append(\":\");\n        }\n        buffer.append(inclusive ? \"[\" : \"{\");\n        buffer.append(lowerTerm != null ? lowerTerm.text() : \"null\");\n        buffer.append(\" TO \");\n        buffer.append(upperTerm != null ? upperTerm.text() : \"null\");\n        buffer.append(inclusive ? \"]\" : \"}\");\n        if (getBoost() != 1.0f)\n        {\n            buffer.append(\"^\");\n            buffer.append(Float.toString(getBoost()));\n        }\n        return buffer.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","sourceNew":"    /** Prints a user-readable version of this query. */\n    public String toString(String field)\n    {\n        StringBuffer buffer = new StringBuffer();\n        if (!getField().equals(field))\n        {\n            buffer.append(getField());\n            buffer.append(\":\");\n        }\n        buffer.append(inclusive ? \"[\" : \"{\");\n        buffer.append(lowerTerm != null ? lowerTerm.text() : \"null\");\n        buffer.append(\" TO \");\n        buffer.append(upperTerm != null ? upperTerm.text() : \"null\");\n        buffer.append(inclusive ? \"]\" : \"}\");\n        buffer.append(ToStringUtils.boost(getBoost()));\n        return buffer.toString();\n    }\n\n","sourceOld":"    /** Prints a user-readable version of this query. */\n    public String toString(String field)\n    {\n        StringBuffer buffer = new StringBuffer();\n        if (!getField().equals(field))\n        {\n            buffer.append(getField());\n            buffer.append(\":\");\n        }\n        buffer.append(inclusive ? \"[\" : \"{\");\n        buffer.append(lowerTerm != null ? lowerTerm.text() : \"null\");\n        buffer.append(\" TO \");\n        buffer.append(upperTerm != null ? upperTerm.text() : \"null\");\n        buffer.append(inclusive ? \"]\" : \"}\");\n        if (getBoost() != 1.0f)\n        {\n            buffer.append(\"^\");\n            buffer.append(Float.toString(getBoost()));\n        }\n        return buffer.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n      StringBuffer buffer = new StringBuffer();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm.text() : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm.text() : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      if (getBoost() != 1.0f) {\n          buffer.append(\"^\");\n          buffer.append(Float.toString(getBoost()));\n      }\n      return buffer.toString();\n  }\n\n","sourceOld":"    /** Prints a user-readable version of this query. */\n    public String toString(String field)\n    {\n        StringBuffer buffer = new StringBuffer();\n        if (!getField().equals(field))\n        {\n            buffer.append(getField());\n            buffer.append(\":\");\n        }\n        buffer.append(inclusive ? \"[\" : \"{\");\n        buffer.append(lowerTerm != null ? lowerTerm.text() : \"null\");\n        buffer.append(\" TO \");\n        buffer.append(upperTerm != null ? upperTerm.text() : \"null\");\n        buffer.append(inclusive ? \"]\" : \"}\");\n        buffer.append(ToStringUtils.boost(getBoost()));\n        return buffer.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n      StringBuffer buffer = new StringBuffer();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n      StringBuffer buffer = new StringBuffer();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm.text() : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm.text() : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      if (getBoost() != 1.0f) {\n          buffer.append(\"^\");\n          buffer.append(Float.toString(getBoost()));\n      }\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    return delegate.toString(field);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#toString(String).mjava","sourceNew":null,"sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String field) {\n    return delegate.toString(field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["df8dadf22de84eeb1294e70792e292ecf8ded564"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}