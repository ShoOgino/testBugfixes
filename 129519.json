{"path":"backwards/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldInfos#write(IndexOutput).mjava","sourceNew":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","sourceOld":"  public void write(IndexOutput output) throws IOException {\n    output.writeVInt(CURRENT_FORMAT);\n    output.writeVInt(size());\n    for (int i = 0; i < size(); i++) {\n      FieldInfo fi = fieldInfo(i);\n      byte bits = 0x0;\n      if (fi.isIndexed) bits |= IS_INDEXED;\n      if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n      if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n      if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n      if (fi.omitNorms) bits |= OMIT_NORMS;\n      if (fi.storePayloads) bits |= STORE_PAYLOADS;\n      if (fi.omitTermFreqAndPositions) bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n      \n      output.writeString(fi.name);\n      output.writeByte(bits);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}