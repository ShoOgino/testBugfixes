{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with {@link PackedInts#DEFAULT}\n   * <code>acceptableOverheadRatio</code>.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n      boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n      FreezeTail<T> freezeTail, boolean willPackFST) {\n    this(inputType, minSuffixCount1, minSuffixCount2, doShareSuffix, doShareNonSingletonNodes,\n        shareMaxTailLength, outputs, freezeTail, willPackFST, PackedInts.DEFAULT);\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"}) final UnCompiledNode<T>[] f =\n        (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with {@link PackedInts#DEFAULT}\n   * <code>acceptableOverheadRatio</code>.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n      boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n      FreezeTail<T> freezeTail, boolean willPackFST, boolean allowArrayArcs) {\n    this(inputType, minSuffixCount1, minSuffixCount2, doShareSuffix, doShareNonSingletonNodes,\n         shareMaxTailLength, outputs, freezeTail, willPackFST, PackedInts.DEFAULT, allowArrayArcs);\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with {@link PackedInts#DEFAULT}\n   * <code>acceptableOverheadRatio</code>.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n      boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n      FreezeTail<T> freezeTail, boolean willPackFST) {\n    this(inputType, minSuffixCount1, minSuffixCount2, doShareSuffix, doShareNonSingletonNodes,\n        shareMaxTailLength, outputs, freezeTail, willPackFST, PackedInts.DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with {@link PackedInts#DEFAULT}\n   * <code>acceptableOverheadRatio</code>.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n      boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n      FreezeTail<T> freezeTail, boolean willPackFST, boolean allowArrayArcs) {\n    this(inputType, minSuffixCount1, minSuffixCount2, doShareSuffix, doShareNonSingletonNodes,\n         shareMaxTailLength, outputs, freezeTail, willPackFST, PackedInts.DEFAULT, allowArrayArcs);\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with {@link PackedInts#DEFAULT}\n   * <code>acceptableOverheadRatio</code>.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n      boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n      FreezeTail<T> freezeTail, boolean willPackFST) {\n    this(inputType, minSuffixCount1, minSuffixCount2, doShareSuffix, doShareNonSingletonNodes,\n        shareMaxTailLength, outputs, freezeTail, willPackFST, PackedInts.DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["edb74c83fff94196b864e08ca033d92823252cb7"],"edb74c83fff94196b864e08ca033d92823252cb7":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["edb74c83fff94196b864e08ca033d92823252cb7","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb8af2aec0a8574cf50cad6939d4475179595eca"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","edb74c83fff94196b864e08ca033d92823252cb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"edb74c83fff94196b864e08ca033d92823252cb7":["fb8af2aec0a8574cf50cad6939d4475179595eca","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}