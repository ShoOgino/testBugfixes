{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testMatchAllMustNot().mjava","commits":[{"id":"60fd173dead1b592384cfdd316dd645e39cac051","date":1472196529,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testMatchAllMustNot().mjava","pathOld":"/dev/null","sourceNew":"  // MatchAllQuery as MUST_NOT clause cannot return anything\n  public void testMatchAllMustNot() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // Test Must with MatchAll MustNot\n    BooleanQuery bq = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq));\n\n    // Test Must with MatchAll MustNot and other MustNot\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new TermQuery(new Term(\"foo\", \"bor\")), Occur.MUST_NOT)\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testMatchAllMustNot().mjava","pathOld":"/dev/null","sourceNew":"  // MatchAllQuery as MUST_NOT clause cannot return anything\n  public void testMatchAllMustNot() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // Test Must with MatchAll MustNot\n    BooleanQuery bq = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq));\n\n    // Test Must with MatchAll MustNot and other MustNot\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new TermQuery(new Term(\"foo\", \"bor\")), Occur.MUST_NOT)\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testMatchAllMustNot().mjava","pathOld":"/dev/null","sourceNew":"  // MatchAllQuery as MUST_NOT clause cannot return anything\n  public void testMatchAllMustNot() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    // Test Must with MatchAll MustNot\n    BooleanQuery bq = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq));\n\n    // Test Must with MatchAll MustNot and other MustNot\n    BooleanQuery bq2 = new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n            .add(new TermQuery(new Term(\"foo\", \"bad\")), Occur.SHOULD)\n            //\n            .add(new TermQuery(new Term(\"foo\", \"bor\")), Occur.MUST_NOT)\n            .add(new MatchAllDocsQuery(), Occur.MUST_NOT)\n            .build();\n\n    assertEquals(new MatchNoDocsQuery(), searcher.rewrite(bq2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60fd173dead1b592384cfdd316dd645e39cac051"],"60fd173dead1b592384cfdd316dd645e39cac051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","60fd173dead1b592384cfdd316dd645e39cac051","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60fd173dead1b592384cfdd316dd645e39cac051":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}