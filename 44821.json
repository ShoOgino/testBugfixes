{"path":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","commits":[{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode)\n        .process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"304f96432900b87c4a4ad647fa8cccb9290fc238","date":1535688720,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","sourceNew":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","sourceOld":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode)\n        .process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","sourceNew":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","sourceOld":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","sourceNew":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","sourceOld":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestWithCollection#testMoveReplicaMainCollection().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testMoveReplicaMainCollection() throws Exception {\n    String prefix = \"testMoveReplicaMainCollection\";\n    String xyz = prefix + \"_xyz\";\n    String abc = prefix + \"_abc\";\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'node':'#ANY'},\" +\n        \"    ]\" +\n        \"}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    solrClient.request(req);\n\n    String chosenNode = cluster.getRandomJetty(random()).getNodeName();\n    log.info(\"Chosen node {} for collection {}\", chosenNode, abc);\n    CollectionAdminRequest.createCollection(abc, 1, 1)\n        .setCreateNodeSet(chosenNode) // randomize to avoid choosing the first node always\n        .process(solrClient);\n    CollectionAdminRequest.createCollection(xyz, 1, 1)\n        .setWithCollection(abc)\n        .process(solrClient);\n\n    String otherNode = null;\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      if (!chosenNode.equals(jettySolrRunner.getNodeName())) {\n        otherNode = jettySolrRunner.getNodeName();\n      }\n    }\n\n    DocCollection collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz);\n    DocCollection withCollection = solrClient.getZkStateReader().getClusterState().getCollection(abc);\n    assertNull(collection.getReplicas(otherNode)); // sanity check\n    assertNull(withCollection.getReplicas(otherNode)); // sanity check\n\n    CollectionAdminRequest.MoveReplica moveReplica = new CollectionAdminRequest.MoveReplica(xyz, collection.getReplicas().iterator().next().getName(), otherNode);\n    moveReplica.setWaitForFinalState(true);\n    moveReplica.process(solrClient);\n//    zkClient().printLayoutToStdOut();\n    collection = solrClient.getZkStateReader().getClusterState().getCollection(xyz); // refresh\n    DocCollection withCollectionRefreshed = solrClient.getZkStateReader().getClusterState().getCollection(abc); // refresh\n    assertTrue(collection.getReplicas().stream().noneMatch(\n        replica -> withCollectionRefreshed.getReplicas(replica.getNodeName()) == null\n            || withCollectionRefreshed.getReplicas(replica.getNodeName()).isEmpty()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"304f96432900b87c4a4ad647fa8cccb9290fc238":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["304f96432900b87c4a4ad647fa8cccb9290fc238"],"27639bb5e041490ce599065875dd2f6d8beef62a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"304f96432900b87c4a4ad647fa8cccb9290fc238":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27639bb5e041490ce599065875dd2f6d8beef62a"],"89948af0461fead48f44ba8fb7866f107ce83f22":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"27639bb5e041490ce599065875dd2f6d8beef62a":["304f96432900b87c4a4ad647fa8cccb9290fc238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}