{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    FileSystem fs = null;\n    try {\n      fs = FileSystem.newInstance(lockPath.toUri(), configuration);\n      \n      if (fs.exists(lockPath)) {\n        if (lockPrefix != null) {\n          lockName = lockPrefix + \"-\" + lockName;\n        }\n        \n        Path lockFile = new Path(lockPath, lockName);\n\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new IOException(\"Cannot delete \" + lockFile);\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c88c33fee958027b9192ef2c6bb54836618b165"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    FileSystem fs = null;\n    try {\n      fs = FileSystem.newInstance(lockPath.toUri(), configuration);\n      \n      if (fs.exists(lockPath)) {\n        if (lockPrefix != null) {\n          lockName = lockPrefix + \"-\" + lockName;\n        }\n        \n        Path lockFile = new Path(lockPath, lockName);\n\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new IOException(\"Cannot delete \" + lockFile);\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c88c33fee958027b9192ef2c6bb54836618b165","date":1390430350,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","sourceNew":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    FileSystem fs = null;\n    try {\n      fs = FileSystem.newInstance(lockPath.toUri(), configuration);\n      while (true) {\n        if (fs.exists(lockPath)) {\n          if (lockPrefix != null) {\n            lockName = lockPrefix + \"-\" + lockName;\n          }\n          \n          Path lockFile = new Path(lockPath, lockName);\n          try {\n            if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n              throw new IOException(\"Cannot delete \" + lockFile);\n            }\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            throw e;\n          }\n          break;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    FileSystem fs = null;\n    try {\n      fs = FileSystem.newInstance(lockPath.toUri(), configuration);\n      \n      if (fs.exists(lockPath)) {\n        if (lockPrefix != null) {\n          lockName = lockPrefix + \"-\" + lockName;\n        }\n        \n        Path lockFile = new Path(lockPath, lockName);\n\n        if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n          throw new IOException(\"Cannot delete \" + lockFile);\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLockFactory#clearLock(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void clearLock(String lockName) throws IOException {\n    FileSystem fs = null;\n    try {\n      fs = FileSystem.newInstance(lockPath.toUri(), configuration);\n      while (true) {\n        if (fs.exists(lockPath)) {\n          if (lockPrefix != null) {\n            lockName = lockPrefix + \"-\" + lockName;\n          }\n          \n          Path lockFile = new Path(lockPath, lockName);\n          try {\n            if (fs.exists(lockFile) && !fs.delete(lockFile, false)) {\n              throw new IOException(\"Cannot delete \" + lockFile);\n            }\n          } catch (RemoteException e) {\n            if (e.getClassName().equals(\n                \"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n              log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n              try {\n                Thread.sleep(5000);\n              } catch (InterruptedException e1) {\n                Thread.interrupted();\n              }\n              continue;\n            }\n            throw e;\n          }\n          break;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(fs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c88c33fee958027b9192ef2c6bb54836618b165":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"285cdc737de75b7cc7c284a156b20214deb67bca":["7c88c33fee958027b9192ef2c6bb54836618b165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7c88c33fee958027b9192ef2c6bb54836618b165","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"7c88c33fee958027b9192ef2c6bb54836618b165":["285cdc737de75b7cc7c284a156b20214deb67bca"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}