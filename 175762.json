{"path":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ) );\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ) );\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcbe407b62ce0c91dc171a4695a9f442c46ce14","date":1323729111,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = new DefaultSolrParams( params, new MapSolrParams( dmap ) );\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<String, String>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<String, String>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFloat( \"f.bad.float\" ); } } ) );\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.get( \"aaaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"f.bad.int\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"f.bad.bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"f.bad.float\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getInt(   \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getBool(  \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { required.getFloat( \"aaa\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldBool(  \"bad\", \"bool\" ); } } ) );\n    assertEquals( 400, getReturnCode( new Runnable() { @Override\n    public void run() { params.getFieldInt(   \"bad\", \"int\"  ); } } ) );\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4958642f967bfbd6f083ddf50f141bcde89b9ec1","date":1489572234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bca83a747f8e297ee4412c0d18bdd3a98c09df3b","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool.booleanValue()  , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool.booleanValue()  , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = 100;\n    final Float   pfloat = 10.6f;\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals(Integer.valueOf(123), defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = 100;\n    final Float   pfloat = 10.6f;\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals(Integer.valueOf(123), defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetParams().mjava","sourceNew":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = 100;\n    final Float   pfloat = 10.6f;\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals(Integer.valueOf(123), defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","sourceOld":"  public void testGetParams() {\n    Map<String,String> pmap = new HashMap<>();\n    pmap.put( \"str\"        , \"string\"   );\n    pmap.put( \"bool\"       , \"true\"     );\n    pmap.put( \"true-0\"     , \"true\"     );\n    pmap.put( \"true-1\"     , \"yes\"      );\n    pmap.put( \"true-2\"     , \"on\"       );\n    pmap.put( \"false-0\"    , \"false\"    );\n    pmap.put( \"false-1\"    , \"off\"      );\n    pmap.put( \"false-2\"    , \"no\"       );\n    pmap.put( \"int\"        , \"100\"      );\n    pmap.put( \"float\"      , \"10.6\"     );\n    pmap.put( \"f.fl.str\"   , \"string\"   );\n    pmap.put( \"f.fl.bool\"  , \"true\"     );\n    pmap.put( \"f.fl.int\"   , \"100\"      );\n    pmap.put( \"f.fl.float\" , \"10.6\"     );\n    pmap.put( \"f.bad.bool\" , \"notbool\"  );\n    pmap.put( \"f.bad.int\"  , \"notint\"   );\n    pmap.put( \"f.bad.float\", \"notfloat\" );\n    final SolrParams params = new MapSolrParams( pmap );\n    \n    // Test the string values we put in directly\n    assertEquals(  \"string\"   , params.get( \"str\"       ) );\n    assertEquals(  \"true\"     , params.get( \"bool\"      ) );\n    assertEquals(  \"100\"      , params.get( \"int\"       ) );\n    assertEquals(  \"10.6\"     , params.get( \"float\"     ) );\n    assertEquals(  \"string\"   , params.get( \"f.fl.str\"    ) );\n    assertEquals(  \"true\"     , params.get( \"f.fl.bool\"   ) );\n    assertEquals(  \"100\"      , params.get( \"f.fl.int\"    ) );\n    assertEquals(  \"10.6\"     , params.get( \"f.fl.float\"  ) );\n    assertEquals(  \"notbool\"  , params.get( \"f.bad.bool\"  ) );\n    assertEquals(  \"notint\"   , params.get( \"f.bad.int\"   ) );\n    assertEquals(  \"notfloat\" , params.get( \"f.bad.float\" ) );\n    \n    final String  pstr = \"string\";\n    final Boolean pbool = Boolean.TRUE;\n    final Integer pint = new Integer( 100 );\n    final Float   pfloat = new Float( 10.6f );\n    \n    // Make sure they parse ok\n    assertEquals( pstr   , params.get(      \"str\"      ) );\n    assertEquals( pbool  , params.getBool(  \"bool\"     ) );\n    assertEquals( pint   , params.getInt(   \"int\"      ) );\n    assertEquals( pfloat , params.getFloat( \"float\"    ) );\n    assertEquals( pbool  , params.getBool(  \"f.fl.bool\"  ) );\n    assertEquals( pint   , params.getInt(   \"f.fl.int\"   ) );\n    assertEquals( pfloat , params.getFloat( \"f.fl.float\" ) );\n    assertEquals( pstr   , params.getFieldParam( \"fl\", \"str\"  ) );\n    assertEquals( pbool  , params.getFieldBool(  \"fl\", \"bool\" ) );\n    assertEquals( pint   , params.getFieldInt(   \"fl\", \"int\"  ) );\n    assertEquals( pfloat , params.getFieldFloat( \"fl\", \"float\" ) );\n    \n    // Test field defaulting (fall through to non-field-specific value)\n    assertEquals( pint   , params.getFieldInt( \"fff\",  \"int\"      ) );\n    \n    // test boolean parsing\n    for( int i=0; i<3; i++ ) {\n      // Must use Boolean rather than boolean reference value to prevent\n      // auto-unboxing ambiguity\n      assertEquals( Boolean.TRUE,  params.getBool( \"true-\"+i  ) );\n      assertEquals( Boolean.FALSE, params.getBool( \"false-\"+i ) );\n    }\n    \n    // Malformed params: These should throw a 400\n    assertEquals(400, getReturnCode(() -> params.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> params.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFloat(\"f.bad.float\")));\n    \n    // Ask for params that arent there\n    assertNull( params.get( \"asagdsaga\" ) );\n    assertNull( params.getBool( \"asagdsaga\" ) );\n    assertNull( params.getInt( \"asagdsaga\" ) );\n    assertNull( params.getFloat( \"asagdsaga\" ) );\n    \n    // Get things with defaults\n    assertEquals( pstr                  , params.get(          \"xxx\", pstr   ) );\n    assertEquals( pbool                 , params.getBool(      \"xxx\", pbool   ) );\n    assertEquals( pint.intValue()       , params.getInt(       \"xxx\", pint   ) );\n    assertEquals( pfloat.floatValue()   , params.getFloat(     \"xxx\", pfloat  ), 0.1);\n    assertEquals( pbool                 , params.getFieldBool( \"xxx\", \"bool\", pbool ) );\n    assertEquals( pint.intValue()       , params.getFieldInt(  \"xxx\", \"int\", pint  ) );\n    assertEquals( pfloat.floatValue()   , params.getFieldFloat(\"xxx\", \"float\", pfloat  ), 0.1);\n    assertEquals( pstr                  , params.getFieldParam(\"xxx\", \"str\", pstr  ) );\n\n    // Required params testing uses decorator\n    final SolrParams required = params.required();\n    \n    // Required params which are present should test same as above\n    assertEquals( pstr   , required.get(      \"str\"      ) );\n    assertEquals( pbool  , required.getBool(  \"bool\"     ) );\n    assertEquals( pint   , required.getInt(   \"int\"      ) );\n    assertEquals( pfloat , required.getFloat( \"float\"    ) );\n    \n    // field value present\n    assertEquals( pbool  , required.getFieldBool(  \"fl\", \"bool\" ) );\n    // field defaulting (fall through to non-field-specific value)\n    assertEquals( pstr   , required.getFieldParams(\"fakefield\", \"str\")[0] );\n    assertEquals( pstr   , required.getFieldParam( \"fakefield\", \"str\"   ) );\n    assertEquals( pbool  , required.getFieldBool(  \"fakefield\", \"bool\"  ) );\n    assertEquals( pint   , required.getFieldInt(   \"fakefield\", \"int\"   ) );\n    assertEquals( pfloat , required.getFieldFloat( \"fakefield\", \"float\" ) );\n    \n    // Required params which are missing: These should throw a 400\n    assertEquals(400, getReturnCode(() -> required.get(\"aaaa\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"f.bad.int\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"f.bad.bool\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"f.bad.float\")));\n    assertEquals(400, getReturnCode(() -> required.getInt(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getBool(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> required.getFloat(\"aaa\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldBool(\"bad\", \"bool\")));\n    assertEquals(400, getReturnCode(() -> params.getFieldInt(\"bad\", \"int\")));\n\n    // Fields with default use their parent value:\n    assertEquals(\n        params.get(   \"aaaa\", \"str\" ), \n        required.get( \"aaaa\", \"str\" ) );\n    assertEquals(\n        params.getInt(   \"f.bad.nnnn\", pint ), \n        required.getInt( \"f.bad.nnnn\", pint ) );\n    \n    // Check default SolrParams\n    Map<String,String> dmap = new HashMap<>();\n    // these are not defined in params\n    dmap.put( \"dstr\"               , \"default\"   );\n    dmap.put( \"dint\"               , \"123\"       );\n    // these are defined in params\n    dmap.put( \"int\"                , \"456\"       );\n    SolrParams defaults = SolrParams.wrapDefaults(params, new MapSolrParams(dmap));\n  \n    // in params, not in default\n    assertEquals( pstr                  , defaults.get( \"str\"      ) );\n    // in default, not in params\n    assertEquals( \"default\"             , defaults.get( \"dstr\"      ) );\n    assertEquals( new Integer(123)      , defaults.getInt(  \"dint\"     ) );\n    // in params, overriding defaults\n    assertEquals( pint                  , defaults.getInt(   \"int\"      ) );\n    // in neither params nor defaults\n    assertNull( defaults.get( \"asagdsaga\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0dcbe407b62ce0c91dc171a4695a9f442c46ce14","7530de27b87b961b51f01bd1299b7004d46e8823"],"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["3a0c04b71951333291abc7f317109a6a5957bd28"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["4958642f967bfbd6f083ddf50f141bcde89b9ec1"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["58f6129aa3cc4d7092fe2dacee662b263fb66e94","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a0c04b71951333291abc7f317109a6a5957bd28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["3a0c04b71951333291abc7f317109a6a5957bd28"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"ab68488225b6a6c357dda72ed11dedca9914a192":["3a0c04b71951333291abc7f317109a6a5957bd28","bca83a747f8e297ee4412c0d18bdd3a98c09df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","628903f37b6c442da0d390db1c6af9a0e74d41a7","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a0c04b71951333291abc7f317109a6a5957bd28"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0dcbe407b62ce0c91dc171a4695a9f442c46ce14"],"c26f00b574427b55127e869b935845554afde1fa":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"3a0c04b71951333291abc7f317109a6a5957bd28":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","bca83a747f8e297ee4412c0d18bdd3a98c09df3b","ab68488225b6a6c357dda72ed11dedca9914a192"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0dcbe407b62ce0c91dc171a4695a9f442c46ce14":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4ceb6a6c707ada1df8bde804e25c98668e699a18","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4ceb6a6c707ada1df8bde804e25c98668e699a18","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}