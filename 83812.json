{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      return null;\n    }\n    \n    // TODO: refactor\n    if (fieldInfo.storePayloads) {\n      SegmentDocsAndPositionsAndPayloadsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsAndPayloadsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsAndPayloadsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsAndPayloadsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    } else {\n      SegmentDocsAndPositionsEnum docsEnum;\n      if (reuse == null || !(reuse instanceof SegmentDocsAndPositionsEnum)) {\n        docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n      } else {\n        docsEnum = (SegmentDocsAndPositionsEnum) reuse;\n        if (docsEnum.startFreqIn != freqIn) {\n          // If you are using ParellelReader, and pass in a\n          // reused DocsEnum, it could have come from another\n          // reader also using standard codec\n          docsEnum = new SegmentDocsAndPositionsEnum(freqIn, proxIn);\n        }\n      }\n      return docsEnum.reset(fieldInfo, (StandardTermState) termState, liveDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}