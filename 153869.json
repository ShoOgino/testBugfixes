{"path":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","commits":[{"id":"3e3012422dc32dea6ba382250d426d06361606c3","date":1260567401,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7adea379ca28e367e6726634db1cebeb14483ee9","date":1260658827,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    //test some bad vals\n    try {\n      sort = QueryParsing.parseSort(\"weight, desc\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n      //expected\n    }\n    try {\n      sort = QueryParsing.parseSort(\"weight desc, bday\", schema);\n      assertTrue(false);\n    } catch (SolrException e) {\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5eeff6b8391d7b5e70e37193643d76c05a3abf75","f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c072979741a04848324e4e51ae44d2975855f781","date":1267453665,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":["f7e2c5596ef3fbb03572368a66afb40a500404ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","pathOld":"src/test/org/apache/solr/search/QueryParsingTest#testSort().mjava","sourceNew":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","sourceOld":"  public void testSort() throws Exception {\n    Sort sort;\n\n    IndexSchema schema = h.getCore().getSchema();\n    sort = QueryParsing.parseSort(\"score desc\", schema);\n    assertNull(\"sort\", sort);//only 1 thing in the list, no Sort specified\n\n    sort = QueryParsing.parseSort(\"score asc\", schema);\n    SortField[] flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.SCORE);\n    assertTrue(flds[0].getReverse());\n\n    sort = QueryParsing.parseSort(\"weight desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    sort = QueryParsing.parseSort(\"weight desc,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    //order aliases\n    sort = QueryParsing.parseSort(\"weight top,bday asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n    sort = QueryParsing.parseSort(\"weight top,bday bottom\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[0].getReverse(), true);\n    assertEquals(flds[1].getType(), SortField.LONG);\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getReverse(), false);\n\n    //test weird spacing\n    sort = QueryParsing.parseSort(\"weight         desc,            bday         asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n    assertEquals(flds[1].getField(), \"bday\");\n    assertEquals(flds[1].getType(), SortField.LONG);\n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    //test functions\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n    \n    //test functions (more deep)\n    sort = QueryParsing.parseSort(\"sum(product(r_f,sum(d_f,t_f,1)),a_f) asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    assertEquals(flds[0].getField(), \"sum(product(float(r_f),sum(float(d_f),float(t_f),const(1.0))),float(a_f))\");\n\n    sort = QueryParsing.parseSort(\"pow(weight,                 2)         desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n\n    sort = QueryParsing.parseSort(\"pow(weight, 2) desc, weight    desc,   bday    asc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n\n    //Not thrilled about the fragility of string matching here, but...\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"pow(float(weight),const(2.0))\");\n\n    assertEquals(flds[1].getType(), SortField.FLOAT);\n    assertEquals(flds[1].getField(), \"weight\");\n    assertEquals(flds[2].getField(), \"bday\");\n    assertEquals(flds[2].getType(), SortField.LONG);\n    \n    //handles trailing commas\n    sort = QueryParsing.parseSort(\"weight desc,\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.FLOAT);\n    assertEquals(flds[0].getField(), \"weight\");\n\n    try {\n      //bad number of parens, but the function parser can handle an extra close\n      sort = QueryParsing.parseSort(\"pow(weight,2)) desc, bday asc\", schema);\n    } catch (SolrException e) {\n      assertTrue(false);\n    }\n    //Test literals in functions\n    sort = QueryParsing.parseSort(\"strdist(foo_s, \\\"junk\\\", jw) desc\", schema);\n    flds = sort.getSort();\n    assertEquals(flds[0].getType(), SortField.CUSTOM);\n    //the value sources get wrapped, so the out field is different than the input\n    assertEquals(flds[0].getField(), \"strdist(str(foo_s),literal(junk), dist=org.apache.lucene.search.spell.JaroWinklerDistance)\");\n\n    sort = QueryParsing.parseSort(\"\", schema);\n    assertNull(sort);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e3012422dc32dea6ba382250d426d06361606c3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7adea379ca28e367e6726634db1cebeb14483ee9":["3e3012422dc32dea6ba382250d426d06361606c3"],"ad94625fb8d088209f46650c8097196fec67f00c":["c072979741a04848324e4e51ae44d2975855f781"],"c072979741a04848324e4e51ae44d2975855f781":["7adea379ca28e367e6726634db1cebeb14483ee9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e3012422dc32dea6ba382250d426d06361606c3":["7adea379ca28e367e6726634db1cebeb14483ee9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3e3012422dc32dea6ba382250d426d06361606c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7adea379ca28e367e6726634db1cebeb14483ee9":["c072979741a04848324e4e51ae44d2975855f781"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c072979741a04848324e4e51ae44d2975855f781":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}