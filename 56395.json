{"path":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#manyValuesMonsterHLLSerializationTest().mjava","commits":[{"id":"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2","date":1440606819,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/HLLSerializationTest#manyValuesMonsterHLLSerializationTest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A smoke-test that covers serialization/deserialization of a (single) HLL\n   * with random the max possible numeric init parameters, with randomized values for the other params.\n   *\n   * @see #monsterHLLSerializationTest\n   */\n  @Test\n  @Slow\n  @Monster(\"can require as much as -Dtests.heapsize=4g because of the massive data structs\")\n  public void manyValuesMonsterHLLSerializationTest() throws Exception {\n\n    final HLLType[] ALL_TYPES = EnumSet.allOf(HLLType.class).toArray(new HLLType[0]);\n    Arrays.sort(ALL_TYPES);\n      \n    final boolean sparse = random().nextBoolean();\n    final HLLType type = ALL_TYPES[TestUtil.nextInt(random(), 0, ALL_TYPES.length-1)];\n    \n    HLL hll = new HLL(MAXIMUM_LOG2M_PARAM, MAXIMUM_REGWIDTH_PARAM, MAXIMUM_EXPTHRESH_PARAM, sparse, type);\n\n    final long NUM_VALS = TestUtil.nextLong(random(), 150000, 1000000);\n    final long MIN_VAL = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE-NUM_VALS);\n    final long MAX_VAL = MIN_VAL + NUM_VALS;\n    assert MIN_VAL < MAX_VAL;\n    \n    for (long val = MIN_VAL; val < MAX_VAL; val++) {\n      hll.addRaw(val);\n    }\n    \n    final long expectedCardinality = hll.cardinality();\n    final HLLType expectedType = hll.getType();\n\n    byte[] serializedData = hll.toBytes();\n    hll = null; // allow some GC\n    \n    HLL copy = HLL.fromBytes(serializedData);\n    serializedData = null; // allow some GC\n    \n    assertEquals(expectedCardinality, copy.cardinality());\n    assertEquals(expectedType, copy.getType());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"]},"commit2Childs":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}