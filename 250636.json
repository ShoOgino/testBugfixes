{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#fromString(int,BytesRef,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#fromString(int,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#fromString(int,BytesRef,int).mjava","sourceNew":"    public void fromString(int ord, BytesRef ref, int offset) {\n      switch (type) {\n      case FIXED_INTS_16:\n        assert shorts != null;\n        shorts[ord] = Short.parseShort(readString(offset, ref));\n        break;\n      case FIXED_INTS_32:\n        assert ints != null;\n        ints[ord] = Integer.parseInt(readString(offset, ref));\n        break;\n      case FIXED_INTS_64:\n      case VAR_INTS:\n        assert longs != null;\n        longs[ord] = Long.parseLong(readString(offset, ref));\n        break;\n      case FIXED_INTS_8:\n        assert bytes != null;\n        bytes[ord] = (byte) Integer.parseInt(readString(offset, ref));\n        break;\n      case FLOAT_32:\n        assert floats != null;\n        floats[ord] = Float.parseFloat(readString(offset, ref));\n        break;\n      case FLOAT_64:\n        assert doubles != null;\n        doubles[ord] = Double.parseDouble(readString(offset, ref));\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.bytes = ref.bytes;\n        scratch.length = ref.length - offset;\n        scratch.offset = ref.offset + offset;\n        int key = hash.add(scratch);\n        ints[ord] = key < 0 ? (-key) - 1 : key;\n        break;\n      }\n    }\n\n","sourceOld":"    public void fromString(int ord, BytesRef ref, int offset) {\n      switch (type) {\n      case FIXED_INTS_16:\n        assert shorts != null;\n        shorts[ord] = Short.parseShort(readString(offset, ref));\n        break;\n      case FIXED_INTS_32:\n        assert ints != null;\n        ints[ord] = Integer.parseInt(readString(offset, ref));\n        break;\n      case FIXED_INTS_64:\n      case VAR_INTS:\n        assert longs != null;\n        longs[ord] = Long.parseLong(readString(offset, ref));\n        break;\n      case FIXED_INTS_8:\n        assert bytes != null;\n        bytes[ord] = (byte) Integer.parseInt(readString(offset, ref));\n        break;\n      case FLOAT_32:\n        assert floats != null;\n        floats[ord] = Float.parseFloat(readString(offset, ref));\n        break;\n      case FLOAT_64:\n        assert doubles != null;\n        doubles[ord] = Double.parseDouble(readString(offset, ref));\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.bytes = ref.bytes;\n        scratch.length = ref.length - offset;\n        scratch.offset = ref.offset + offset;\n        int key = hash.add(scratch);\n        ints[ord] = key < 0 ? (-key) - 1 : key;\n        break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#fromString(int,BytesRef,int).mjava","sourceNew":null,"sourceOld":"    public void fromString(int ord, BytesRef ref, int offset) {\n      switch (type) {\n      case FIXED_INTS_16:\n        assert shorts != null;\n        shorts[ord] = Short.parseShort(readString(offset, ref));\n        break;\n      case FIXED_INTS_32:\n        assert ints != null;\n        ints[ord] = Integer.parseInt(readString(offset, ref));\n        break;\n      case FIXED_INTS_64:\n      case VAR_INTS:\n        assert longs != null;\n        longs[ord] = Long.parseLong(readString(offset, ref));\n        break;\n      case FIXED_INTS_8:\n        assert bytes != null;\n        bytes[ord] = (byte) Integer.parseInt(readString(offset, ref));\n        break;\n      case FLOAT_32:\n        assert floats != null;\n        floats[ord] = Float.parseFloat(readString(offset, ref));\n        break;\n      case FLOAT_64:\n        assert doubles != null;\n        doubles[ord] = Double.parseDouble(readString(offset, ref));\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.bytes = ref.bytes;\n        scratch.length = ref.length - offset;\n        scratch.offset = ref.offset + offset;\n        int key = hash.add(scratch);\n        ints[ord] = key < 0 ? (-key) - 1 : key;\n        break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#fromString(int,BytesRef,int).mjava","sourceNew":null,"sourceOld":"    public void fromString(int ord, BytesRef ref, int offset) {\n      switch (type) {\n      case FIXED_INTS_16:\n        assert shorts != null;\n        shorts[ord] = Short.parseShort(readString(offset, ref));\n        break;\n      case FIXED_INTS_32:\n        assert ints != null;\n        ints[ord] = Integer.parseInt(readString(offset, ref));\n        break;\n      case FIXED_INTS_64:\n      case VAR_INTS:\n        assert longs != null;\n        longs[ord] = Long.parseLong(readString(offset, ref));\n        break;\n      case FIXED_INTS_8:\n        assert bytes != null;\n        bytes[ord] = (byte) Integer.parseInt(readString(offset, ref));\n        break;\n      case FLOAT_32:\n        assert floats != null;\n        floats[ord] = Float.parseFloat(readString(offset, ref));\n        break;\n      case FLOAT_64:\n        assert doubles != null;\n        doubles[ord] = Double.parseDouble(readString(offset, ref));\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        scratch.bytes = ref.bytes;\n        scratch.length = ref.length - offset;\n        scratch.offset = ref.offset + offset;\n        int key = hash.add(scratch);\n        ints[ord] = key < 0 ? (-key) - 1 : key;\n        break;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","0837ab0472feecb3a54260729d845f839e1cbd72"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}