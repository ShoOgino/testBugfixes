{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersect(List[#-extends-DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. */\n  public static ConjunctionDISI intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided iterators, taking advantage of\n   *  {@link TwoPhaseIterator}. */\n  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iter : iterators) {\n      addIterator(iter, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    DocIdSetIterator iterator = new ConjunctionDISI(allIterators);\n    if (twoPhaseIterators.isEmpty() == false) {\n      iterator = TwoPhaseIterator.asDocIdSetIterator(new ConjunctionTwoPhaseIterator(iterator, twoPhaseIterators));\n    }\n    return iterator;\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided DocIdSetIterators. */\n  public static ConjunctionDISI intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    DocIdSetIterator iterator = new ConjunctionDISI(allIterators);\n    if (twoPhaseIterators.isEmpty() == false) {\n      iterator = TwoPhaseIterator.asDocIdSetIterator(new ConjunctionTwoPhaseIterator(iterator, twoPhaseIterators));\n    }\n    return iterator;\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided DocIdSetIterators. */\n  public static ConjunctionDISI intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e4566afb2ee65953d186f4f93735fde23674641","date":1466575467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    DocIdSetIterator iterator = new ConjunctionDISI(allIterators);\n    if (twoPhaseIterators.isEmpty() == false) {\n      iterator = TwoPhaseIterator.asDocIdSetIterator(new ConjunctionTwoPhaseIterator(iterator, twoPhaseIterators));\n    }\n    return iterator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af167ac924ed00018fecc030b0a48b8b795c582e","date":1466596267,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    DocIdSetIterator iterator = new ConjunctionDISI(allIterators);\n    if (twoPhaseIterators.isEmpty() == false) {\n      iterator = TwoPhaseIterator.asDocIdSetIterator(new ConjunctionTwoPhaseIterator(iterator, twoPhaseIterators));\n    }\n    return iterator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectIterators(List[DocIdSetIterator]).mjava","sourceNew":"  /** Create a conjunction over the provided DocIdSetIterators. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided DocIdSetIterators. */\n  public static ConjunctionDISI intersectIterators(List<DocIdSetIterator> iterators) {\n    if (iterators.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (DocIdSetIterator iterator : iterators) {\n      addIterator(iterator, allIterators, twoPhaseIterators);\n    }\n\n    if (twoPhaseIterators.isEmpty()) {\n      return new ConjunctionDISI(allIterators);\n    } else {\n      return new TwoPhase(allIterators, twoPhaseIterators);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"af167ac924ed00018fecc030b0a48b8b795c582e":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","2e4566afb2ee65953d186f4f93735fde23674641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2e4566afb2ee65953d186f4f93735fde23674641":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["7dd748bb245633a8195281556bb0e68a6ea97d18","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","af167ac924ed00018fecc030b0a48b8b795c582e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af167ac924ed00018fecc030b0a48b8b795c582e"]},"commit2Childs":{"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"af167ac924ed00018fecc030b0a48b8b795c582e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"2e4566afb2ee65953d186f4f93735fde23674641":["af167ac924ed00018fecc030b0a48b8b795c582e"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["af167ac924ed00018fecc030b0a48b8b795c582e","2e4566afb2ee65953d186f4f93735fde23674641"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}