{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(AutoScaling.EventType.NODELOST, \".auto_add_replicas\", System.currentTimeMillis(), lostNodeName);\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", System.currentTimeMillis(), lostNodeName);\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(AutoScaling.EventType.NODELOST, \".auto_add_replicas\", System.currentTimeMillis(), lostNodeName);\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", System.currentTimeMillis(), lostNodeName);\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getClusterDataProvider(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getClusterDataProvider(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"/dev/null","sourceNew":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1","date":1507109084,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction();\n    TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n    ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n    action.process(lostNode, context);\n    List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n    return operations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8","date":1536142210,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName));\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      action.configure(actionJetty.getCoreContainer().getResourceLoader(), actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), new HashMap<>());\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  @SuppressWarnings({\"rawtypes\"})\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      action.configure(actionJetty.getCoreContainer().getResourceLoader(), actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), new HashMap<>());\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      action.configure(actionJetty.getCoreContainer().getResourceLoader(), actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), new HashMap<>());\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#getOperations(JettySolrRunner,String).mjava","sourceNew":null,"sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to create unique id\")\n  @SuppressWarnings({\"rawtypes\"})\n  private List<SolrRequest> getOperations(JettySolrRunner actionJetty, String lostNodeName) throws Exception {\n    try (AutoAddReplicasPlanAction action = new AutoAddReplicasPlanAction()) {\n      action.configure(actionJetty.getCoreContainer().getResourceLoader(), actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), new HashMap<>());\n      TriggerEvent lostNode = new NodeLostTrigger.NodeLostEvent(TriggerEventType.NODELOST, \".auto_add_replicas\", Collections.singletonList(System.currentTimeMillis()), Collections.singletonList(lostNodeName), CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n      ActionContext context = new ActionContext(actionJetty.getCoreContainer().getZkController().getSolrCloudManager(), null, new HashMap<>());\n      action.process(lostNode, context);\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      List<SolrRequest> operations = (List) context.getProperty(\"operations\");\n      return operations;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e9ae2fb2f75e4dc95285c6fa084a21034436cf1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"9b87bf1141cacf62ff7b9585470d5bf565b3ccc8":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"4e9ae2fb2f75e4dc95285c6fa084a21034436cf1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","560c18d71dad43d675158783c3840f8c80d6d39c"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["9b87bf1141cacf62ff7b9585470d5bf565b3ccc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4e9ae2fb2f75e4dc95285c6fa084a21034436cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}