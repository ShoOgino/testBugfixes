{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    ensureOpen();\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    ensureOpen();\n    cacheMissesUntilFill = i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1891ff130d9d54192377049a0bdfac6326df16f","date":1340188663,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#setCacheMissesUntilFill(int).mjava","sourceNew":"  /**\n   * Set the number of cache misses before an attempt is made to read the entire\n   * taxonomy into the in-memory cache.\n   * <p>\n   * This taxonomy writer holds an in-memory cache of recently seen categories\n   * to speed up operation. On each cache-miss, the on-disk index needs to be\n   * consulted. When an existing taxonomy is opened, a lot of slow disk reads\n   * like that are needed until the cache is filled, so it is more efficient to\n   * read the entire taxonomy into memory at once. We do this complete read\n   * after a certain number (defined by this method) of cache misses.\n   * <p>\n   * If the number is set to {@code 0}, the entire taxonomy is read into the\n   * cache on first use, without fetching individual categories first.\n   * <p>\n   * NOTE: it is assumed that this method is called immediately after the\n   * taxonomy writer has been created.\n   */\n  public void setCacheMissesUntilFill(int i) {\n    ensureOpen();\n    cacheMissesUntilFill = i;\n  }\n\n","sourceOld":"  /**\n   * Set the number of cache misses before an attempt is made to read the\n   * entire taxonomy into the in-memory cache.\n   * <P> \n   * LuceneTaxonomyWriter holds an in-memory cache of recently seen\n   * categories to speed up operation. On each cache-miss, the on-disk index\n   * needs to be consulted. When an existing taxonomy is opened, a lot of\n   * slow disk reads like that are needed until the cache is filled, so it\n   * is more efficient to read the entire taxonomy into memory at once.\n   * We do this complete read after a certain number (defined by this method)\n   * of cache misses.\n   * <P>\n   * If the number is set to <CODE>0</CODE>, the entire taxonomy is read\n   * into the cache on first use, without fetching individual categories\n   * first.\n   * <P>\n   * Note that if the memory cache of choice is limited in size, and cannot\n   * hold the entire content of the on-disk taxonomy, then it is never\n   * read in its entirety into the cache, regardless of the setting of this\n   * method. \n   */\n  public void setCacheMissesUntilFill(int i) {\n    ensureOpen();\n    cacheMissesUntilFill = i;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1891ff130d9d54192377049a0bdfac6326df16f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1891ff130d9d54192377049a0bdfac6326df16f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c1891ff130d9d54192377049a0bdfac6326df16f"],"c1891ff130d9d54192377049a0bdfac6326df16f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}