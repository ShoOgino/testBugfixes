{"path":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","commits":[{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state) {\n\n    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);\n\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < shards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,ClusterState,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","sourceNew":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, ClusterState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/AssignShard#assignShard(String,CloudState,Integer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Assign a new unique id up to slices count - then add replicas evenly.\n   * \n   * @param collection\n   * @param state\n   * @return the assigned shard id\n   */\n  public static String assignShard(String collection, CloudState state, Integer numShards) {\n    if (numShards == null) {\n      numShards = 1;\n    }\n    String returnShardId = null;\n    Map<String, Slice> sliceMap = state.getSlices(collection);\n\n    if (sliceMap == null) {\n      return \"shard1\";\n    }\n\n    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());\n\n    if (shardIdNames.size() < numShards) {\n      return \"shard\" + (shardIdNames.size() + 1);\n    }\n\n    // else figure out which shard needs more replicas\n    final Map<String, Integer> map = new HashMap<String, Integer>();\n    for (String shardId : shardIdNames) {\n      int cnt = sliceMap.get(shardId).getShards().size();\n      map.put(shardId, cnt);\n    }\n\n    Collections.sort(shardIdNames, new Comparator<String>() {\n\n      @Override\n      public int compare(String o1, String o2) {\n        Integer one = map.get(o1);\n        Integer two = map.get(o2);\n        return one.compareTo(two);\n      }\n    });\n\n    returnShardId = shardIdNames.get(0);\n    return returnShardId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}