{"path":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","commits":[{"id":"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","date":1378833548,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"/dev/null","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertFalse(\"expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b66851588830a6a56665a693aac80056eedba0b","date":1393981278,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getIndexReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNotNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertFalse(\"expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getIndexReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNotNRT(int maxDoc) {\n    RefCounted<SolrIndexSearcher> searcher = h.getCore().getSearcher();\n    try {\n      DirectoryReader ir = searcher.get().getIndexReader();\n      assertEquals(maxDoc, ir.maxDoc());\n      assertFalse(\"expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f","date":1399997256,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getRawReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getIndexReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getRawReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getIndexReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getRawReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","sourceOld":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getIndexReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestNonNRTOpen#assertNotNRT(int).mjava","sourceNew":null,"sourceOld":"  static void assertNotNRT(int maxDoc) {\n    SolrCore core = h.getCore();\n    log.info(\"Checking notNRT & maxDoc=\" + maxDoc + \" of core=\" + core.toString());\n    RefCounted<SolrIndexSearcher> searcher = core.getSearcher();\n    try {\n      SolrIndexSearcher s = searcher.get();\n      DirectoryReader ir = s.getRawReader();\n      assertEquals(\"SOLR-5815? : wrong maxDoc: core=\" + core.toString() +\" searcher=\" + s.toString(),\n                   maxDoc, ir.maxDoc());\n      assertFalse(\"SOLR-5815? : expected non-NRT reader, got: \" + ir, ir.toString().contains(\":nrt\"));\n    } finally {\n      searcher.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f":["3b66851588830a6a56665a693aac80056eedba0b"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360","3b66851588830a6a56665a693aac80056eedba0b"],"3b66851588830a6a56665a693aac80056eedba0b":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["3b66851588830a6a56665a693aac80056eedba0b","e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["3b66851588830a6a56665a693aac80056eedba0b","93dd449115a9247533e44bab47e8429e5dccbc6d"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"]},"commit2Childs":{"e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"3b66851588830a6a56665a693aac80056eedba0b":["e9dd0afe9f3c66f25a34aaf6689dfabf9808c71f","96ea64d994d340044e0d57aeb6a5871539d10ca5","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360"],"c9f81a0a8d08cc36757b7be45a8c8dcd66ff0360":["96ea64d994d340044e0d57aeb6a5871539d10ca5","3b66851588830a6a56665a693aac80056eedba0b"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}