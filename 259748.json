{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f347b0334e731e40818cae4b797786796ff8becc","date":1304705160,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealArc(address, scratchArc);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).address != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["f347b0334e731e40818cae4b797786796ff8becc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f347b0334e731e40818cae4b797786796ff8becc":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["56da903869515527852ee21ea7ef7bfe414cd40d","f347b0334e731e40818cae4b797786796ff8becc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["70ad682703b8585f5d0a637efec044d57ec05efb","f347b0334e731e40818cae4b797786796ff8becc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"f347b0334e731e40818cae4b797786796ff8becc":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","f347b0334e731e40818cae4b797786796ff8becc","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}