{"path":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","commits":[{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"/dev/null","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    Cache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) 1000);\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    Cache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    Cache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) 1000);\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache#testThreadCorrectness().mjava","sourceNew":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    Cache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","sourceOld":"  public void testThreadCorrectness() throws Exception {\n    final int NUM_THREADS = 4;\n    final int CACHE_SIZE = 512;\n    final int OBJ_COUNT = 3*CACHE_SIZE;\n\n    Cache<Object,Object> c = new DoubleBarrelLRUCache<Object,Object>(1024);\n\n    Object[] objs = new Object[OBJ_COUNT];\n    for(int i=0;i<OBJ_COUNT;i++) {\n      objs[i] = new Object();\n    }\n    \n    final CacheThread[] threads = new CacheThread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+1000L;\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i] = new CacheThread(c, objs, endTime);\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n      assert !threads[i].failed;\n    }\n    //System.out.println(\"hits=\" + totHit + \" misses=\" + totMiss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}