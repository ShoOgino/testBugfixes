{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public int getOrd(int docID) {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"/dev/null","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docToTermOrd.get(docID) != 0;\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docToTermOrd.get(docID) != 0;\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docToTermOrd.get(docID) != 0;\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfbc97d60c81daabe592e4b893e5a09ade63c856","date":1481126995,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      return new Iter();\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docToTermOrd.get(docID) != 0;\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.SortedDocValuesImpl#iterator().mjava","sourceNew":"    public SortedDocValues iterator() {\n      return new Iter();\n    }\n\n","sourceOld":"    public SortedDocValues iterator() {\n      final BytesRef term = new BytesRef();\n      return new SortedDocValues() {\n        private int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= docToTermOrd.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < docToTermOrd.size()) {\n            docID = target;\n            if (docToTermOrd.get(docID) != 0) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docToTermOrd.get(docID) != 0;\n        }\n\n        @Override\n        public long cost() {\n          return 0;\n        }\n        \n        @Override\n        public int ordValue() {\n          // Subtract 1, matching the 1+ord we did when\n          // storing, so that missing values, which are 0 in the\n          // packed ints, are returned as -1 ord:\n          return (int) docToTermOrd.get(docID)-1;\n        }\n\n        @Override\n        public int getValueCount() {\n          return numOrd;\n        }\n\n        @Override\n        public BytesRef lookupOrd(int ord) {\n          if (ord < 0) {\n            throw new IllegalArgumentException(\"ord must be >=0 (got ord=\" + ord + \")\");\n          }\n          bytes.fill(term, termOrdToBytesOffset.get(ord));\n          return term;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"bfbc97d60c81daabe592e4b893e5a09ade63c856":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"9856095f7afb5a607bf5e65077615ed91273508c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","bfbc97d60c81daabe592e4b893e5a09ade63c856"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfbc97d60c81daabe592e4b893e5a09ade63c856"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["9856095f7afb5a607bf5e65077615ed91273508c"],"bfbc97d60c81daabe592e4b893e5a09ade63c856":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","bfbc97d60c81daabe592e4b893e5a09ade63c856"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}