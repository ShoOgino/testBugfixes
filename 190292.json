{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new MockTokenizer(in, MockTokenizer.WHITESPACE, false), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new MockTokenizer(in, MockTokenizer.WHITESPACE, false), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new MockTokenizer(in, MockTokenizer.WHITESPACE, false), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            new MockTokenizer(in, MockTokenizer.WHITESPACE, false), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2f49143da0a5d278a72f741432047fcfa6da996e"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["3bb13258feba31ab676502787ab2e1779f129b7a","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"2f49143da0a5d278a72f741432047fcfa6da996e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}