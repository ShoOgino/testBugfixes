{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new StreamComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new StreamComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_s,a_i,a_f\",\"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","date":1449690748,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, \"collection1\", rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029","date":1464287977,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":["b940572a59da1b42b6c20ab5278155b12816807a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = new ParallelStream(zkHost, COLLECTION, rollupStream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(parallelStream);\n      parallelStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelStream);\n\n      assertEquals(3, tuples.size());\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.001);\n      assertEquals(18, sumf.doubleValue(), 0.001);\n      assertEquals(0, mini.doubleValue(), 0.001);\n      assertEquals(1, minf.doubleValue(), 0.001);\n      assertEquals(14, maxi.doubleValue(), 0.001);\n      assertEquals(10, maxf.doubleValue(), 0.001);\n      assertEquals(4.25, avgi.doubleValue(), 0.001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.001);\n      assertEquals(26, sumf.doubleValue(), 0.001);\n      assertEquals(3, mini.doubleValue(), 0.001);\n      assertEquals(3, minf.doubleValue(), 0.001);\n      assertEquals(13, maxi.doubleValue(), 0.001);\n      assertEquals(9, maxf.doubleValue(), 0.001);\n      assertEquals(9.5, avgi.doubleValue(), 0.001);\n      assertEquals(6.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.001);\n      assertEquals(4, mini.doubleValue(), 0.001);\n      assertEquals(4, minf.doubleValue(), 0.001);\n      assertEquals(11, maxi.doubleValue(), 0.001);\n      assertEquals(7, maxf.doubleValue(), 0.001);\n      assertEquals(7.5, avgi.doubleValue(), 0.001);\n      assertEquals(5.5, avgf.doubleValue(), 0.001);\n      assertEquals(2, count.doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(parallelStream);\n      parallelStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelStream);\n\n      assertEquals(3, tuples.size());\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.001);\n      assertEquals(18, sumf.doubleValue(), 0.001);\n      assertEquals(0, mini.doubleValue(), 0.001);\n      assertEquals(1, minf.doubleValue(), 0.001);\n      assertEquals(14, maxi.doubleValue(), 0.001);\n      assertEquals(10, maxf.doubleValue(), 0.001);\n      assertEquals(4.25, avgi.doubleValue(), 0.001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.001);\n      assertEquals(26, sumf.doubleValue(), 0.001);\n      assertEquals(3, mini.doubleValue(), 0.001);\n      assertEquals(3, minf.doubleValue(), 0.001);\n      assertEquals(13, maxi.doubleValue(), 0.001);\n      assertEquals(9, maxf.doubleValue(), 0.001);\n      assertEquals(9.5, avgi.doubleValue(), 0.001);\n      assertEquals(6.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.001);\n      assertEquals(4, mini.doubleValue(), 0.001);\n      assertEquals(4, minf.doubleValue(), 0.001);\n      assertEquals(11, maxi.doubleValue(), 0.001);\n      assertEquals(7, maxf.doubleValue(), 0.001);\n      assertEquals(7.5, avgi.doubleValue(), 0.001);\n      assertEquals(5.5, avgf.doubleValue(), 0.001);\n      assertEquals(2, count.doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n    ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(parallelStream);\n    List<Tuple> tuples = getTuples(parallelStream);\n\n    assertEquals(3, tuples.size());\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.001);\n    assertEquals(18, sumf.doubleValue(), 0.001);\n    assertEquals(0, mini.doubleValue(), 0.001);\n    assertEquals(1, minf.doubleValue(), 0.001);\n    assertEquals(14, maxi.doubleValue(), 0.001);\n    assertEquals(10, maxf.doubleValue(), 0.001);\n    assertEquals(4.25, avgi.doubleValue(), 0.001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.001);\n    assertEquals(26, sumf.doubleValue(), 0.001);\n    assertEquals(3, mini.doubleValue(), 0.001);\n    assertEquals(3, minf.doubleValue(), 0.001);\n    assertEquals(13, maxi.doubleValue(), 0.001);\n    assertEquals(9, maxf.doubleValue(), 0.001);\n    assertEquals(9.5, avgi.doubleValue(), 0.001);\n    assertEquals(6.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.001);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.001);\n    assertEquals(4, mini.doubleValue(), 0.001);\n    assertEquals(4, minf.doubleValue(), 0.001);\n    assertEquals(11, maxi.doubleValue(), 0.001);\n    assertEquals(7, maxf.doubleValue(), 0.001);\n    assertEquals(7.5, avgi.doubleValue(), 0.001);\n    assertEquals(5.5, avgf.doubleValue(), 0.001);\n    assertEquals(2, count.doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\", \"qt\", \"/export\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(parallelStream);\n      parallelStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelStream);\n\n      assertEquals(3, tuples.size());\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.001);\n      assertEquals(18, sumf.doubleValue(), 0.001);\n      assertEquals(0, mini.doubleValue(), 0.001);\n      assertEquals(1, minf.doubleValue(), 0.001);\n      assertEquals(14, maxi.doubleValue(), 0.001);\n      assertEquals(10, maxf.doubleValue(), 0.001);\n      assertEquals(4.25, avgi.doubleValue(), 0.001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.001);\n      assertEquals(26, sumf.doubleValue(), 0.001);\n      assertEquals(3, mini.doubleValue(), 0.001);\n      assertEquals(3, minf.doubleValue(), 0.001);\n      assertEquals(13, maxi.doubleValue(), 0.001);\n      assertEquals(9, maxf.doubleValue(), 0.001);\n      assertEquals(9.5, avgi.doubleValue(), 0.001);\n      assertEquals(6.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.001);\n      assertEquals(4, mini.doubleValue(), 0.001);\n      assertEquals(4, minf.doubleValue(), 0.001);\n      assertEquals(11, maxi.doubleValue(), 0.001);\n      assertEquals(7, maxf.doubleValue(), 0.001);\n      assertEquals(7.5, avgi.doubleValue(), 0.001);\n      assertEquals(5.5, avgf.doubleValue(), 0.001);\n      assertEquals(2, count.doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      RollupStream rollupStream = new RollupStream(stream, buckets, metrics);\n      ParallelStream parallelStream = parallelStream(rollupStream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(parallelStream);\n      parallelStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(parallelStream);\n\n      assertEquals(3, tuples.size());\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.001);\n      assertEquals(18, sumf.doubleValue(), 0.001);\n      assertEquals(0, mini.doubleValue(), 0.001);\n      assertEquals(1, minf.doubleValue(), 0.001);\n      assertEquals(14, maxi.doubleValue(), 0.001);\n      assertEquals(10, maxf.doubleValue(), 0.001);\n      assertEquals(4.25, avgi.doubleValue(), 0.001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.001);\n      assertEquals(26, sumf.doubleValue(), 0.001);\n      assertEquals(3, mini.doubleValue(), 0.001);\n      assertEquals(3, minf.doubleValue(), 0.001);\n      assertEquals(13, maxi.doubleValue(), 0.001);\n      assertEquals(9, maxf.doubleValue(), 0.001);\n      assertEquals(9.5, avgi.doubleValue(), 0.001);\n      assertEquals(6.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.001);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.001);\n      assertEquals(4, mini.doubleValue(), 0.001);\n      assertEquals(4, minf.doubleValue(), 0.001);\n      assertEquals(11, maxi.doubleValue(), 0.001);\n      assertEquals(7, maxf.doubleValue(), 0.001);\n      assertEquals(7.5, avgi.doubleValue(), 0.001);\n      assertEquals(5.5, avgf.doubleValue(), 0.001);\n      assertEquals(2, count.doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","b940572a59da1b42b6c20ab5278155b12816807a"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["d470c8182e92b264680e34081b75e70a9f2b3c89","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"b940572a59da1b42b6c20ab5278155b12816807a":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"58bb411852ed0249bf624e9fc223b4973776d357":["c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"e431b0806b8db369da896b66a74e304a49953c7b":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","b940572a59da1b42b6c20ab5278155b12816807a"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58bb411852ed0249bf624e9fc223b4973776d357"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["58bb411852ed0249bf624e9fc223b4973776d357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["e431b0806b8db369da896b66a74e304a49953c7b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"58bb411852ed0249bf624e9fc223b4973776d357":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["83870855d82aba6819217abeff5a40779dbb28b4","c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["c3cf1396610fbacfdf69deb27bc5d3f36b5fbd43"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c6f44f61f9dbe0ecbae369b6d8e0cc6bfef48029":["83870855d82aba6819217abeff5a40779dbb28b4","58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","83870855d82aba6819217abeff5a40779dbb28b4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}