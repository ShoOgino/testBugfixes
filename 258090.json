{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","sourceNew":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","sourceOld":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","pathOld":"/dev/null","sourceNew":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","sourceNew":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), StandardCharsets.UTF_8);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","sourceOld":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","sourceNew":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), StandardCharsets.UTF_8);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","sourceOld":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","sourceNew":null,"sourceOld":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), StandardCharsets.UTF_8);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ToolRunnerHelpFormatter#getGenericCommandUsage().mjava","sourceNew":null,"sourceOld":"  public static String getGenericCommandUsage() {\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    String msg;\n    try {\n      ToolRunner.printGenericCommandUsage(new PrintStream(bout, true, \"UTF-8\"));\n      msg = new String(bout.toByteArray(), StandardCharsets.UTF_8);\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(e); // unreachable\n    }\n    \n    BufferedReader reader = new BufferedReader(new StringReader(msg));    \n    StringBuilder result = new StringBuilder();\n    while (true) {\n      String line;\n      try {\n        line = reader.readLine();\n      } catch (IOException e) {\n        throw new RuntimeException(e); // unreachable\n      }\n      \n      if (line == null) {\n        return result.toString(); // EOS\n      }\n      \n      if (!line.startsWith(\"-\")) {\n        result.append(line + \"\\n\");\n      } else {\n        line = line.trim();\n        int i = line.indexOf(\"  \");\n        if (i < 0) {\n          i = line.indexOf('\\t');\n        }\n        if (i < 0) {\n          result.append(line + \"\\n\");          \n        } else {\n          String title = line.substring(0, i).trim();\n          if (title.length() >= 3 && Character.isLetterOrDigit(title.charAt(1)) && Character.isLetterOrDigit(title.charAt(2))) {\n            title = \"-\" + title; // prefer \"--libjars\" long arg style over \"-libjars\" style but retain \"-D foo\" short arg style        \n          }\n          String help = line.substring(i, line.length()).trim();\n          StringWriter strWriter = new StringWriter(); \n          PrintWriter writer = new PrintWriter(strWriter, true);\n          TextHelper.printHelp(writer, title, help, new ASCIITextWidthCounter(), ArgumentParsers.getFormatWidth());\n          result.append(strWriter.toString());          \n        }        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","9d3d365762604952e436b51980101dfc84cc1b3e"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}