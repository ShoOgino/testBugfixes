{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","commits":[{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"/dev/null","sourceNew":"  private static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98d733a5bb519a76012bac63af29da2e75ccdb8","date":1502719837,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","sourceNew":"  private static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":"  private static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6c71577c4ee99246f48a2c29bc213daab310ee5","date":1505785422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","sourceNew":"  static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":"  private static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"/dev/null","sourceNew":"  static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"/dev/null","sourceNew":"  static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","sourceNew":"  public static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","sourceOld":"  static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#withSystemLogListener(AutoScalingConfig,String).mjava","sourceNew":null,"sourceOld":"  public static AutoScalingConfig withSystemLogListener(AutoScalingConfig autoScalingConfig, String triggerName) {\n    Map<String, AutoScalingConfig.TriggerListenerConfig> configs = autoScalingConfig.getTriggerListenerConfigs();\n    for (AutoScalingConfig.TriggerListenerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.trigger)) {\n        // already has some listener config\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    Map<String, Object> properties = new HashMap<>();\n    properties.put(AutoScalingParams.CLASS, SystemLogListener.class.getName());\n    properties.put(AutoScalingParams.TRIGGER, triggerName);\n    properties.put(AutoScalingParams.STAGE, EnumSet.allOf(TriggerEventProcessorStage.class));\n    AutoScalingConfig.TriggerListenerConfig listener =\n        new AutoScalingConfig.TriggerListenerConfig(triggerName + CollectionAdminParams.SYSTEM_COLL, properties);\n    autoScalingConfig = autoScalingConfig.withTriggerListenerConfig(listener);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6c71577c4ee99246f48a2c29bc213daab310ee5"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["e98d733a5bb519a76012bac63af29da2e75ccdb8"],"e98d733a5bb519a76012bac63af29da2e75ccdb8":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["e98d733a5bb519a76012bac63af29da2e75ccdb8"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"e98d733a5bb519a76012bac63af29da2e75ccdb8":["b6c71577c4ee99246f48a2c29bc213daab310ee5"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}