{"path":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","commits":[{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#setAdminCore(SolrCore).mjava","sourceNew":"  /**\n   * Sets the preferred core used to handle CoreContainer admin tasks.\n   * Note that getAdminCore is not symmetrical to this method since\n   * it will always return an opened SolrCore.\n   * This however can be useful implementing a \"metacore\" (a core of cores).\n   */\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the preferred core used to handle MultiCore admin tasks.\n   * Note that getAdminCore is not symmetrical to this method since\n   * it will allways return an opened SolrCore.\n   * This however can be useful implementing a \"metacore\" (a core of cores).\n   */\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","sourceNew":"  /**\n   * Sets the preferred core used to handle MultiCore admin tasks.\n   */\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the preferred core used to handle CoreContainer admin tasks.\n   * Note that getAdminCore is not symmetrical to this method since\n   * it will always return an opened SolrCore.\n   * This however can be useful implementing a \"metacore\" (a core of cores).\n   */\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","sourceNew":"  /**\n   * Sets the preferred core used to handle MultiCore admin tasks.\n   */\n  @Deprecated\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the preferred core used to handle MultiCore admin tasks.\n   */\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c03efd8cfee511e8fabfc468d0dd7c9303be8be","date":1261551327,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/CoreContainer#setAdminCore(SolrCore).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the preferred core used to handle MultiCore admin tasks.\n   */\n  @Deprecated\n  public void setAdminCore(SolrCore core) {\n    synchronized (cores) {\n      adminCore = new java.lang.ref.WeakReference<SolrCore>(core);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"5c03efd8cfee511e8fabfc468d0dd7c9303be8be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c03efd8cfee511e8fabfc468d0dd7c9303be8be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}