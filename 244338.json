{"path":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","commits":[{"id":"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60","date":1111621250,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens) throws java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n        System.out.print(\"more (y/n) ? \");\n        queryString = in.readLine();\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#search(String,boolean,boolean,ConsoleReader).mjava","sourceNew":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","sourceOld":"  public void search(String queryString, boolean explain, boolean showTokens, ConsoleReader cr)\n  \t\tthrows java.io.IOException, org.apache.lucene.queryParser.ParseException {\n    Hits hits = initSearch(queryString);\n    System.out.println(hits.length() + \" total matching documents\");\n    if (explain) {\n      query = explainQuery(queryString);\n    }\n\n    final int HITS_PER_PAGE = 10;\n    message(\"--------------------------------------\");\n    for (int start = 0; start < hits.length(); start += HITS_PER_PAGE) {\n      int end = Math.min(hits.length(), start + HITS_PER_PAGE);\n      for (int ii = start; ii < end; ii++) {\n        Document doc = hits.doc(ii);\n        message(\"---------------- \" + (ii + 1) + \" score:\" + hits.score(ii) + \"---------------------\");\n        printHit(doc);\n        if (showTokens) {\n          invertDocument(doc);\n        }\n        if (explain) {\n          Explanation exp = searcher.explain(query, hits.id(ii));\n          message(\"Explanation:\" + exp.toString());\n        }\n      }\n      message(\"#################################################\");\n\n      if (hits.length() > end) {\n      \t// TODO: don't let the input end up in the command line history\n      \tqueryString = cr.readLine(\"more (y/n) ? \");\n        if (queryString.length() == 0 || queryString.charAt(0) == 'n')\n          break;\n      }\n    }\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4df60738409662c962b4ed3201d830cd3c14530"],"a4df60738409662c962b4ed3201d830cd3c14530":["e8c39a8ebbb8e79ce163cf3447d30ee883f32f60"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8c39a8ebbb8e79ce163cf3447d30ee883f32f60"],"e8c39a8ebbb8e79ce163cf3447d30ee883f32f60":["a4df60738409662c962b4ed3201d830cd3c14530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4df60738409662c962b4ed3201d830cd3c14530":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}