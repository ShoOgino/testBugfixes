{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDuellMemIndex().mjava","commits":[{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstDirectory#testDuellMemIndex().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testDuellMemIndex().mjava","sourceNew":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (IndexableField field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","sourceOld":"  public void testDuellMemIndex() throws IOException {\n    LineFileDocs lineFileDocs = new LineFileDocs(random());\n    int numDocs = atLeast(10);\n    MemoryIndex memory = randomMemoryIndex();\n    for (int i = 0; i < numDocs; i++) {\n      Directory dir = newDirectory();\n      MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n      mockAnalyzer.setMaxTokenLength(TestUtil.nextInt(random(), 1, IndexWriter.MAX_TERM_LENGTH));\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random(), mockAnalyzer));\n      Document nextDoc = lineFileDocs.nextDoc();\n      Document doc = new Document();\n      for (IndexableField field : nextDoc.getFields()) {\n        if (field.fieldType().indexOptions() != IndexOptions.NONE) {\n          doc.add(field);\n          if (random().nextInt(3) == 0) {\n            doc.add(field);  // randomly add the same field twice\n          }\n        }\n      }\n      \n      writer.addDocument(doc);\n      writer.close();\n      for (IndexableField field : doc) {\n        memory.addField(field.name(), ((Field)field).stringValue(), mockAnalyzer);  \n      }\n      DirectoryReader competitor = DirectoryReader.open(dir);\n      LeafReader memIndexReader= (LeafReader) memory.createSearcher().getIndexReader();\n      TestUtil.checkReader(memIndexReader);\n      duellReaders(competitor, memIndexReader);\n      IOUtils.close(competitor, memIndexReader);\n      memory.reset();\n      dir.close();\n    }\n    lineFileDocs.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d77dafd89756a5161d244985903e3487ca109182"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}