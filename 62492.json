{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","date":1344608180,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field.getIndexOptions());\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":["7b91922b55d15444d554721b352861d028eb8278"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field.getIndexOptions());\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/ramonly/RAMOnlyPostingsFormat.RAMFieldsConsumer#addField(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public TermsConsumer addField(FieldInfo field) {\n      if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n        throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n      }\n      RAMField ramField = new RAMField(field.name, field);\n      postings.fieldToTerms.put(field.name, ramField);\n      termsConsumer.reset(ramField);\n      return termsConsumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["0935c850ea562932997b72c69d93e345f21d7f45"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0935c850ea562932997b72c69d93e345f21d7f45":["5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c7869f64c874ebf7f317d22c00baf2b6857797a6","5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5699a2da08aaf5a165f2ceefe7cf8f5c70a12efc":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fa80a35d7c4b2b1e83082b275e3e8328ab93db52","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}