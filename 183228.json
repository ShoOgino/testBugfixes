{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#typeOfCreationRequired(Instant,Instant).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#typeOfCreationRequired(Instant,Instant).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#typeOfCreationRequired(Instant,Instant).mjava","sourceNew":"  /**\n   * Determine if the a new collection will be required based on the document timestamp. Passing null for\n   * preemptiveCreateInterval tells you if the document is beyond all existing collections with a response of\n   * {@link CreationType#NONE} or {@link CreationType#SYNCHRONOUS}, and passing a valid date math for\n   * preemptiveCreateMath additionally distinguishes the case where the document is close enough to the end of\n   * the TRA to trigger preemptive creation but not beyond all existing collections with a value of\n   * {@link CreationType#ASYNC_PREEMPTIVE}.\n   *\n   * @param docTimeStamp The timestamp from the document\n   * @param targetCollectionTimestamp The timestamp for the presently selected destination collection\n   * @return a {@code CreationType} indicating if and how to create a collection\n   */\n  private CreationType typeOfCreationRequired(Instant docTimeStamp, Instant targetCollectionTimestamp) {\n    final Instant nextCollTimestamp = computeNextCollTimestamp(targetCollectionTimestamp);\n\n    if (!docTimeStamp.isBefore(nextCollTimestamp)) {\n      // current document is destined for a collection that doesn't exist, must create the destination\n      // to proceed with this add command\n      return SYNCHRONOUS;\n    }\n\n    if (isNotBlank(getPreemptiveCreateWindow())) {\n      Instant preemptNextColCreateTime =\n          calcPreemptNextColCreateTime(getPreemptiveCreateWindow(), nextCollTimestamp);\n      if (!docTimeStamp.isBefore(preemptNextColCreateTime)) {\n        return ASYNC_PREEMPTIVE;\n      }\n    }\n\n    return NONE;\n  }\n\n","sourceOld":"  /**\n   * Determine if the a new collection will be required based on the document timestamp. Passing null for\n   * preemptiveCreateInterval tells you if the document is beyond all existing collections with a response of\n   * {@link CreationType#NONE} or {@link CreationType#SYNCHRONOUS}, and passing a valid date math for\n   * preemptiveCreateMath additionally distinguishes the case where the document is close enough to the end of\n   * the TRA to trigger preemptive creation but not beyond all existing collections with a value of\n   * {@link CreationType#ASYNC_PREEMPTIVE}.\n   *\n   * @param docTimeStamp The timestamp from the document\n   * @param targetCollectionTimestamp The timestamp for the presently selected destination collection\n   * @return a {@code CreationType} indicating if and how to create a collection\n   */\n  private CreationType typeOfCreationRequired(Instant docTimeStamp, Instant targetCollectionTimestamp) {\n    final Instant nextCollTimestamp = timeRoutedAlias.computeNextCollTimestamp(targetCollectionTimestamp);\n\n    if (!docTimeStamp.isBefore(nextCollTimestamp)) {\n      // current document is destined for a collection that doesn't exist, must create the destination\n      // to proceed with this add command\n      return SYNCHRONOUS;\n    }\n\n    if (isNotBlank(timeRoutedAlias.getPreemptiveCreateWindow())) {\n      Instant preemptNextColCreateTime =\n          calcPreemptNextColCreateTime(timeRoutedAlias.getPreemptiveCreateWindow(), nextCollTimestamp);\n      if (!docTimeStamp.isBefore(preemptNextColCreateTime)) {\n        return ASYNC_PREEMPTIVE;\n      }\n    }\n\n    return NONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":4,"author":"Gus Heck","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#typeOfCreationRequired(Instant,Instant).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determine if the a new collection will be required based on the document timestamp. Passing null for\n   * preemptiveCreateInterval tells you if the document is beyond all existing collections with a response of\n   * {@link CreationType#NONE} or {@link CreationType#SYNCHRONOUS}, and passing a valid date math for\n   * preemptiveCreateMath additionally distinguishes the case where the document is close enough to the end of\n   * the TRA to trigger preemptive creation but not beyond all existing collections with a value of\n   * {@link CreationType#ASYNC_PREEMPTIVE}.\n   *\n   * @param docTimeStamp The timestamp from the document\n   * @param targetCollectionTimestamp The timestamp for the presently selected destination collection\n   * @return a {@code CreationType} indicating if and how to create a collection\n   */\n  private CreationType typeOfCreationRequired(Instant docTimeStamp, Instant targetCollectionTimestamp) {\n    final Instant nextCollTimestamp = computeNextCollTimestamp(targetCollectionTimestamp);\n\n    if (!docTimeStamp.isBefore(nextCollTimestamp)) {\n      // current document is destined for a collection that doesn't exist, must create the destination\n      // to proceed with this add command\n      return SYNCHRONOUS;\n    }\n\n    if (isNotBlank(getPreemptiveCreateWindow())) {\n      Instant preemptNextColCreateTime =\n          calcPreemptNextColCreateTime(getPreemptiveCreateWindow(), nextCollTimestamp);\n      if (!docTimeStamp.isBefore(preemptNextColCreateTime)) {\n        return ASYNC_PREEMPTIVE;\n      }\n    }\n\n    return NONE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}