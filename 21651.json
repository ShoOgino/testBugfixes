{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}