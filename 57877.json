{"path":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","commits":[{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    int prefixLen = IndexFileNames.SEGMENTS.length()+1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        if (file.equals(IndexFileNames.SEGMENTS)) {\n          // Pre lock-less commits:\n          if (max == -1) {\n            max = 0;\n          }\n        } else {\n          long v = Long.parseLong(file.substring(prefixLen), Character.MAX_RADIX);\n          if (v > max) {\n            max = v;\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","sourceNew":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    int prefixLen = IndexFileNames.SEGMENTS.length()+1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        long gen = generationFromSegmentsFileName(file);\n        if (gen > max) {\n          max = gen;\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    int prefixLen = IndexFileNames.SEGMENTS.length()+1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        if (file.equals(IndexFileNames.SEGMENTS)) {\n          // Pre lock-less commits:\n          if (max == -1) {\n            max = 0;\n          }\n        } else {\n          long v = Long.parseLong(file.substring(prefixLen), Character.MAX_RADIX);\n          if (v > max) {\n            max = v;\n          }\n        }\n      }\n    }\n    return max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ee8d31906e3001783889a491e55f218013a190","date":1173949687,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","sourceNew":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        long gen = generationFromSegmentsFileName(file);\n        if (gen > max) {\n          max = gen;\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    int prefixLen = IndexFileNames.SEGMENTS.length()+1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        long gen = generationFromSegmentsFileName(file);\n        if (gen > max) {\n          max = gen;\n        }\n      }\n    }\n    return max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#getCurrentSegmentGeneration(String[]).mjava","sourceNew":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        long gen = generationFromSegmentsFileName(file);\n        if (gen > max) {\n          max = gen;\n        }\n      }\n    }\n    return max;\n  }\n\n","sourceOld":"  /**\n   * Get the generation (N) of the current segments_N file\n   * from a list of files.\n   *\n   * @param files -- array of file names to check\n   */\n  public static long getCurrentSegmentGeneration(String[] files) {\n    if (files == null) {\n      return -1;\n    }\n    long max = -1;\n    for (int i = 0; i < files.length; i++) {\n      String file = files[i];\n      if (file.startsWith(IndexFileNames.SEGMENTS) && !file.equals(IndexFileNames.SEGMENTS_GEN)) {\n        long gen = generationFromSegmentsFileName(file);\n        if (gen > max) {\n          max = gen;\n        }\n      }\n    }\n    return max;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c4ee8d31906e3001783889a491e55f218013a190"],"c4ee8d31906e3001783889a491e55f218013a190":["8b6187898fc4413ccd18229711786550a280383c"]},"commit2Childs":{"284c1d3c8b19931bf6f312fae7470487f5d9e580":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"8b6187898fc4413ccd18229711786550a280383c":["c4ee8d31906e3001783889a491e55f218013a190"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4ee8d31906e3001783889a491e55f218013a190":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}