{"path":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName()))\n          throw new IOException(\"now failing during merge\");\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName()))\n          throw new IOException(\"now failing during merge\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9e22bdf0692bfa61e342b04a6ac7078670c1e16","date":1436866730,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName())) {\n          throw new IOException(\"now failing during merge\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName()))\n          throw new IOException(\"now failing during merge\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0382f86ec362a4c7cf9f0040b757088888ce5d1f","date":1455805674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName())) {\n          IOException ioe = new IOException(\"now failing during merge\");\n          StringWriter sw = new StringWriter();\n          PrintWriter pw = new PrintWriter(sw);\n          ioe.printStackTrace(pw);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"TEST: now throw exc:\\n\" + sw.toString());\n          }\n          throw ioe;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName())) {\n          throw new IOException(\"now failing during merge\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (callStackContainsAnyOf(\"doMerge\")) {\n        IOException ioe = new IOException(\"now failing during merge\");\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        ioe.printStackTrace(pw);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"TEST: now throw exc:\\n\" + sw.toString());\n        }\n        throw ioe;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName())) {\n          IOException ioe = new IOException(\"now failing during merge\");\n          StringWriter sw = new StringWriter();\n          PrintWriter pw = new PrintWriter(sw);\n          ioe.printStackTrace(pw);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"TEST: now throw exc:\\n\" + sw.toString());\n          }\n          throw ioe;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal.FailOnlyOnMerge#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (callStackContainsAnyOf(\"doMerge\")) {\n        IOException ioe = new IOException(\"now failing during merge\");\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n        ioe.printStackTrace(pw);\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"TEST: now throw exc:\\n\" + sw.toString());\n        }\n        throw ioe;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      for (int i = 0; i < trace.length; i++) {\n        if (\"doMerge\".equals(trace[i].getMethodName())) {\n          IOException ioe = new IOException(\"now failing during merge\");\n          StringWriter sw = new StringWriter();\n          PrintWriter pw = new PrintWriter(sw);\n          ioe.printStackTrace(pw);\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"TEST: now throw exc:\\n\" + sw.toString());\n          }\n          throw ioe;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0382f86ec362a4c7cf9f0040b757088888ce5d1f":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2916966cc9815e973c01452a0d76c98c5e0d0926":["0382f86ec362a4c7cf9f0040b757088888ce5d1f"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["0382f86ec362a4c7cf9f0040b757088888ce5d1f","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"d9e22bdf0692bfa61e342b04a6ac7078670c1e16":["0382f86ec362a4c7cf9f0040b757088888ce5d1f"],"0382f86ec362a4c7cf9f0040b757088888ce5d1f":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d9e22bdf0692bfa61e342b04a6ac7078670c1e16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}