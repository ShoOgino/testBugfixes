{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServerTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrServer cuss = new ConcurrentUpdateSolrServer(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    cuss.setParser(new BinaryResponseParser());\n    cuss.setRequestWriter(new BinaryRequestWriter());\n    cuss.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    cuss.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, cuss));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    cuss.blockUntilFinished();\n    cuss.shutdownNow();    \n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = Executors.newFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aa124e0e551d9c32004bc23da5d7a343c8250e0","date":1453908054,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setParser(new BinaryResponseParser());\n    concurrentClient.setRequestWriter(new BinaryRequestWriter());\n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient(serverUrl, cussQueueSize,\n        cussThreadCount, successCounter, errorCounter, errors);\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient(serverUrl, cussQueueSize,\n        cussThreadCount, successCounter, errorCounter, errors);\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new ConcurrentUpdateSolrClient(serverUrl, cussQueueSize, cussThreadCount) {\n      @Override\n      public void handleError(Throwable ex) {\n        errorCounter.incrementAndGet();\n        errors.append(\" \"+ex);\n      }\n      @Override\n      public void onSuccess(HttpResponse resp) {\n        successCounter.incrementAndGet();\n      }\n    };\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient(serverUrl, cussQueueSize,\n        cussThreadCount, successCounter, errorCounter, errors);\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient(serverUrl, cussQueueSize,\n        cussThreadCount, successCounter, errorCounter, errors);\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient(serverUrl, cussQueueSize,\n        cussThreadCount, successCounter, errorCounter, errors);\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest#testConcurrentUpdate().mjava","sourceNew":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","sourceOld":"  @Test\n  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    // for tracking callbacks from CUSS\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    // ensure it doesn't block where there's nothing to do yet\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    // ensure all docs are sent\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    // wait until all requests are processed by CUSS \n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    // expect all requests to be successful\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); // at least one request must have been sent\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7aa124e0e551d9c32004bc23da5d7a343c8250e0":["cb5af3afeddbb803fb785098176e6e177c34261b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["7aa124e0e551d9c32004bc23da5d7a343c8250e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cb5af3afeddbb803fb785098176e6e177c34261b","7aa124e0e551d9c32004bc23da5d7a343c8250e0"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["28288370235ed02234a64753cdbf0c6ec096304a"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["7aa124e0e551d9c32004bc23da5d7a343c8250e0","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cb5af3afeddbb803fb785098176e6e177c34261b":["bafca15d8e408346a67f4282ad1143b88023893b"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"7aa124e0e551d9c32004bc23da5d7a343c8250e0":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","1e6acbaae7af722f17204ceccf0f7db5753eccf3","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"bafca15d8e408346a67f4282ad1143b88023893b":["cb5af3afeddbb803fb785098176e6e177c34261b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"cb5af3afeddbb803fb785098176e6e177c34261b":["7aa124e0e551d9c32004bc23da5d7a343c8250e0","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"28288370235ed02234a64753cdbf0c6ec096304a":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}