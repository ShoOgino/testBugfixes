{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public InvertedFields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      InvertedFields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public InvertedFields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      InvertedFields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.getUniqueFieldCount() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d0ee734a67ae20fd4c683458847aebde606bb02","date":1352490740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (docID < 0 || docID >= numTotalDocs) {\n      throw new IllegalArgumentException(\"doID=\" + docID + \" is out of bounds [0..\" + (numTotalDocs-1) + \"]\");\n    }\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#get(int).mjava","sourceNew":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public Fields get(int docID) throws IOException {\n    if (tvx != null) {\n      Fields fields = new TVFields(docID);\n      if (fields.size() == 0) {\n        // TODO: we can improve writer here, eg write 0 into\n        // tvx file, so we know on first read from tvx that\n        // this doc has no TVs\n        return null;\n      } else {\n        return fields;\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["4d0ee734a67ae20fd4c683458847aebde606bb02"],"407687e67faf6e1f02a211ca078d8e3eed631027":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","4d0ee734a67ae20fd4c683458847aebde606bb02"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["4d0ee734a67ae20fd4c683458847aebde606bb02","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","407687e67faf6e1f02a211ca078d8e3eed631027","4d0ee734a67ae20fd4c683458847aebde606bb02"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["4cc45c615dbb82bf79d5f9550286098367874fbf","407687e67faf6e1f02a211ca078d8e3eed631027","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}