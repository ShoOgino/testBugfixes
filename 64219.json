{"path":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      cloneableIndexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      cloneableIndexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/FieldsReader#FieldsReader(Directory,String,FieldInfos,int,int,int).mjava","sourceNew":null,"sourceOld":"  FieldsReader(Directory d, String segment, FieldInfos fn, int readBufferSize, int docStoreOffset, int size) throws IOException {\n    boolean success = false;\n    isOriginal = true;\n    try {\n      fieldInfos = fn;\n\n      cloneableFieldsStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_EXTENSION, readBufferSize);\n      cloneableIndexStream = d.openInput(segment + \".\" + IndexFileNames.FIELDS_INDEX_EXTENSION, readBufferSize);\n      \n      // First version of fdx did not include a format\n      // header, but, the first int will always be 0 in that\n      // case\n      int firstInt = cloneableIndexStream.readInt();\n      if (firstInt == 0)\n        format = 0;\n      else\n        format = firstInt;\n\n      if (format > FieldsWriter.FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Incompatible format version: \" + format + \" expected \" \n                                        + FieldsWriter.FORMAT_CURRENT + \" or lower\");\n\n      if (format > FieldsWriter.FORMAT)\n        formatSize = 4;\n      else\n        formatSize = 0;\n\n      if (format < FieldsWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES)\n        cloneableFieldsStream.setModifiedUTF8StringsMode();\n\n      fieldsStream = (IndexInput) cloneableFieldsStream.clone();\n\n      final long indexSize = cloneableIndexStream.length()-formatSize;\n      \n      if (docStoreOffset != -1) {\n        // We read only a slice out of this shared fields file\n        this.docStoreOffset = docStoreOffset;\n        this.size = size;\n\n        // Verify the file is long enough to hold all of our\n        // docs\n        assert ((int) (indexSize / 8)) >= size + this.docStoreOffset: \"indexSize=\" + indexSize + \" size=\" + size + \" docStoreOffset=\" + docStoreOffset;\n      } else {\n        this.docStoreOffset = 0;\n        this.size = (int) (indexSize >> 3);\n      }\n\n      indexStream = (IndexInput) cloneableIndexStream.clone();\n      numTotalDocs = (int) (indexSize >> 3);\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}