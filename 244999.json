{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    long hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":["046829b17e246624c179b94d5a20cb53fa945e87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    long hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    long hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    long hits = is.count(q);\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    long hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["ea4107f60b9f95623c16025c9c247412ff809092"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["28288370235ed02234a64753cdbf0c6ec096304a"],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["ea4107f60b9f95623c16025c9c247412ff809092","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["ea4107f60b9f95623c16025c9c247412ff809092","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea4107f60b9f95623c16025c9c247412ff809092":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}