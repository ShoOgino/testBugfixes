{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f6eb2e42e0de57b9d737aa322902b2d3029149","date":1450381224,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"/spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"/spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"/spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"/spellCheckWithWordbreak\";\n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"/spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"/spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"/spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"/spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"/spellCheckWithWordbreak\";\n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"/spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"/spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"/spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"/spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"/spellCheckWithWordbreak\";\n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"/spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    index(id, \"1\", \"lowerfilt\", \"toyota\");\n    index(id, \"2\", \"lowerfilt\", \"chevrolet\");\n    index(id, \"3\", \"lowerfilt\", \"suzuki\");\n    index(id, \"4\", \"lowerfilt\", \"ford\");\n    index(id, \"5\", \"lowerfilt\", \"ferrari\");\n    index(id, \"6\", \"lowerfilt\", \"jaguar\");\n    index(id, \"7\", \"lowerfilt\", \"mclaren\");\n    index(id, \"8\", \"lowerfilt\", \"sonata\");\n    index(id, \"9\", \"lowerfilt\", \"The quick red fox jumped over the lazy brown dogs.\");\n    index(id, \"10\", \"lowerfilt\", \"blue\");\n    index(id, \"12\", \"lowerfilt\", \"glue\");\n    index(id, \"13\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"14\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"15\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"16\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"17\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"18\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"19\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"20\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"21\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"22\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"23\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"24\", \"lowerfilt\", \"The quote red fox jumped over the lazy brown dogs.\");\n    index(id, \"25\", \"lowerfilt\", \"The quicker red fox jumped over the lazy brown dogs.\");\n    index(id, \"26\", \"lowerfilt\", \"rod fix\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"maxScore\", SKIPVAL);\n    // we care only about the spellcheck results\n    handle.put(\"response\", SKIP);\n    handle.put(\"grouped\", SKIP);\n    \n    //Randomly select either IndexBasedSpellChecker or DirectSolrSpellChecker\n    String requestHandlerName = \"spellCheckCompRH_Direct\";\n    String reqHandlerWithWordbreak = \"spellCheckWithWordbreak_Direct\";\n    if(random().nextBoolean()) {\n      requestHandlerName = \"spellCheckCompRH\";\n      reqHandlerWithWordbreak = \"spellCheckWithWordbreak\";   \n    } \n    \n    //Shortcut names\n    String build = SpellingParams.SPELLCHECK_BUILD;\n    String extended = SpellingParams.SPELLCHECK_EXTENDED_RESULTS;\n    String count = SpellingParams.SPELLCHECK_COUNT;\n    String collate = SpellingParams.SPELLCHECK_COLLATE;\n    String collateExtended = SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS;\n    String maxCollationTries = SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES;\n    String maxCollations = SpellingParams.SPELLCHECK_MAX_COLLATIONS;\n    String altTermCount = SpellingParams.SPELLCHECK_ALTERNATIVE_TERM_COUNT;\n    String maxResults = SpellingParams.SPELLCHECK_MAX_RESULTS_FOR_SUGGEST;\n     \n    //Build the dictionary for IndexBasedSpellChecker\n    q(buildRequest(\"*:*\", false, \"spellCheckCompRH\", false, build, \"true\"));\n    \n    //Test Basic Functionality\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), (String[]) null));\n    query(buildRequest(\"toyata\", true, requestHandlerName, random().nextBoolean(), extended, \"true\"));\n    query(buildRequest(\"bluo\", true, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\"));\n    \n    //Test Collate functionality\n    query(buildRequest(\"The quick reb fox jumped over the lazy brown dogs\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"4\", collate, \"true\"));    \n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"10\", collateExtended, \"false\"));\n    query(buildRequest(\"lowerfilt:(+quock +reb)\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"false\"));\n    \n    //Test context-sensitive collate\n    query(buildRequest(\"lowerfilt:(\\\"quick red fox\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \"10\"));\n    query(buildRequest(\"lowerfilt:(\\\"rod fix\\\")\", \n        false, requestHandlerName, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"10\", maxCollations, \"1\", collateExtended, \"false\",\n        altTermCount, \"5\", maxResults, \".10\", \"fq\", \"id:[13 TO 22]\"));\n    \n    //Test word-break spellchecker\n    query(buildRequest(\"lowerfilt:(+quock +redfox +jum +ped)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+rodfix)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n    query(buildRequest(\"lowerfilt:(+son +ata)\", \n        false, reqHandlerWithWordbreak, random().nextBoolean(), extended, \"true\", count, \"10\", \n        collate, \"true\", maxCollationTries, \"0\", maxCollations, \"1\", collateExtended, \"true\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["51f6eb2e42e0de57b9d737aa322902b2d3029149","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["51f6eb2e42e0de57b9d737aa322902b2d3029149","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["51f6eb2e42e0de57b9d737aa322902b2d3029149"]},"commit2Childs":{"51f6eb2e42e0de57b9d737aa322902b2d3029149":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"abb23fcc2461782ab204e61213240feb77d355aa":["51f6eb2e42e0de57b9d737aa322902b2d3029149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"30c8e5574b55d57947e989443dfde611646530ee":[],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}