{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /**This is not a public API. Only used by ZkController\n   * @param coll\n   */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0f3ded0a0111490648d654ac53ced26f70124c","date":1397652066,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /**This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","sourceOld":"  /**This is not a public API. Only used by ZkController\n   * @param coll\n   */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /**This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /**This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /**This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll){\n    synchronized (this){\n      watchedCollections.remove(coll);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      clusterState = clusterState.copyWith(Collections\n          .<String,DocCollection> singletonMap(coll, null));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"193fda8f65fadde8bb2c5336a4f570150f7cd69c","date":1411499997,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      try {\n        updateClusterState(true);\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      clusterState = clusterState.copyWith(Collections\n          .<String,DocCollection> singletonMap(coll, null));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ba6726f047e3cb4c07099505450fa11c486c071","date":1414264828,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      watchedCollectionStates.remove(coll);\n      try {\n        updateClusterState(true);\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      try {\n        updateClusterState(true);\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      watchedCollectionStates.remove(coll);\n      try {\n        updateClusterState();\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      watchedCollectionStates.remove(coll);\n      try {\n        updateClusterState(true);\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    ClusterState.CollectionRef lazyCollectionStateFormat2 = tryMakeLazyCollectionStateFormat2(coll);\n    synchronized (getUpdateLock()) {\n      if (lazyCollectionStateFormat2 != null) {\n        this.lazyCollectionStates.put(coll, lazyCollectionStateFormat2);\n      }\n      constructState();\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(final String coll) {\n    synchronized (this) {\n      watchedCollections.remove(coll);\n      watchedCollectionStates.remove(coll);\n      try {\n        updateClusterState();\n      } catch (KeeperException e) {\n        log.error(\"Error updating state\",e);\n      } catch (InterruptedException e) {\n        log.error(\"Error updating state\",e);\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68281b529b74366dea47f5d3f95138e3c8422474","date":1439843698,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    log.info(\"Removing watch for uninteresting collection {}\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    ClusterState.CollectionRef lazyCollectionStateFormat2 = tryMakeLazyCollectionStateFormat2(coll);\n    synchronized (getUpdateLock()) {\n      if (lazyCollectionStateFormat2 != null) {\n        this.lazyCollectionStates.put(coll, lazyCollectionStateFormat2);\n      } else {\n        this.lazyCollectionStates.remove(coll);\n      }\n      constructState();\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    ClusterState.CollectionRef lazyCollectionStateFormat2 = tryMakeLazyCollectionStateFormat2(coll);\n    synchronized (getUpdateLock()) {\n      if (lazyCollectionStateFormat2 != null) {\n        this.lazyCollectionStates.put(coll, lazyCollectionStateFormat2);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    log.info(\"Removing watch for uninteresting collection {}\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    log.info(\"Removing watch for uninteresting collection {}\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    ClusterState.CollectionRef lazyCollectionStateFormat2 = tryMakeLazyCollectionStateFormat2(coll);\n    synchronized (getUpdateLock()) {\n      if (lazyCollectionStateFormat2 != null) {\n        this.lazyCollectionStates.put(coll, lazyCollectionStateFormat2);\n      } else {\n        this.lazyCollectionStates.remove(coll);\n      }\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    LOG.info(\"Removing watch for uninteresting collection [{}]\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    log.info(\"Removing watch for uninteresting collection {}\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    LOG.info(\"Removing watch for uninteresting collection [{}]\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    LOG.info(\"Removing watch for uninteresting collection [{}]\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    LOG.info(\"Removing watch for uninteresting collection [{}]\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#removeZKWatch(String).mjava","sourceNew":null,"sourceOld":"  /** This is not a public API. Only used by ZkController */\n  public void removeZKWatch(String coll) {\n    LOG.info(\"Removing watch for uninteresting collection [{}]\", coll);\n    interestingCollections.remove(coll);\n    watchedCollectionStates.remove(coll);\n    lazyCollectionStates.put(coll, new LazyCollectionRef(coll));\n    synchronized (getUpdateLock()) {\n      constructState();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"102da6baafc0f534a59f31729343dbab9d3b9e9a":["2ba6726f047e3cb4c07099505450fa11c486c071"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["3a0f3ded0a0111490648d654ac53ced26f70124c"],"3a0f3ded0a0111490648d654ac53ced26f70124c":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0ad30c6a479e764150a3316e57263319775f1df2":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"193fda8f65fadde8bb2c5336a4f570150f7cd69c":["9279b175e5e66258442d2123a50f052219a9cc1b"],"68281b529b74366dea47f5d3f95138e3c8422474":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","d470c8182e92b264680e34081b75e70a9f2b3c89"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7477015ee104ad8144fba06b9b0a8ea93aea50f8","0ad30c6a479e764150a3316e57263319775f1df2"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["68281b529b74366dea47f5d3f95138e3c8422474"],"2ba6726f047e3cb4c07099505450fa11c486c071":["193fda8f65fadde8bb2c5336a4f570150f7cd69c"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"102da6baafc0f534a59f31729343dbab9d3b9e9a":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"3a0f3ded0a0111490648d654ac53ced26f70124c":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"193fda8f65fadde8bb2c5336a4f570150f7cd69c":["2ba6726f047e3cb4c07099505450fa11c486c071"],"68281b529b74366dea47f5d3f95138e3c8422474":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["193fda8f65fadde8bb2c5336a4f570150f7cd69c"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["68281b529b74366dea47f5d3f95138e3c8422474"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"2ba6726f047e3cb4c07099505450fa11c486c071":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["3a0f3ded0a0111490648d654ac53ced26f70124c"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}