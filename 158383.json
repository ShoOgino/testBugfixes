{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(DistribStateManager,String,int).mjava","sourceNew":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#incAndGetId(DistribStateManager,String,int).mjava","sourceNew":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06263309947a9804c326e35ce627be8768e123a4","date":1517286624,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","sourceNew":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = \"/collections/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#incAndGetId(DistribStateManager,String,int).mjava","sourceNew":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","sourceOld":"  public static int incAndGetId(DistribStateManager stateManager, String collection, int defaultValue) {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\"+collection;\n    try {\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.makePath(path);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n      path += \"/counter\";\n      if (!stateManager.hasData(path)) {\n        try {\n          stateManager.createData(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT);\n        } catch (AlreadyExistsException e) {\n          // it's okay if another beats us creating the node\n        }\n      }\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    } catch (IOException | KeeperException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error creating counter node in Zookeeper for collection:\" + collection, e);\n    }\n\n    while (true) {\n      try {\n        int version = 0;\n        int currentId = 0;\n        VersionedData data = stateManager.getData(path, null);\n        if (data != null) {\n          currentId = NumberUtils.bytesToInt(data.getData());\n          version = data.getVersion();\n        }\n        byte[] bytes = NumberUtils.intToBytes(++currentId);\n        stateManager.setData(path, bytes, version);\n        return currentId;\n      } catch (BadVersionException e) {\n        continue;\n      } catch (IOException | KeeperException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\"+collection, e);\n      } catch (InterruptedException e) {\n        Thread.interrupted();\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error inc and get counter from Zookeeper for collection:\" + collection, e);\n      }\n    }\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06263309947a9804c326e35ce627be8768e123a4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["06263309947a9804c326e35ce627be8768e123a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"06263309947a9804c326e35ce627be8768e123a4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["06263309947a9804c326e35ce627be8768e123a4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}