{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      Future<SolrResponse> rsp = submit(() -> simHandleSolrRequest(req));\n      return rsp.get();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","sourceNew":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      Future<SolrResponse> rsp = submit(() -> simHandleSolrRequest(req));\n      return rsp.get();\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#request(SolrRequest).mjava","sourceNew":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public SolrResponse request(SolrRequest req) throws IOException {\n    try {\n      // NOTE: we're doing 2 odd things here:\n      // 1) rather then calling simHandleSolrRequest directly, we're submitting it to the\n      //    executor service and immediately waiting on the Future.\n      //    - This can introduce a delays if there are a lot of existing background tasks submitted\n      // 2) we use simCloudManagerPool directly, instead of using the public submit() method\n      //    - this is because there may be \"user level\" errors (ie: bad input) deliberately generated\n      //      by the testcase.  we're going to immediately catch & re-throw any exceptions, so we don't\n      //      need/want to be wrapped in a LoggingCallable w/getBackgroundTaskFailureCount() tracking\n      Future<SolrResponse> rsp = simCloudManagerPool.submit(() -> simHandleSolrRequest(req));\n      return rsp.get(120, TimeUnit.SECONDS); // longer then this and something is seriously wrong\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66b87d86427dfa19b2ef36b66de83aa9655cea33":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}