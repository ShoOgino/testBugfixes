{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final InvertedFields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final InvertedFields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45e70e926cf079225675770e02754690f9e56910","date":1334193924,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Bits,String,BytesRef,TermState,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns {@link DocsEnum} for the specified field and\n   * {@link TermState}. This may return null, if either the field or the term\n   * does not exists or the {@link TermState} is invalid for the underlying\n   * implementation.*/\n  public final DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, TermState state, boolean needsFreqs) throws IOException {\n    assert state != null;\n    assert field != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        termsEnum.seekExact(term, state);\n        return termsEnum.docs(liveDocs, null, needsFreqs);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"45e70e926cf079225675770e02754690f9e56910":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45e70e926cf079225675770e02754690f9e56910"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["45e70e926cf079225675770e02754690f9e56910"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"45e70e926cf079225675770e02754690f9e56910":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}