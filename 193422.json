{"path":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dp\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23c0f0de44c893e0d072b4c26fc99206ce26687c","date":1493725812,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","sourceNew":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dpf\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dp\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dp,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dpf\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8e07078a2a2938dbc85aab616aa8b0c651a219c","date":1509045642,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testPayloadFunction().mjava","sourceNew":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dpf\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n\n    // Test with debug\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,A)\", CommonParams.DEBUG, \"true\"), \"//float[@name='score']='1.0'\");\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadFunction() {\n    clearIndex();\n\n    assertU(adoc(\"id\",\"1\", \"vals_dpf\",\"A|1.0 B|2.0 C|3.0 mult|50 mult|100 x|22 x|37 x|19\", \"default_f\", \"42.0\"));\n    assertU(commit());\n\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,A)\"), \"//float[@name='score']='1.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,B)\"), \"//float[@name='score']='2.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,C,0)\"), \"//float[@name='score']='3.0'\");\n\n    // Test defaults, constant, field, and function value sources\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,D,37.0)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,default_f)\"), \"//float[@name='score']='42.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,E,mul(2,default_f))\"), \"//float[@name='score']='84.0'\");\n\n    // Test PayloadFunction's for multiple terms, average being the default\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,min)\"), \"//float[@name='score']='50.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,max)\"), \"//float[@name='score']='100.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult,0.0,average)\"), \"//float[@name='score']='75.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,mult)\"), \"//float[@name='score']='75.0'\");\n\n    // Test special \"first\" function, by checking the other functions with same term too\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,min)\"), \"//float[@name='score']='19.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,max)\"), \"//float[@name='score']='37.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,average)\"), \"//float[@name='score']='26.0'\");\n    assertQ(req(\"fl\",\"*,score\",\"q\", \"{!func}payload(vals_dpf,x,0.0,first)\"), \"//float[@name='score']='22.0'\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23c0f0de44c893e0d072b4c26fc99206ce26687c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a8e07078a2a2938dbc85aab616aa8b0c651a219c":["23c0f0de44c893e0d072b4c26fc99206ce26687c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8e07078a2a2938dbc85aab616aa8b0c651a219c"],"23c0f0de44c893e0d072b4c26fc99206ce26687c":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a8e07078a2a2938dbc85aab616aa8b0c651a219c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23c0f0de44c893e0d072b4c26fc99206ce26687c":["e9017cf144952056066919f1ebc7897ff9bd71b1","a8e07078a2a2938dbc85aab616aa8b0c651a219c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["23c0f0de44c893e0d072b4c26fc99206ce26687c"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}