{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffer == null) return;\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffer == null) return;\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef91b05d61248dc26575ce95a28d4efd6689263","date":1285045459,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        if (isClone || buffer == null) return;\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffer == null) return;\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        if (isClone || buffer == null) return;\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffer == null) return;\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        if (isClone || buffer == null) return;\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      // unmap the buffer (if enabled) and at least unset it for GC\n      try {\n        if (isClone || buffer == null) return;\n        cleanMapping(buffer);\n      } finally {\n        buffer = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67b1ed9ea6095c69c8a3467d84dfa75ebb591768","date":1321993123,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      curBuf = null; curBufIndex = 0;\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0b917a986a3f3db7d1038c139eb39a43e984cb","date":1322061230,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones.keySet()) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      curBuf = null; curBufIndex = 0;\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a91f1cc16ed4800c8016352e2fa1df91faddc8","date":1323301844,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones.keySet()) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones.keySet()) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones.keySet()) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        \n        // for extra safety unset also all clones' buffers:\n        synchronized(this.clones) {\n          for (final MMapIndexInput clone : this.clones) {\n            assert clone.isClone;\n            clone.unsetBuffers();\n          }\n          this.clones.clear();\n        }\n        \n        curBuf = null; curBufIndex = 0; // nuke curr pointer early\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          cleanMapping(buffers[bufNr]);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["67b1ed9ea6095c69c8a3467d84dfa75ebb591768"],"68b4c6c95719e3020e407649a20b68538649beeb":["aef91b05d61248dc26575ce95a28d4efd6689263"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0c0b917a986a3f3db7d1038c139eb39a43e984cb","11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","aef91b05d61248dc26575ce95a28d4efd6689263"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["aef91b05d61248dc26575ce95a28d4efd6689263","68b4c6c95719e3020e407649a20b68538649beeb"],"aef91b05d61248dc26575ce95a28d4efd6689263":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"11a91f1cc16ed4800c8016352e2fa1df91faddc8":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67b1ed9ea6095c69c8a3467d84dfa75ebb591768":["68b4c6c95719e3020e407649a20b68538649beeb"],"efc85580874d26ca9617f9ad61628d56f6859762":["0c0b917a986a3f3db7d1038c139eb39a43e984cb","11a91f1cc16ed4800c8016352e2fa1df91faddc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0b917a986a3f3db7d1038c139eb39a43e984cb":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","11a91f1cc16ed4800c8016352e2fa1df91faddc8","efc85580874d26ca9617f9ad61628d56f6859762"],"68b4c6c95719e3020e407649a20b68538649beeb":["9ed208afa1e7aa98899ddb1dedfddedddf898253","67b1ed9ea6095c69c8a3467d84dfa75ebb591768"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"aef91b05d61248dc26575ce95a28d4efd6689263":["68b4c6c95719e3020e407649a20b68538649beeb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"11a91f1cc16ed4800c8016352e2fa1df91faddc8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e","efc85580874d26ca9617f9ad61628d56f6859762"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"67b1ed9ea6095c69c8a3467d84dfa75ebb591768":["0c0b917a986a3f3db7d1038c139eb39a43e984cb"],"efc85580874d26ca9617f9ad61628d56f6859762":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","aef91b05d61248dc26575ce95a28d4efd6689263"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253","efc85580874d26ca9617f9ad61628d56f6859762","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}