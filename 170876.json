{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}