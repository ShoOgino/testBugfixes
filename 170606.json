{"path":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","sourceNew":"  public void testInvalidElementSizes() {\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = random.nextInt(Integer.MAX_VALUE);\n      final int elemSize = random.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","sourceOld":"  public void testInvalidElementSizes() {\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = random.nextInt(Integer.MAX_VALUE);\n      final int elemSize = random.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","sourceNew":"  public void testInvalidElementSizes() {\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = random().nextInt(Integer.MAX_VALUE);\n      final int elemSize = random().nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","sourceOld":"  public void testInvalidElementSizes() {\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = random.nextInt(Integer.MAX_VALUE);\n      final int elemSize = random.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18aa90677ea290faf18b72f717c91101a55b1707","date":1362337180,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","sourceNew":"  public void testInvalidElementSizes() {\n    final Random rnd = random();\n    final int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = rnd.nextInt(Integer.MAX_VALUE);\n      final int elemSize = rnd.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","sourceOld":"  public void testInvalidElementSizes() {\n    int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = random().nextInt(Integer.MAX_VALUE);\n      final int elemSize = random().nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07fb506be36b0c08b7c79b3089e587ec6ffc56d4","date":1417257475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInvalidElementSizes().mjava","sourceNew":"  public void testInvalidElementSizes() {\n    final Random rnd = random();\n    final int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = rnd.nextInt(ArrayUtil.MAX_ARRAY_LENGTH);\n      final int elemSize = rnd.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","sourceOld":"  public void testInvalidElementSizes() {\n    final Random rnd = random();\n    final int num = atLeast(10000);\n    for (int iter = 0; iter < num; iter++) {\n      final int minTargetSize = rnd.nextInt(Integer.MAX_VALUE);\n      final int elemSize = rnd.nextInt(11);\n      final int v = ArrayUtil.oversize(minTargetSize, elemSize);\n      assertTrue(v >= minTargetSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18aa90677ea290faf18b72f717c91101a55b1707":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"07fb506be36b0c08b7c79b3089e587ec6ffc56d4":["18aa90677ea290faf18b72f717c91101a55b1707"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07fb506be36b0c08b7c79b3089e587ec6ffc56d4"]},"commit2Childs":{"18aa90677ea290faf18b72f717c91101a55b1707":["07fb506be36b0c08b7c79b3089e587ec6ffc56d4"],"07fb506be36b0c08b7c79b3089e587ec6ffc56d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["18aa90677ea290faf18b72f717c91101a55b1707"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}