{"path":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"0d2655e586e23a63fbfddf4f6858e5d2b920d672","date":1322177075,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader, field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        final boolean matchDoc(int doc) {\n          if (doc >= maxDoc) {\n            // TODO: this makes no sense we should check this on the caller level\n            throw new ArrayIndexOutOfBoundsException(\"doc: \"+doc + \" maxDoc: \" + maxDoc);\n          }\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        final boolean matchDoc(int doc) {\n          if (doc >= maxDoc) {\n            // TODO: this makes no sense we should check this on the caller level\n            throw new ArrayIndexOutOfBoundsException(\"doc: \"+doc + \" maxDoc: \" + maxDoc);\n          }\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader, field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader, field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        final boolean matchDoc(int doc) {\n          if (doc >= maxDoc) {\n            // TODO: this makes no sense we should check this on the caller level\n            throw new ArrayIndexOutOfBoundsException(\"doc: \"+doc + \" maxDoc: \" + maxDoc);\n          }\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        final boolean matchDoc(int doc) {\n          if (doc >= maxDoc) {\n            // TODO: this makes no sense we should check this on the caller level\n            throw new ArrayIndexOutOfBoundsException(\"doc: \"+doc + \" maxDoc: \" + maxDoc);\n          }\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader(), field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader, field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader(), field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader, field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldValueFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader(), field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs)\n      throws IOException {\n    final Bits docsWithField = FieldCache.DEFAULT.getDocsWithField(\n        context.reader(), field);\n    if (negate) {\n      if (docsWithField instanceof MatchAllBits) {\n        return null;\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return !docsWithField.get(doc);\n        }\n      };\n    } else {\n      if (docsWithField instanceof MatchNoBits) {\n        return null;\n      }\n      if (docsWithField instanceof DocIdSet) {\n        // UweSays: this is always the case for our current impl - but who knows\n        // :-)\n        return BitsFilteredDocIdSet.wrap((DocIdSet) docsWithField, acceptDocs);\n      }\n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) {\n          return docsWithField.get(doc);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0d2655e586e23a63fbfddf4f6858e5d2b920d672":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d55536a3153c541924af58559781c36228d25420"],"d55536a3153c541924af58559781c36228d25420":["0d2655e586e23a63fbfddf4f6858e5d2b920d672"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d55536a3153c541924af58559781c36228d25420","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0d2655e586e23a63fbfddf4f6858e5d2b920d672":["d55536a3153c541924af58559781c36228d25420"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d2655e586e23a63fbfddf4f6858e5d2b920d672"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d55536a3153c541924af58559781c36228d25420":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}