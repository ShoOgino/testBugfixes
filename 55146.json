{"path":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier#KNearestFuzzyClassifier(IndexReader,Similarity,Analyzer,Query,int,String,String...).mjava","commits":[{"id":"e71b30ca45cace3116f6ee06a0bbcb578707fa52","date":1495110978,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier#KNearestFuzzyClassifier(IndexReader,Similarity,Analyzer,Query,int,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link KNearestFuzzyClassifier}.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link BM25Similarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestFuzzyClassifier(IndexReader indexReader, Similarity similarity, Analyzer analyzer, Query query, int k,\n                                 String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.indexSearcher = new IndexSearcher(indexReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new BM25Similarity());\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/KNearestFuzzyClassifier#KNearestFuzzyClassifier(IndexReader,Similarity,Analyzer,Query,int,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link KNearestFuzzyClassifier}.\n   *\n   * @param indexReader    the reader on the index to be used for classification\n   * @param analyzer       an {@link Analyzer} used to analyze unseen text\n   * @param similarity     the {@link Similarity} to be used by the underlying {@link IndexSearcher} or {@code null}\n   *                       (defaults to {@link BM25Similarity})\n   * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}\n   *                       if all the indexed docs should be used\n   * @param k              the no. of docs to select in the MLT results to find the nearest neighbor\n   * @param classFieldName the name of the field used as the output for the classifier\n   * @param textFieldNames the name of the fields used as the inputs for the classifier, they can contain boosting indication e.g. title^10\n   */\n  public KNearestFuzzyClassifier(IndexReader indexReader, Similarity similarity, Analyzer analyzer, Query query, int k,\n                                 String classFieldName, String... textFieldNames) {\n    this.textFieldNames = textFieldNames;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.indexSearcher = new IndexSearcher(indexReader);\n    if (similarity != null) {\n      this.indexSearcher.setSimilarity(similarity);\n    } else {\n      this.indexSearcher.setSimilarity(new BM25Similarity());\n    }\n    this.query = query;\n    this.k = k;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e71b30ca45cace3116f6ee06a0bbcb578707fa52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e71b30ca45cace3116f6ee06a0bbcb578707fa52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e71b30ca45cace3116f6ee06a0bbcb578707fa52"]},"commit2Childs":{"e71b30ca45cace3116f6ee06a0bbcb578707fa52":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e71b30ca45cace3116f6ee06a0bbcb578707fa52","e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}