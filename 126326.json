{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","commits":[{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testQuery() {\n    DisjunctionMaxQuery dismax = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"foo\", \"bar\")), new TermQuery(new Term(\"baz\", \"bam\"))), 1.0f);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.MUST_NOT)\n        .add(dismax, BooleanClause.Occur.MUST)\n        .build();\n    long actual = sizeOf(bq);\n    long estimated = RamUsageEstimator.sizeOfObject(bq);\n    assertTrue(actual < estimated);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0633445968876e74a19e422a3a955ca6e00ad0da","date":1561710807,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","sourceNew":"  public void testQuery() {\n    DisjunctionMaxQuery dismax = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"foo1\", \"bar1\")), new TermQuery(new Term(\"baz1\", \"bam1\"))), 1.0f);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo2\", \"bar2\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"foo3\", \"baz3\")), BooleanClause.Occur.MUST_NOT)\n        .add(dismax, BooleanClause.Occur.MUST)\n        .build();\n    long actual = sizeOf(bq);\n    long estimated = RamUsageEstimator.sizeOfObject(bq);\n    // sizeOfObject uses much lower default size estimate than we normally use\n    // but the query-specific default is so large that the comparison becomes meaningless.\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.5);\n  }\n\n","sourceOld":"  public void testQuery() {\n    DisjunctionMaxQuery dismax = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"foo\", \"bar\")), new TermQuery(new Term(\"baz\", \"bam\"))), 1.0f);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"foo\", \"baz\")), BooleanClause.Occur.MUST_NOT)\n        .add(dismax, BooleanClause.Occur.MUST)\n        .build();\n    long actual = sizeOf(bq);\n    long estimated = RamUsageEstimator.sizeOfObject(bq);\n    assertTrue(actual < estimated);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e99d92de6748e3bbd2dd7b72695cdb952b2d835","date":1579100291,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testQuery().mjava","sourceNew":"  public void testQuery() {\n    DisjunctionMaxQuery dismax = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"foo1\", \"bar1\")), new TermQuery(new Term(\"baz1\", \"bam1\"))), 1.0f);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo2\", \"bar2\")), BooleanClause.Occur.SHOULD)\n        .add(new PhraseQuery.Builder().add(new Term(\"foo3\", \"baz3\")).build(), BooleanClause.Occur.MUST_NOT)\n        .add(dismax, BooleanClause.Occur.MUST)\n        .build();\n    long actual = sizeOf(bq);\n    long estimated = RamUsageEstimator.sizeOfObject(bq);\n    // sizeOfObject uses much lower default size estimate than we normally use\n    // but the query-specific default is so large that the comparison becomes meaningless.\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.5);\n  }\n\n","sourceOld":"  public void testQuery() {\n    DisjunctionMaxQuery dismax = new DisjunctionMaxQuery(\n        Arrays.asList(new TermQuery(new Term(\"foo1\", \"bar1\")), new TermQuery(new Term(\"baz1\", \"bam1\"))), 1.0f);\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo2\", \"bar2\")), BooleanClause.Occur.SHOULD)\n        .add(new FuzzyQuery(new Term(\"foo3\", \"baz3\")), BooleanClause.Occur.MUST_NOT)\n        .add(dismax, BooleanClause.Occur.MUST)\n        .build();\n    long actual = sizeOf(bq);\n    long estimated = RamUsageEstimator.sizeOfObject(bq);\n    // sizeOfObject uses much lower default size estimate than we normally use\n    // but the query-specific default is so large that the comparison becomes meaningless.\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["0633445968876e74a19e422a3a955ca6e00ad0da"],"0633445968876e74a19e422a3a955ca6e00ad0da":["fe90d104db258964b96e50418b9caa0c156eafda"],"fe90d104db258964b96e50418b9caa0c156eafda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"]},"commit2Childs":{"3e99d92de6748e3bbd2dd7b72695cdb952b2d835":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0633445968876e74a19e422a3a955ca6e00ad0da":["3e99d92de6748e3bbd2dd7b72695cdb952b2d835"],"fe90d104db258964b96e50418b9caa0c156eafda":["0633445968876e74a19e422a3a955ca6e00ad0da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe90d104db258964b96e50418b9caa0c156eafda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}