{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/TokenInfoDictionaryTest#newDictionary(String...).mjava","commits":[{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/TokenInfoDictionaryTest#newDictionary(String...).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/test/org/apache/lucene/analysis/ja/dict/TokenInfoDictionaryTest#newDictionary(String...).mjava","sourceNew":"  private TokenInfoDictionary newDictionary(String... entries) throws Exception {\n    Path dir = createTempDir();\n    try (OutputStream out = Files.newOutputStream(dir.resolve(\"test.csv\"));\n         PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))) {\n      for (String entry : entries) {\n        printer.println(entry);\n      }\n    }\n    TokenInfoDictionaryBuilder builder = new TokenInfoDictionaryBuilder(DictionaryFormat.IPADIC, \"utf-8\", true);\n    TokenInfoDictionaryWriter writer = builder.build(dir);\n    writer.write(dir);\n    String dictionaryPath = TokenInfoDictionary.class.getName().replace('.', '/');\n    // We must also load the other files (in BinaryDictionary) from the correct path\n    return new TokenInfoDictionary(ResourceScheme.FILE, dir.resolve(dictionaryPath).toString());\n  }\n\n","sourceOld":"  private TokenInfoDictionary newDictionary(String... entries) throws Exception {\n    Path dir = createTempDir();\n    try (OutputStream out = Files.newOutputStream(dir.resolve(\"test.csv\"));\n         PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, \"utf-8\"))) {\n      for (String entry : entries) {\n        printer.println(entry);\n      }\n    }\n    TokenInfoDictionaryBuilder builder = new TokenInfoDictionaryBuilder(DictionaryFormat.IPADIC, \"utf-8\", true);\n    TokenInfoDictionaryWriter writer = builder.build(dir.toString());\n    writer.write(dir.toString());\n    String dictionaryPath = TokenInfoDictionary.class.getName().replace('.', separatorChar);\n    // We must also load the other files (in BinaryDictionary) from the correct path\n    return new TokenInfoDictionary(ResourceScheme.FILE, dir.resolve(dictionaryPath).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"267efbc60d751ebd767c8fc6aa38e4829c47ed3e","date":1561629805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/TokenInfoDictionaryTest#newDictionary(String...).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/TokenInfoDictionaryTest#newDictionary(String...).mjava","sourceNew":"  private TokenInfoDictionary newDictionary(String... entries) throws Exception {\n    Path dir = createTempDir();\n    try (OutputStream out = Files.newOutputStream(dir.resolve(\"test.csv\"));\n         PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))) {\n      for (String entry : entries) {\n        printer.println(entry);\n      }\n    }\n    Files.createFile(dir.resolve(\"unk.def\"));\n    Files.createFile(dir.resolve(\"char.def\"));\n    try (OutputStream out = Files.newOutputStream(dir.resolve(\"matrix.def\"));\n        PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))) {\n      printer.println(\"1 1\");\n    }\n    DictionaryBuilder.build(DictionaryFormat.IPADIC, dir, dir, \"utf-8\", true);\n    String dictionaryPath = TokenInfoDictionary.class.getName().replace('.', '/');\n    // We must also load the other files (in BinaryDictionary) from the correct path\n    return new TokenInfoDictionary(ResourceScheme.FILE, dir.resolve(dictionaryPath).toString());\n  }\n\n","sourceOld":"  private TokenInfoDictionary newDictionary(String... entries) throws Exception {\n    Path dir = createTempDir();\n    try (OutputStream out = Files.newOutputStream(dir.resolve(\"test.csv\"));\n         PrintWriter printer = new PrintWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))) {\n      for (String entry : entries) {\n        printer.println(entry);\n      }\n    }\n    TokenInfoDictionaryBuilder builder = new TokenInfoDictionaryBuilder(DictionaryFormat.IPADIC, \"utf-8\", true);\n    TokenInfoDictionaryWriter writer = builder.build(dir);\n    writer.write(dir);\n    String dictionaryPath = TokenInfoDictionary.class.getName().replace('.', '/');\n    // We must also load the other files (in BinaryDictionary) from the correct path\n    return new TokenInfoDictionary(ResourceScheme.FILE, dir.resolve(dictionaryPath).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"267efbc60d751ebd767c8fc6aa38e4829c47ed3e":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["267efbc60d751ebd767c8fc6aa38e4829c47ed3e"]},"commit2Childs":{"267efbc60d751ebd767c8fc6aa38e4829c47ed3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["267efbc60d751ebd767c8fc6aa38e4829c47ed3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}