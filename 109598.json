{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","commits":[{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      cumulativeDiff += yychar - inputStart;\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      cumulativeDiff += yychar - inputStart;\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      cumulativeDiff += yychar - inputStart;\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6adf8ea59977891966389011f3905e09932183","date":1332622471,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      cumulativeDiff += yychar - inputStart;\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#zzDoEOF().mjava","sourceNew":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","sourceOld":"  /**\n   * Contains user EOF-code, which will be executed exactly once,\n   * when the end of file is reached\n   */\n  private void zzDoEOF() {\n    if (!zzEOFDone) {\n      zzEOFDone = true;\n      switch (zzLexicalState) {\n    case SCRIPT:\n    case COMMENT:\n    case SCRIPT_COMMENT:\n    case STYLE:\n    case STYLE_COMMENT:\n    case SINGLE_QUOTED_STRING:\n    case DOUBLE_QUOTED_STRING:\n    case END_TAG_TAIL_EXCLUDE:\n    case END_TAG_TAIL_SUBSTITUTE:\n    case START_TAG_TAIL_EXCLUDE:\n    case SERVER_SIDE_INCLUDE:\n    case START_TAG_TAIL_SUBSTITUTE: { // Exclude\n      // add (length of input that won't be output) [ - (substitution length) = 0 ]\n      cumulativeDiff += yychar - inputStart;\n      // position the correction at (already output length) [ + (substitution length) = 0 ]\n      addOffCorrectMap(outputCharCount, cumulativeDiff);\n      outputSegment.clear();\n      eofReturnValue = -1;\n      break;\n    }\n    case CHARACTER_REFERENCE_TAIL: {        // Substitute\n      // At end of file, allow char refs without semicolons\n      // add (length of input that won't be output) - (substitution length)\n      cumulativeDiff += inputSegment.length() - outputSegment.length();\n      // position the correction at (already output length) + (substitution length)\n      addOffCorrectMap(outputCharCount + outputSegment.length(), cumulativeDiff);\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    case BANG:\n    case CDATA:\n    case AMPERSAND:\n    case NUMERIC_CHARACTER:\n    case END_TAG_TAIL_INCLUDE:\n    case START_TAG_TAIL_INCLUDE:\n    case LEFT_ANGLE_BRACKET:\n    case LEFT_ANGLE_BRACKET_SLASH:\n    case LEFT_ANGLE_BRACKET_SPACE: {        // Include\n      outputSegment = inputSegment;\n      eofReturnValue = outputSegment.nextChar();\n      break;\n    }\n    default: {\n      eofReturnValue = -1;\n    }\n  }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7d6adf8ea59977891966389011f3905e09932183"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"7d6adf8ea59977891966389011f3905e09932183":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7d6adf8ea59977891966389011f3905e09932183":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7d6adf8ea59977891966389011f3905e09932183","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}