{"path":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#_checkBackupSuccess(String).mjava","commits":[{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#_checkBackupSuccess(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method that works with either named or unnamemed backups\n   */\n  private String _checkBackupSuccess(final String backupName) throws Exception {\n    final String label = (null == backupName ? \"latest backup\" : backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Status of {}: {}\", label, data);\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData) {\n      // no backup has finished yet\n      return null;\n    }\n    \n    final Object exception = backupData.get(\"exception\");\n    assertNull(\"Backup failure: \" + label, exception);\n\n    if (\"success\".equals(backupData.get(\"status\"))\n        && (null == backupName || backupName.equals(backupData.get(\"snapshotName\"))) ) {\n      assert null != backupData.get(\"directoryName\");\n      return backupData.get(\"directoryName\");\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#_checkBackupSuccess(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#_checkBackupSuccess(String).mjava","sourceNew":"  /**\n   * Helper method that works with either named or unnamemed backups\n   */\n  private String _checkBackupSuccess(final String backupName) throws Exception {\n    final String label = (null == backupName ? \"latest backup\" : backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    @SuppressWarnings({\"rawtypes\"})\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Status of {}: {}\", label, data);\n    @SuppressWarnings({\"unchecked\"})\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData) {\n      // no backup has finished yet\n      return null;\n    }\n    \n    final Object exception = backupData.get(\"exception\");\n    assertNull(\"Backup failure: \" + label, exception);\n\n    if (\"success\".equals(backupData.get(\"status\"))\n        && (null == backupName || backupName.equals(backupData.get(\"snapshotName\"))) ) {\n      assert null != backupData.get(\"directoryName\");\n      return backupData.get(\"directoryName\");\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Helper method that works with either named or unnamemed backups\n   */\n  private String _checkBackupSuccess(final String backupName) throws Exception {\n    final String label = (null == backupName ? \"latest backup\" : backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Status of {}: {}\", label, data);\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData) {\n      // no backup has finished yet\n      return null;\n    }\n    \n    final Object exception = backupData.get(\"exception\");\n    assertNull(\"Backup failure: \" + label, exception);\n\n    if (\"success\".equals(backupData.get(\"status\"))\n        && (null == backupName || backupName.equals(backupData.get(\"snapshotName\"))) ) {\n      assert null != backupData.get(\"directoryName\");\n      return backupData.get(\"directoryName\");\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"]},"commit2Childs":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}