{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final long interval = bytes.addressInterval;\n\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        final long size;\n        if (bytes.count % interval == 0) {\n          size = bytes.count / interval;\n        } else {\n          size = 1L + bytes.count / interval;\n        }\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n        addressInstances.put(field.number, addrInstance);\n      }\n      addresses = addrInstance;\n    }\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final long interval = bytes.addressInterval;\n\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        final long size;\n        if (bytes.count % interval == 0) {\n          size = bytes.count / interval;\n        } else {\n          size = 1L + bytes.count / interval;\n        }\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n        addressInstances.put(field.number, addrInstance);\n      }\n      addresses = addrInstance;\n    }\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n    final long interval = bytes.addressInterval;\n\n    final MonotonicBlockPackedReader addresses;\n    synchronized (addressInstances) {\n      MonotonicBlockPackedReader addrInstance = addressInstances.get(field.number);\n      if (addrInstance == null) {\n        data.seek(bytes.addressesOffset);\n        final long size;\n        if (bytes.count % interval == 0) {\n          size = bytes.count / interval;\n        } else {\n          size = 1L + bytes.count / interval;\n        }\n        addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, size, false);\n        addressInstances.put(field.number, addrInstance);\n      }\n      addresses = addrInstance;\n    }\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getCompressedBinary(FieldInfo,BinaryEntry).mjava","sourceNew":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","sourceOld":"  private BinaryDocValues getCompressedBinary(FieldInfo field, final BinaryEntry bytes) throws IOException {\n    final IndexInput data = this.data.clone();\n\n    final MonotonicBlockPackedReader addresses = getIntervalInstance(data, field, bytes);\n    \n    return new CompressedBinaryDocValues(bytes, addresses, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}