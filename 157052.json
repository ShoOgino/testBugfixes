{"path":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#get().mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/FieldTypeCollectionResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      Map<String,FieldType> sortedFieldTypes = new TreeMap<String, FieldType>(getSchema().getFieldTypes());\n      for (FieldType fieldType : sortedFieldTypes.values()) {\n        props.add(getFieldTypeProperties(fieldType));\n      }\n      getSolrResponse().add(IndexSchema.FIELD_TYPES, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      Map<String,FieldType> sortedFieldTypes = new TreeMap<String, FieldType>(getSchema().getFieldTypes());\n      for (FieldType fieldType : sortedFieldTypes.values()) {\n        props.add(getFieldTypeProperties(fieldType));\n      }\n      getSolrResponse().add(FIELD_TYPES, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#get().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#get().mjava","sourceNew":"  @Override\n  public Representation get() {\n    try {\n      List<SimpleOrderedMap<Object>> props = new ArrayList<>();\n      Map<String,FieldType> sortedFieldTypes = new TreeMap<>(getSchema().getFieldTypes());\n      for (FieldType fieldType : sortedFieldTypes.values()) {\n        props.add(getFieldTypeProperties(fieldType));\n      }\n      getSolrResponse().add(IndexSchema.FIELD_TYPES, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","sourceOld":"  @Override\n  public Representation get() {\n    try {\n      List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>();\n      Map<String,FieldType> sortedFieldTypes = new TreeMap<String, FieldType>(getSchema().getFieldTypes());\n      for (FieldType fieldType : sortedFieldTypes.values()) {\n        props.add(getFieldTypeProperties(fieldType));\n      }\n      getSolrResponse().add(IndexSchema.FIELD_TYPES, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/FieldTypeCollectionResource#get().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Representation get() {\n    try {\n      List<SimpleOrderedMap<Object>> props = new ArrayList<>();\n      Map<String,FieldType> sortedFieldTypes = new TreeMap<>(getSchema().getFieldTypes());\n      for (FieldType fieldType : sortedFieldTypes.values()) {\n        props.add(getFieldTypeProperties(fieldType));\n      }\n      getSolrResponse().add(IndexSchema.FIELD_TYPES, props);\n    } catch (Exception e) {\n      getSolrResponse().setException(e);\n    }\n    handlePostExecution(log);\n\n    return new SolrOutputRepresentation();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f494bc636a1302995e4930fdccd371eeda452f87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f494bc636a1302995e4930fdccd371eeda452f87"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f494bc636a1302995e4930fdccd371eeda452f87"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f494bc636a1302995e4930fdccd371eeda452f87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}