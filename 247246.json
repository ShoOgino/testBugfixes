{"path":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, true, getName(), getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, true, getName(), getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, tag, true, getName(), getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, true, getName(), getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, tag, true, getName(), getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    registry = manager.registry(registryName);\n    metricsMap = new MetricsMap((detailed, map) -> {\n      long now = System.nanoTime();\n      long delta = Math.max(now - previous, 1);\n      double seconds = delta / 1000000000.0;\n\n      long hits_total = blockCacheHit.get();\n      long hits_delta = hits_total - blockCacheHit_last.get();\n      blockCacheHit_last.set(hits_total);\n\n      long miss_total = blockCacheMiss.get();\n      long miss_delta = miss_total - blockCacheMiss_last.get();\n      blockCacheMiss_last.set(miss_total);\n\n      long evict_total = blockCacheEviction.get();\n      long evict_delta = evict_total - blockCacheEviction_last.get();\n      blockCacheEviction_last.set(evict_total);\n\n      long storeFail_total = blockCacheStoreFail.get();\n      long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n      blockCacheStoreFail_last.set(storeFail_total);\n\n      long lookups_delta = hits_delta + miss_delta;\n      long lookups_total = hits_total + miss_total;\n\n      map.put(\"size\", blockCacheSize.get());\n      map.put(\"lookups\", lookups_total);\n      map.put(\"hits\", hits_total);\n      map.put(\"evictions\", evict_total);\n      map.put(\"storeFails\", storeFail_total);\n      map.put(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n      map.put(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n      map.put(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n      map.put(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n      map.put(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n      map.put(\"time_delta\", seconds);  // seconds since last call\n\n      // TODO: these aren't really related to the BlockCache\n      map.put(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      map.put(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n      previous = now;\n\n    });\n    manager.registerGauge(this, registryName, metricsMap, true, getName(), getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}