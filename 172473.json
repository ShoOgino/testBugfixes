{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","commits":[{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"/dev/null","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      liveNodes.add(\"localhost:\" + (8963 + i) + \"_solr\");\n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042891089d57d0e6af18ea6cec15f9e9a7da7d25","date":1355271969,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      liveNodes.add(\"localhost:\" + (8963 + i) + \"_solr\");\n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d719e68da585d5331dd85d66a3abc322f8b7cc6e","date":1355712777,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"/dev/null","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent)EasyMock.getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent)EasyMock.getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent)EasyMock.getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent)EasyMock.getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return new HashSet<String>();\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f9f2cd4fc995f484da092b8100a389072ed49ff","date":1386062964,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001ed520e8a09b54914b9a9ee36cd13a30cbf599","date":1388361178,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      solrZkClientMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<String>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n    \n    \n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n    \n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(List.class),anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCrateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"707fc23d793376ed98be0bd2f100d32dd5a9c0df","date":1422324604,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60eb685516df898800430464f48430012701a84b","date":1424217900,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState(anyBoolean());\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820caca5cfb0cdddf30483276ec437235352d916","date":1431698671,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState(anyBoolean());\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState(anyBoolean());\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState(anyBoolean());\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#commonMocks(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#commonMocks(int).mjava","sourceNew":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","sourceOld":"  protected Set<String> commonMocks(int liveNodesCount) throws Exception {\n\n    shardHandlerFactoryMock.getShardHandler();\n    expectLastCall().andAnswer(new IAnswer<ShardHandler>() {\n      @Override\n      public ShardHandler answer() throws Throwable {\n        log.info(\"SHARDHANDLER\");\n        return shardHandlerMock;\n      }\n    }).anyTimes();\n    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Set.class), EasyMock.anyLong());\n    expectLastCall().andAnswer(new IAnswer<List>() {\n      @Override\n      public List answer() throws Throwable {\n        Object result;\n        int count = 0;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n          count++;\n          if (count > 1) return null;\n        }\n\n        return Arrays.asList(result);\n      }\n    }).anyTimes();\n\n    workQueueMock.getTailId();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result = null;\n        Iterator iter = queue.iterator();\n        while(iter.hasNext()) {\n          result = iter.next();\n        }\n        return result==null ? null : ((QueueEvent)result).getId();\n      }\n    }).anyTimes();\n\n    workQueueMock.peek(true);\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        Object result;\n        while ((result = queue.peek()) == null) {\n          Thread.sleep(1000);\n        }\n        return result;\n      }\n    }).anyTimes();\n    \n    workQueueMock.remove(anyObject(QueueEvent.class));\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        queue.remove((QueueEvent) getCurrentArguments()[0]);\n        return null;\n      }\n    }).anyTimes();\n    \n    workQueueMock.poll();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return queue.poll();\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.getClusterState();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return clusterStateMock;\n      }\n    }).anyTimes();\n    \n    zkStateReaderMock.getZkClient();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return solrZkClientMock;\n      }\n    }).anyTimes();\n\n    zkStateReaderMock.updateClusterState();\n\n    clusterStateMock.getCollections();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return collectionsSet;\n      }\n    }).anyTimes();\n    final Set<String> liveNodes = new HashSet<>();\n    for (int i = 0; i < liveNodesCount; i++) {\n      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n      liveNodes.add(address);\n      \n      zkStateReaderMock.getBaseUrlForNodeName(address);\n      expectLastCall().andAnswer(new IAnswer<Object>() {\n        @Override\n        public Object answer() throws Throwable {\n          // This works as long as this test does not use a \n          // webapp context with an underscore in it\n          return address.replaceAll(\"_\", \"/\");\n        }\n      }).anyTimes();\n      \n    }\n    zkStateReaderMock.getClusterProps();\n    expectLastCall().andAnswer(new IAnswer<Map>() {\n      @Override\n      public Map answer() throws Throwable {\n        return new HashMap();\n      }\n    });\n\n    solrZkClientMock.getZkClientTimeout();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return 30000;\n      }\n    }).anyTimes();\n    \n    clusterStateMock.hasCollection(anyObject(String.class));\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return collectionsSet.contains(key);\n      }\n    } ).anyTimes();\n\n\n    clusterStateMock.getLiveNodes();\n    expectLastCall().andAnswer(new IAnswer<Object>() {\n      @Override\n      public Object answer() throws Throwable {\n        return liveNodes;\n      }\n    }).anyTimes();\n    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        zkMap.put(key, null);\n        handleCreateCollMessage((byte[]) getCurrentArguments()[1]);\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<String>() {\n      @Override\n      public String answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return key;\n      }\n    }).anyTimes();\n\n    solrZkClientMock.exists(anyObject(String.class),anyBoolean());\n    expectLastCall().andAnswer(new IAnswer<Boolean>() {\n      @Override\n      public Boolean answer() throws Throwable {\n        String key = (String) getCurrentArguments()[0];\n        return zkMap.containsKey(key);\n      }\n    }).anyTimes();\n    \n    zkMap.put(\"/configs/myconfig\", null);\n    \n    return liveNodes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d719e68da585d5331dd85d66a3abc322f8b7cc6e"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60eb685516df898800430464f48430012701a84b":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"001ed520e8a09b54914b9a9ee36cd13a30cbf599":["3f9f2cd4fc995f484da092b8100a389072ed49ff"],"820caca5cfb0cdddf30483276ec437235352d916":["60eb685516df898800430464f48430012701a84b"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6f26f74e4969851a019d28f10315cb1c77786f22"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["c83f985d9828d30801541f1eed26aa3169646baf"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["d719e68da585d5331dd85d66a3abc322f8b7cc6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","1eeda7e62e149f90eee8895af874c74efa7d4852"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["820caca5cfb0cdddf30483276ec437235352d916"],"d719e68da585d5331dd85d66a3abc322f8b7cc6e":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["001ed520e8a09b54914b9a9ee36cd13a30cbf599"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1eeda7e62e149f90eee8895af874c74efa7d4852","3f9f2cd4fc995f484da092b8100a389072ed49ff"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"c83f985d9828d30801541f1eed26aa3169646baf":["6f26f74e4969851a019d28f10315cb1c77786f22"],"3f9f2cd4fc995f484da092b8100a389072ed49ff":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"f0a4eeff354e8081247783f424a8e5a0fe106633":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"60eb685516df898800430464f48430012701a84b":["820caca5cfb0cdddf30483276ec437235352d916"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"001ed520e8a09b54914b9a9ee36cd13a30cbf599":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"820caca5cfb0cdddf30483276ec437235352d916":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["707fc23d793376ed98be0bd2f100d32dd5a9c0df"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","3f9f2cd4fc995f484da092b8100a389072ed49ff"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["dd45d4a2ee01a1932d33eec42f5272c2402da679","1eeda7e62e149f90eee8895af874c74efa7d4852","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f0a4eeff354e8081247783f424a8e5a0fe106633"],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","c83f985d9828d30801541f1eed26aa3169646baf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"d719e68da585d5331dd85d66a3abc322f8b7cc6e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["d719e68da585d5331dd85d66a3abc322f8b7cc6e"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"707fc23d793376ed98be0bd2f100d32dd5a9c0df":["60eb685516df898800430464f48430012701a84b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3f9f2cd4fc995f484da092b8100a389072ed49ff":["001ed520e8a09b54914b9a9ee36cd13a30cbf599","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c83f985d9828d30801541f1eed26aa3169646baf":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b7605579001505896d48b07160075a5c8b8e128e","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}