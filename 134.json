{"path":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newSetQuery(String,float...).mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newSetQuery(String,float...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.\n   * This is the points equivalent of {@code TermsQuery}.\n   * Values will be rounded to the closest half-float if they\n   * cannot be represented accurately as a half-float.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, float... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    float[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newSetQuery(String,float...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.\n   * This is the points equivalent of {@code TermsQuery}.\n   * Values will be rounded to the closest half-float if they\n   * cannot be represented accurately as a half-float.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, float... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    float[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#newSetQuery(String,float...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a query matching any of the specified 1D values.\n   * This is the points equivalent of {@code TermsQuery}.\n   * Values will be rounded to the closest half-float if they\n   * cannot be represented accurately as a half-float.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param values all values to match\n   */\n  public static Query newSetQuery(String field, float... values) {\n\n    // Don't unexpectedly change the user's incoming values array:\n    float[] sortedValues = values.clone();\n    Arrays.sort(sortedValues);\n\n    final BytesRef encoded = new BytesRef(new byte[BYTES]);\n\n    return new PointInSetQuery(field, 1, BYTES,\n                               new PointInSetQuery.Stream() {\n\n                                 int upto;\n\n                                 @Override\n                                 public BytesRef next() {\n                                   if (upto == sortedValues.length) {\n                                     return null;\n                                   } else {\n                                     encodeDimension(sortedValues[upto], encoded.bytes, 0);\n                                     upto++;\n                                     return encoded;\n                                   }\n                                 }\n                               }) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value.length == BYTES;\n        return Float.toString(decodeDimension(value, 0));\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}