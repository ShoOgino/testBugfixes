{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","commits":[{"id":"0ceb5bb30e401cb218b31197b1a9aa47e77cda17","date":1336330521,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      assertHits(new FunctionQuery(\n          new NormValueSource(\"byte\")),\n          new float[] { 0f, 0f });\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a701a7aab388afa1412a3dc23b4115c321f478c4","date":1413486320,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of wether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      assertHits(new FunctionQuery(\n          new NormValueSource(\"byte\")),\n          new float[] { 0f, 0f });\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of wether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      assertHits(new FunctionQuery(\n          new NormValueSource(\"byte\")),\n          new float[] { 0f, 0f });\n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of wether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new DefaultSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 0f, 0f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/TestValueSources#testNorm().mjava","sourceNew":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity();\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","sourceOld":"  public void testNorm() throws Exception {\n    Similarity saved = searcher.getSimilarity(true);\n    try {\n      // no norm field (so agnostic to indexed similarity)\n      searcher.setSimilarity(new ClassicSimilarity());\n      ValueSource vs = new NormValueSource(\"byte\");\n      assertHits(new FunctionQuery(vs), new float[] { 1f, 1f });\n\n      // regardless of whether norms exist, value source exists == 0\n      assertAllExist(vs);\n\n      vs = new NormValueSource(\"text\");\n      assertAllExist(vs);\n      \n    } finally {\n      searcher.setSimilarity(saved);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["615370d2b876c3435773b5174df2e2242ad7981a","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["615370d2b876c3435773b5174df2e2242ad7981a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["81d0720146de53dd3a4a023d2a3d1089d86d748d","615370d2b876c3435773b5174df2e2242ad7981a"],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17","a701a7aab388afa1412a3dc23b4115c321f478c4"],"615370d2b876c3435773b5174df2e2242ad7981a":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"485545da3b4429d6f138b4baac573a97820ee93b":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["485545da3b4429d6f138b4baac573a97820ee93b"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["a701a7aab388afa1412a3dc23b4115c321f478c4"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0ceb5bb30e401cb218b31197b1a9aa47e77cda17":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a701a7aab388afa1412a3dc23b4115c321f478c4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"615370d2b876c3435773b5174df2e2242ad7981a":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ceb5bb30e401cb218b31197b1a9aa47e77cda17"],"485545da3b4429d6f138b4baac573a97820ee93b":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"a701a7aab388afa1412a3dc23b4115c321f478c4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["485545da3b4429d6f138b4baac573a97820ee93b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}