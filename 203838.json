{"path":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","commits":[{"id":"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","date":1471849333,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(leaderJetty, replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(leaderJetty, replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(leaderJetty, replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7540b2d98e89684a4076a7e99ba2f8ec7983de7c","date":1483428128,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","sourceNew":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","sourceOld":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(leaderJetty, replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/PeerSyncReplicationTest#forceNodeFailureAndDoPeerSync(boolean).mjava","sourceNew":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","sourceOld":"  private CloudJettyRunner forceNodeFailureAndDoPeerSync(boolean disableFingerprint)\n      throws Exception {\n    // kill non leader - new leader could have all the docs or be missing one\n    CloudJettyRunner leaderJetty = shardToLeaderJetty.get(\"shard1\");\n\n    List<CloudJettyRunner> nonLeaderJetties = getOtherAvailableJetties(leaderJetty);\n    CloudJettyRunner replicaToShutDown = nonLeaderJetties.get(random().nextInt(nonLeaderJetties.size())); // random non leader node\n\n    forceNodeFailures(Arrays.asList(replicaToShutDown));\n\n    // two docs need to be sync'd back when replica restarts\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    indexDoc(id, docId, i1, 50, tlong, 50, t1,\n        \"document number \" + docId++);\n    commit();\n\n    bringUpDeadNodeAndEnsureNoReplication(leaderJetty, replicaToShutDown, disableFingerprint);\n\n    return replicaToShutDown;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c835cc1a7b07477a469cdb1bf6c67bc05b85c07"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"]},"commit2Childs":{"4c835cc1a7b07477a469cdb1bf6c67bc05b85c07":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c835cc1a7b07477a469cdb1bf6c67bc05b85c07","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7540b2d98e89684a4076a7e99ba2f8ec7983de7c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7540b2d98e89684a4076a7e99ba2f8ec7983de7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}