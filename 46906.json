{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a","date":1272922845,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    TeeSinkTokenFilter.SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}