{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#pickProximate(GeoPoint[]).mjava","commits":[{"id":"8b879b14da40ab73551b75835099a61e622a83d3","date":1522406622,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#pickProximate(GeoPoint[]).mjava","pathOld":"/dev/null","sourceNew":"    private GeoPoint pickProximate(final GeoPoint[] points) {\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"No off-plane intersection points were found; can't compute traversal\");\n      } else if (points.length == 1) {\n        return points[0];\n      } else {\n        final double p1dist = computeSquaredDistance(points[0], intersectionPoint);\n        final double p2dist = computeSquaredDistance(points[1], intersectionPoint);\n        if (p1dist < p2dist) {\n          return points[0];\n        } else if (p2dist < p1dist) {\n          return points[1];\n        } else {\n          throw new IllegalArgumentException(\"Neither off-plane intersection point matched intersection point; intersection = \"+intersectionPoint+\"; offplane choice 0: \"+points[0]+\"; offplane choice 1: \"+points[1]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":4,"author":"Karl Wright","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#pickProximate(GeoPoint[]).mjava","sourceNew":null,"sourceOld":"    private GeoPoint pickProximate(final GeoPoint[] points) {\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"No off-plane intersection points were found; can't compute traversal\");\n      } else if (points.length == 1) {\n        return points[0];\n      } else {\n        final double p1dist = computeSquaredDistance(points[0], intersectionPoint);\n        final double p2dist = computeSquaredDistance(points[1], intersectionPoint);\n        if (p1dist < p2dist) {\n          return points[0];\n        } else if (p2dist < p1dist) {\n          return points[1];\n        } else {\n          throw new IllegalArgumentException(\"Neither off-plane intersection point matched intersection point; intersection = \"+intersectionPoint+\"; offplane choice 0: \"+points[0]+\"; offplane choice 1: \"+points[1]);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e456381ade0a256838cbf558702284e345c8d3d6","date":1524920804,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.DualCrossingEdgeIterator#pickProximate(GeoPoint[]).mjava","pathOld":"/dev/null","sourceNew":"    private GeoPoint pickProximate(final GeoPoint[] points) {\n      if (points.length == 0) {\n        throw new IllegalArgumentException(\"No off-plane intersection points were found; can't compute traversal\");\n      } else if (points.length == 1) {\n        return points[0];\n      } else {\n        final double p1dist = computeSquaredDistance(points[0], intersectionPoint);\n        final double p2dist = computeSquaredDistance(points[1], intersectionPoint);\n        if (p1dist < p2dist) {\n          return points[0];\n        } else if (p2dist < p1dist) {\n          return points[1];\n        } else {\n          throw new IllegalArgumentException(\"Neither off-plane intersection point matched intersection point; intersection = \"+intersectionPoint+\"; offplane choice 0: \"+points[0]+\"; offplane choice 1: \"+points[1]);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b879b14da40ab73551b75835099a61e622a83d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e456381ade0a256838cbf558702284e345c8d3d6":["039615f2ceafe5881c61222281f45a0631b90174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039615f2ceafe5881c61222281f45a0631b90174":["8b879b14da40ab73551b75835099a61e622a83d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e456381ade0a256838cbf558702284e345c8d3d6"]},"commit2Childs":{"8b879b14da40ab73551b75835099a61e622a83d3":["039615f2ceafe5881c61222281f45a0631b90174"],"e456381ade0a256838cbf558702284e345c8d3d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b879b14da40ab73551b75835099a61e622a83d3"],"039615f2ceafe5881c61222281f45a0631b90174":["e456381ade0a256838cbf558702284e345c8d3d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}