{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","commits":[{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestCategoryPath#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n    \n    String[] path_tests = new String[] {\n        \"/test\", // empty in the beginning\n        \"test//foo\", // empty in the middle\n    };\n    \n    for (String path : path_tests) {\n      try {\n        assertNotNull(new FacetLabel(path, '/'));\n        fail(\"empty or null components should not be allowed: \" + path);\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n\n    // a trailing path separator is produces only one component\n    assertNotNull(new FacetLabel(\"test/\", '/'));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ae9e790a8c29b694d3f588cd65188861e4c3789","date":1388955134,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new FacetField(\"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new AssociationFacetField(new BytesRef(), \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new IntAssociationFacetField(17, \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new FloatAssociationFacetField(17.0f, \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n    }\n    try {\n      new FacetField(null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FacetField(\"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new IntAssociationFacetField(17, null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new IntAssociationFacetField(17, \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FloatAssociationFacetField(17.0f, null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FloatAssociationFacetField(17.0f, \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new AssociationFacetField(new BytesRef(), null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new AssociationFacetField(new BytesRef(), \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(null, \"abc\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"\", \"abc\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"dim\", null);\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"dim\", \"\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // ok\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestFacetLabel#testEmptyNullComponents().mjava","sourceNew":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    // empty or null components should not be allowed.\n    for (String[] components : components_tests) {\n      expectThrows(IllegalArgumentException.class, () -> {\n        new FacetLabel(components);\n      });\n      expectThrows(IllegalArgumentException.class, () -> {\n        new FacetField(\"dim\", components);\n      });\n      expectThrows(IllegalArgumentException.class, () -> {\n        new AssociationFacetField(new BytesRef(), \"dim\", components);\n      });\n      expectThrows(IllegalArgumentException.class, () -> {\n        new IntAssociationFacetField(17, \"dim\", components);\n      });\n      expectThrows(IllegalArgumentException.class, () -> {\n        new FloatAssociationFacetField(17.0f, \"dim\", components);\n      });\n    }\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      new FacetField(null, new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new FacetField(\"\", new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new IntAssociationFacetField(17, null, new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new IntAssociationFacetField(17, \"\", new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new FloatAssociationFacetField(17.0f, null, new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new FloatAssociationFacetField(17.0f, \"\", new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new AssociationFacetField(new BytesRef(), null, new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new AssociationFacetField(new BytesRef(), \"\", new String[] {\"abc\"});\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SortedSetDocValuesFacetField(null, \"abc\");\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SortedSetDocValuesFacetField(\"\", \"abc\");\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SortedSetDocValuesFacetField(\"dim\", null);\n    });\n    expectThrows(IllegalArgumentException.class, () -> {\n      new SortedSetDocValuesFacetField(\"dim\", \"\");\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyNullComponents() throws Exception {\n    // LUCENE-4724: CategoryPath should not allow empty or null components\n    String[][] components_tests = new String[][] {\n      new String[] { \"\", \"test\" }, // empty in the beginning\n      new String[] { \"test\", \"\" }, // empty in the end\n      new String[] { \"test\", \"\", \"foo\" }, // empty in the middle\n      new String[] { null, \"test\" }, // null at the beginning\n      new String[] { \"test\", null }, // null in the end\n      new String[] { \"test\", null, \"foo\" }, // null in the middle\n    };\n\n    for (String[] components : components_tests) {\n      try {\n        assertNotNull(new FacetLabel(components));\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new FacetField(\"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new AssociationFacetField(new BytesRef(), \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new IntAssociationFacetField(17, \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n      try {\n        new FloatAssociationFacetField(17.0f, \"dim\", components);\n        fail(\"empty or null components should not be allowed: \" + Arrays.toString(components));\n      } catch (IllegalArgumentException e) {\n        // expected\n      }\n    }\n    try {\n      new FacetField(null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FacetField(\"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new IntAssociationFacetField(17, null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new IntAssociationFacetField(17, \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FloatAssociationFacetField(17.0f, null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new FloatAssociationFacetField(17.0f, \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new AssociationFacetField(new BytesRef(), null, new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new AssociationFacetField(new BytesRef(), \"\", new String[] {\"abc\"});\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(null, \"abc\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"\", \"abc\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"dim\", null);\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n    try {\n      new SortedSetDocValuesFacetField(\"dim\", \"\");\n      fail(\"empty or null components should not be allowed\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","bugFix":["c190847801a50f4dd20fd639bdc29b54ea3b288b","6ae9e790a8c29b694d3f588cd65188861e4c3789","9f98959552975d79aafaf0f964262eac98ded407"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["6ae9e790a8c29b694d3f588cd65188861e4c3789"],"78522aad83283ca58fae08fd89406b65429d0229":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe9946d3cd818d329255e4c325597ac3480503e"],"6ae9e790a8c29b694d3f588cd65188861e4c3789":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"bbe9946d3cd818d329255e4c325597ac3480503e":["78522aad83283ca58fae08fd89406b65429d0229"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78522aad83283ca58fae08fd89406b65429d0229","3cc728b07df73b197e6d940d27f9b08b63918f13"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"78522aad83283ca58fae08fd89406b65429d0229":["bbe9946d3cd818d329255e4c325597ac3480503e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6ae9e790a8c29b694d3f588cd65188861e4c3789"],"6ae9e790a8c29b694d3f588cd65188861e4c3789":["05fe562aa248790944d43cdd478f512572835ba0"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}