{"path":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","commits":[{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#finishAdd(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","sourceOld":"    private final void finishAdd(int docCount) throws IOException {\n      if (!started) {\n        minValue = maxValue = 0;\n      }\n      byte headerType = typeOrd;\n      if (typeOrd == PACKED) {\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          writePackedInts(docCount);\n          return; // done\n        } else {\n          headerType = FIXED_64;\n        }\n      }\n      initDataOut(headerType);\n      array.write(datOut, docCount);\n      assert datOut != null; \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      final IndexOutput dataOut = getOrCreateDataOut();\n      try {\n        if (!started) {\n          minValue = maxValue = 0;\n        }\n        final long delta = maxValue - minValue;\n        // if we exceed the range of positive longs we must switch to fixed\n        // ints\n        if (delta <= (maxValue >= 0 && minValue <= 0 ? Long.MAX_VALUE\n            : Long.MAX_VALUE - 1) && delta >= 0) {\n          dataOut.writeByte(PACKED);\n          writePackedInts(dataOut, docCount);\n          return; // done\n        } else {\n          dataOut.writeByte(FIXED_64);\n        }\n        writeData(dataOut);\n        writeZeros(docCount - (lastDocID + 1), dataOut);\n        success = true;\n      } finally {\n        resetPool();\n        if (success) {\n          IOUtils.close(dataOut);\n        } else {\n          IOUtils.closeWhileHandlingException(dataOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["85eb75e0c0203e44dcf686f35876cf6080f3a671","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"85eb75e0c0203e44dcf686f35876cf6080f3a671":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}