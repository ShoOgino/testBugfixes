{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSearchRate() throws Exception {\n    // start a few more jetty-s\n    for (int i = 0; i < 3; i++) {\n      cluster.startJettySolrRunner();\n    }\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>)ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>)ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double)r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>)ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>)shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double)r));\n    Map<String, Double> collectionRates = (Map<String, Double>)ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>)ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testAboveSearchRate().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#testSearchRate().mjava","sourceNew":"  @Test\n  public void testAboveSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"aboveRate_collection\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,\n        CloudTestUtils.clusterShape(1, 2));\n\n    // the trigger is initially disabled so that we have the time to set up listeners\n    // and generate the traffic\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : false,\" +\n        \"'collections' : '\" + COLL1 + \"',\" +\n        \"'aboveRate' : 1.0,\" +\n        \"'belowRate' : 0.1,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'started',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['STARTED'],\" +\n        \"'class' : '\" + StartedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute'],\" +\n        \"'class' : '\" + CapturingTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'finished',\" +\n        \"'trigger' : 'search_rate_trigger1',\" +\n        \"'stage' : ['SUCCEEDED'],\" +\n        \"'class' : '\" + FinishedProcessingListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n\n    // enable the trigger\n    String resumeTriggerCommand = \"{\" +\n        \"'resume-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, resumeTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(TimeUnit.MILLISECONDS.convert(waitForSeconds + 1, TimeUnit.SECONDS));\n\n    boolean await = started.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    await = finished.await(60, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not finish processing\", await);\n\n    // suspend the trigger\n    String suspendTriggerCommand = \"{\" +\n        \"'suspend-trigger' : {\" +\n        \"'name' : 'search_rate_trigger1'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, suspendTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    timeSource.sleep(5000);\n\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 3, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(2).stage.toString());\n    assertNull(events.get(2).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSearchRate() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLL1 = \"collection1\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,\n        \"conf\", 1, 2);\n    create.process(solrClient);\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'search_rate_trigger',\" +\n        \"'event' : 'searchRate',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'rate' : 1.0,\" +\n        \"'actions' : [\" +\n        \"{'name':'compute','class':'\" + ComputePlanAction.class.getName() + \"'},\" +\n        \"{'name':'execute','class':'\" + ExecutePlanAction.class.getName() + \"'},\" +\n        \"{'name':'test','class':'\" + TestSearchRateAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'srt',\" +\n        \"'trigger' : 'search_rate_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'afterAction': ['compute', 'execute', 'test'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n    SolrParams query = params(CommonParams.Q, \"*:*\");\n    for (int i = 0; i < 500; i++) {\n      solrClient.query(COLL1, query);\n    }\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(5000);\n    List<CapturedEvent> events = listenerEvents.get(\"srt\");\n    assertEquals(listenerEvents.toString(), 4, events.size());\n    assertEquals(\"AFTER_ACTION\", events.get(0).stage.toString());\n    assertEquals(\"compute\", events.get(0).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(1).stage.toString());\n    assertEquals(\"execute\", events.get(1).actionName);\n    assertEquals(\"AFTER_ACTION\", events.get(2).stage.toString());\n    assertEquals(\"test\", events.get(2).actionName);\n    assertEquals(\"SUCCEEDED\", events.get(3).stage.toString());\n    assertNull(events.get(3).actionName);\n\n    CapturedEvent ev = events.get(0);\n    long now = timeSource.getTimeNs();\n    // verify waitFor\n    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());\n    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(\"node\");\n    assertNotNull(\"nodeRates\", nodeRates);\n    assertTrue(nodeRates.toString(), nodeRates.size() > 0);\n    AtomicDouble totalNodeRate = new AtomicDouble();\n    nodeRates.forEach((n, r) -> totalNodeRate.addAndGet(r));\n    List<ReplicaInfo> replicaRates = (List<ReplicaInfo>) ev.event.getProperties().get(\"replica\");\n    assertNotNull(\"replicaRates\", replicaRates);\n    assertTrue(replicaRates.toString(), replicaRates.size() > 0);\n    AtomicDouble totalReplicaRate = new AtomicDouble();\n    replicaRates.forEach(r -> {\n      assertTrue(r.toString(), r.getVariable(\"rate\") != null);\n      totalReplicaRate.addAndGet((Double) r.getVariable(\"rate\"));\n    });\n    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(\"shard\");\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    shardRates = (Map<String, Object>) shardRates.get(COLL1);\n    assertNotNull(\"shardRates\", shardRates);\n    assertEquals(shardRates.toString(), 1, shardRates.size());\n    AtomicDouble totalShardRate = new AtomicDouble();\n    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));\n    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(\"collection\");\n    assertNotNull(\"collectionRates\", collectionRates);\n    assertEquals(collectionRates.toString(), 1, collectionRates.size());\n    Double collectionRate = collectionRates.get(COLL1);\n    assertNotNull(collectionRate);\n    assertTrue(collectionRate > 5.0);\n    assertEquals(collectionRate, totalNodeRate.get(), 5.0);\n    assertEquals(collectionRate, totalShardRate.get(), 5.0);\n    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);\n\n    // check operations\n    List<Map<String, Object>> ops = (List<Map<String, Object>>) ev.context.get(\"properties.operations\");\n    assertNotNull(ops);\n    assertTrue(ops.size() > 1);\n    for (Map<String, Object> m : ops) {\n      assertEquals(\"ADDREPLICA\", m.get(\"params.action\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}