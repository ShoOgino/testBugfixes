{"path":"backwards/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}