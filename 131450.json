{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","commits":[{"id":"e135e47842b3fd6a4797b7e4787241b06817efa2","date":1429817254,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","pathOld":"/dev/null","sourceNew":"  private ModifiableSolrParams getRandomParamsFloat() {\n    String field = new String[]{\"range_facet_d_dv\", \"range_facet_f_dv\", \"range_facet_d\", \"range_facet_f\", \"range_facet_mv_f\", \"range_facet_f1\", \"range_facet_f1_dv\"}[random().nextInt(7)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Float[] values = new Float[2];\n    do {\n      values[0] = random().nextFloat() * 3000;\n      values[1] = random().nextFloat() * 3000;\n    } while (values[0].equals(values[1]));\n    Arrays.sort(values);\n    float gapNum = Math.max(1, random().nextFloat() * 3000);\n    \n    params.add(FacetParams.FACET_RANGE_START, String.valueOf(values[0]));\n    params.add(FacetParams.FACET_RANGE_END, String.valueOf(values[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%f\", gapNum));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0a64ffcef6ae839baf314a48817008c796b053d","date":1499974056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsFloat() {\n    String field = new String[]{\"range_facet_d_dv\", \"range_facet_f_dv\", \"range_facet_d\", \"range_facet_f\", \"range_facet_mv_f\", \"range_facet_f1\", \"range_facet_f1_dv\"}[random().nextInt(7)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Float[] values = new Float[2];\n    do {\n      values[0] = random().nextFloat() * 3000 * (random().nextBoolean()?-1:1);\n      values[1] = random().nextFloat() * 3000 * (random().nextBoolean()?-1:1);\n    } while (values[0].equals(values[1]));\n    Arrays.sort(values);\n    float gapNum = Math.max(1, random().nextFloat() * 3000);\n    \n    params.add(FacetParams.FACET_RANGE_START, String.valueOf(values[0]));\n    params.add(FacetParams.FACET_RANGE_END, String.valueOf(values[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%f\", gapNum));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsFloat() {\n    String field = new String[]{\"range_facet_d_dv\", \"range_facet_f_dv\", \"range_facet_d\", \"range_facet_f\", \"range_facet_mv_f\", \"range_facet_f1\", \"range_facet_f1_dv\"}[random().nextInt(7)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Float[] values = new Float[2];\n    do {\n      values[0] = random().nextFloat() * 3000;\n      values[1] = random().nextFloat() * 3000;\n    } while (values[0].equals(values[1]));\n    Arrays.sort(values);\n    float gapNum = Math.max(1, random().nextFloat() * 3000);\n    \n    params.add(FacetParams.FACET_RANGE_START, String.valueOf(values[0]));\n    params.add(FacetParams.FACET_RANGE_END, String.valueOf(values[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%f\", gapNum));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#getRandomParamsFloat().mjava","sourceNew":"  private ModifiableSolrParams getRandomParamsFloat() {\n    String field = new String[]{\"range_facet_d_dv\", \"range_facet_f_dv\", \"range_facet_d\", \"range_facet_f\", \"range_facet_mv_f\", \"range_facet_f1\", \"range_facet_f1_dv\"}[random().nextInt(7)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Float[] values = new Float[2];\n    do {\n      values[0] = random().nextFloat() * 3000 * (random().nextBoolean()?-1:1);\n      values[1] = random().nextFloat() * 3000 * (random().nextBoolean()?-1:1);\n    } while (values[0].equals(values[1]));\n    Arrays.sort(values);\n    float gapNum = Math.max(1, random().nextFloat() * 3000);\n    \n    params.add(FacetParams.FACET_RANGE_START, String.valueOf(values[0]));\n    params.add(FacetParams.FACET_RANGE_END, String.valueOf(values[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%f\", gapNum));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","sourceOld":"  private ModifiableSolrParams getRandomParamsFloat() {\n    String field = new String[]{\"range_facet_d_dv\", \"range_facet_f_dv\", \"range_facet_d\", \"range_facet_f\", \"range_facet_mv_f\", \"range_facet_f1\", \"range_facet_f1_dv\"}[random().nextInt(7)];\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Float[] values = new Float[2];\n    do {\n      values[0] = random().nextFloat() * 3000;\n      values[1] = random().nextFloat() * 3000;\n    } while (values[0].equals(values[1]));\n    Arrays.sort(values);\n    float gapNum = Math.max(1, random().nextFloat() * 3000);\n    \n    params.add(FacetParams.FACET_RANGE_START, String.valueOf(values[0]));\n    params.add(FacetParams.FACET_RANGE_END, String.valueOf(values[1]));\n    params.add(FacetParams.FACET_RANGE_GAP, String.format(Locale.ROOT, \"+%f\", gapNum));\n    addCommonRandomRangeParams(params);\n    params.add(FacetParams.FACET_RANGE, field);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["e135e47842b3fd6a4797b7e4787241b06817efa2","d0a64ffcef6ae839baf314a48817008c796b053d"],"d0a64ffcef6ae839baf314a48817008c796b053d":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0a64ffcef6ae839baf314a48817008c796b053d"]},"commit2Childs":{"e135e47842b3fd6a4797b7e4787241b06817efa2":["aaf90fc29510e72665ac7934f34c3d1c25efad64","d0a64ffcef6ae839baf314a48817008c796b053d"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"d0a64ffcef6ae839baf314a48817008c796b053d":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e135e47842b3fd6a4797b7e4787241b06817efa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}