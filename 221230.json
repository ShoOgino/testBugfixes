{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"/dev/null","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"/dev/null","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"/dev/null","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock pendingCount=\" + pendingCount);\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (!fieldInfo.omitTermFreqAndPositions) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock();\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copy(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e6e919043fa85ee891123768dd655a98edbbf63c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["fd1bfe3cedf815c14939d170d53031c88eb5c444","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e6e919043fa85ee891123768dd655a98edbbf63c"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"fd1bfe3cedf815c14939d170d53031c88eb5c444":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}