{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #reopen} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #reopen}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeIndexReader#getVersion().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   */\n  public abstract long getVersion();\n\n","sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * a change is made with {@link IndexWriter}.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":["8a8259c922a83abc544609227a60d48e5ee93e7e","537382020d6797489b93fa8aeb62495d5018b0ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * a change is made with {@link IndexWriter}.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * {@link IndexWriter#commit} is called.</p>\n   *\n   * <p>If instead this reader is a near real-time reader\n   * (ie, obtained by a call to {@link\n   * IndexWriter#getReader}, or by calling {@link #openIfChanged}\n   * on a near real-time reader), then this method returns\n   * the version of the last commit done by the writer.\n   * Note that even as further changes are made with the\n   * writer, the version will not changed until a commit is\n   * completed.  Thus, you should not rely on this method to\n   * determine when a near real-time reader should be\n   * opened.  Use {@link #isCurrent} instead.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getVersion().mjava","sourceNew":null,"sourceOld":"  /**\n   * Version number when this IndexReader was opened. Not\n   * implemented in the IndexReader base class.\n   *\n   * <p>If this reader is based on a Directory (ie, was\n   * created by calling {@link #open}, or {@link #openIfChanged} on\n   * a reader based on a Directory), then this method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * a change is made with {@link IndexWriter}.</p>\n   *\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public long getVersion() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8a8259c922a83abc544609227a60d48e5ee93e7e","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["8a8259c922a83abc544609227a60d48e5ee93e7e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","5b6fdfce35d0adb18836cf8711abe487a934df33","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["5b6fdfce35d0adb18836cf8711abe487a934df33","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}