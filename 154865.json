{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","commits":[{"id":"44c9a458cd4ceff8755128274a56cc87271cb3d9","date":1493722297,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<2','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06acd077cb162e9c9715b0ebf0c1542ca9c381e1","date":1493723955,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<2','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<2','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070f4513c7b9fb42b83f9c863b917c96c58397f2","date":1494234201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<2','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    Map op = suggester.getOperation();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'!overseer','replica':'#ANY'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica(){\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n         new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n         new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n     ));\n\n    Map<String, Map<String,Object>> tagsMap = (Map) Utils.fromJSONString( \"{\" +\n          \"      '127.0.0.1:60099_solr':{\" +\n          \"        'cores':0,\" +\n          \"            'freedisk':918005641216},\" +\n          \"      '127.0.0.1:60089_solr':{\" +\n          \"        'cores':2,\" +\n          \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Policy.Suggester.Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new Policy.ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap()),\n        new Policy.ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMoveReplica().mjava","sourceNew":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testMoveReplica() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n\n\n    Map replicaInfoMap = (Map) Utils.fromJSONString(\"{ '127.0.0.1:60099_solr':{},\" +\n        \" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[\" +\n        \"      {'core_node1':{}},\" +\n        \"      {'core_node2':{}}]}}}\");\n    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, \"127.0.0.1:60089_solr/compute_plan_action_test\");\n    m.put(\"shard1\", Arrays.asList(\n        new ReplicaInfo(\"core_node1\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap()),\n        new ReplicaInfo(\"core_node2\", \"compute_plan_action_test\", \"shard1\", Replica.Type.NRT, Collections.emptyMap())\n    ));\n\n    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString(\"{\" +\n        \"      '127.0.0.1:60099_solr':{\" +\n        \"        'cores':0,\" +\n        \"            'freedisk':918005641216},\" +\n        \"      '127.0.0.1:60089_solr':{\" +\n        \"        'cores':2,\" +\n        \"            'freedisk':918005641216}}}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    Policy.Session session = policy.createSession(new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return tagsMap.get(node);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return (Map<String, Map<String, List<ReplicaInfo>>>) replicaInfoMap.get(node);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return replicaInfoMap.keySet();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    });\n\n    Policy.Suggester suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)\n        .hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    SolrParams op = suggester.getOperation().getParams();\n    assertNotNull(op);\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA).hint(Hint.TARGET_NODE, \"127.0.0.1:60099_solr\");\n    op = suggester.getOperation().getParams();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"070f4513c7b9fb42b83f9c863b917c96c58397f2":["06acd077cb162e9c9715b0ebf0c1542ca9c381e1"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06acd077cb162e9c9715b0ebf0c1542ca9c381e1":["44c9a458cd4ceff8755128274a56cc87271cb3d9"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"070f4513c7b9fb42b83f9c863b917c96c58397f2":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"44c9a458cd4ceff8755128274a56cc87271cb3d9":["06acd077cb162e9c9715b0ebf0c1542ca9c381e1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44c9a458cd4ceff8755128274a56cc87271cb3d9","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"06acd077cb162e9c9715b0ebf0c1542ca9c381e1":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}