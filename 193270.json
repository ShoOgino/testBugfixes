{"path":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","bfd83e4021bd95c6db3a56f97db85525f1f206be","bfd83e4021bd95c6db3a56f97db85525f1f206be","bfd83e4021bd95c6db3a56f97db85525f1f206be"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    iwCommit.lock();\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        openWriter();\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        openWriter();\n        writer.expungeDeletes();\n      }\n      \n      closeWriter();\n\n      callPostCommitCallbacks();\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      core.getSearcher(true,false,waitSearcher);\n\n      // reset commit tracking\n      tracker.didCommit();\n\n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      iwCommit.unlock();\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#commit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void commit(CommitUpdateCommand cmd) throws IOException {\n    IndexWriter writer = indexWriterProvider.getIndexWriter();\n    if (cmd.optimize) {\n      optimizeCommands.incrementAndGet();\n    } else {\n      commitCommands.incrementAndGet();\n      if (cmd.expungeDeletes) expungeDeleteCommands.incrementAndGet();\n    }\n\n    Future[] waitSearcher = null;\n    if (cmd.waitSearcher) {\n      waitSearcher = new Future[1];\n    }\n\n    boolean error=true;\n    try {\n      log.info(\"start \"+cmd);\n\n      if (cmd.optimize) {\n        writer.optimize(cmd.maxOptimizeSegments);\n      } else if (cmd.expungeDeletes) {\n        writer.expungeDeletes();\n      }\n      \n      if (!cmd.softCommit) {\n        writer.commit();\n        \n        callPostCommitCallbacks();\n      } else {\n        callPostSoftCommitCallbacks();\n      }\n\n\n      if (cmd.optimize) {\n        callPostOptimizeCallbacks();\n      }\n      \n      // open a new searcher in the sync block to avoid opening it\n      // after a deleteByQuery changed the index, or in between deletes\n      // and adds of another commit being done.\n      if (cmd.softCommit) {\n        core.getSearcher(true,false,waitSearcher, true);\n      } else {\n        core.getSearcher(true,false,waitSearcher);\n      }\n\n      // reset commit tracking\n\n      if (cmd.softCommit) {\n        softCommitTracker.didCommit();\n      } else {\n        commitTracker.didCommit();\n      }\n      \n      log.info(\"end_commit_flush\");\n\n      error=false;\n    }\n    finally {\n      addCommands.set(0);\n      deleteByIdCommands.set(0);\n      deleteByQueryCommands.set(0);\n      numErrors.set(error ? 1 : 0);\n    }\n\n    // if we are supposed to wait for the searcher to be registered, then we should do it\n    // outside of the synchronized block so that other update operations can proceed.\n    if (waitSearcher!=null && waitSearcher[0] != null) {\n       try {\n        waitSearcher[0].get();\n      } catch (InterruptedException e) {\n        SolrException.log(log,e);\n      } catch (ExecutionException e) {\n        SolrException.log(log,e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}