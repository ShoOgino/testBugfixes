{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathParts#PathParts(String,Configuration).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathParts#PathParts(String,Configuration).mjava","pathOld":"/dev/null","sourceNew":"  public PathParts(String uploadURL, Configuration conf) throws IOException {\n    if (uploadURL == null) {\n      throw new IllegalArgumentException(\"Path must not be null: \" + uploadURL);    \n    }\n    this.uploadURL = uploadURL;\n    if (conf == null) {\n      throw new IllegalArgumentException(\"Configuration must not be null: \" + uploadURL);    \n    }\n    this.conf = conf;\n    URI uri = stringToUri(uploadURL);\n    this.fs = FileSystem.get(uri, conf);\n    if (fs == null) {\n      throw new IllegalArgumentException(\"File system must not be null: \" + uploadURL);    \n    }\n    this.normalizedPath = fs.makeQualified(new Path(uri));\n    if (!normalizedPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + uploadURL);    \n    }\n    if (getScheme() == null) {\n      throw new IllegalArgumentException(\"Scheme must not be null: \" + uploadURL);    \n    }\n    if (getHost() == null) {\n      throw new IllegalArgumentException(\"Host must not be null: \" + uploadURL);    \n    }\n    if (getPort() < 0) {\n      throw new IllegalArgumentException(\"Port must not be negative: \" + uploadURL);    \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/PathParts#PathParts(String,Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/PathParts#PathParts(String,Configuration).mjava","sourceNew":"  public PathParts(String uploadURL, Configuration conf) throws IOException {\n    if (uploadURL == null) {\n      throw new IllegalArgumentException(\"Path must not be null: \" + uploadURL);    \n    }\n    this.uploadURL = uploadURL;\n    if (conf == null) {\n      throw new IllegalArgumentException(\"Configuration must not be null: \" + uploadURL);    \n    }\n    this.conf = conf;\n    URI uri = stringToUri(uploadURL);\n    this.fs = FileSystem.get(uri, conf);\n    if (fs == null) {\n      throw new IllegalArgumentException(\"File system must not be null: \" + uploadURL);    \n    }\n    this.normalizedPath = fs.makeQualified(new Path(uri));\n    if (!normalizedPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + uploadURL);    \n    }\n    if (getScheme() == null) {\n      throw new IllegalArgumentException(\"Scheme must not be null: \" + uploadURL);    \n    }\n    if (getHost() == null) {\n      throw new IllegalArgumentException(\"Host must not be null: \" + uploadURL);    \n    }\n    if (getPort() < 0) {\n      throw new IllegalArgumentException(\"Port must not be negative: \" + uploadURL);    \n    }\n  }\n\n","sourceOld":"  public PathParts(String uploadURL, Configuration conf) throws IOException {\n    if (uploadURL == null) {\n      throw new IllegalArgumentException(\"Path must not be null: \" + uploadURL);    \n    }\n    this.uploadURL = uploadURL;\n    if (conf == null) {\n      throw new IllegalArgumentException(\"Configuration must not be null: \" + uploadURL);    \n    }\n    this.conf = conf;\n    URI uri = stringToUri(uploadURL);\n    this.fs = FileSystem.get(uri, conf);\n    if (fs == null) {\n      throw new IllegalArgumentException(\"File system must not be null: \" + uploadURL);    \n    }\n    this.normalizedPath = fs.makeQualified(new Path(uri));\n    if (!normalizedPath.isAbsolute()) {\n      throw new IllegalArgumentException(\"Path must be absolute: \" + uploadURL);    \n    }\n    if (getScheme() == null) {\n      throw new IllegalArgumentException(\"Scheme must not be null: \" + uploadURL);    \n    }\n    if (getHost() == null) {\n      throw new IllegalArgumentException(\"Host must not be null: \" + uploadURL);    \n    }\n    if (getPort() < 0) {\n      throw new IllegalArgumentException(\"Port must not be negative: \" + uploadURL);    \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}