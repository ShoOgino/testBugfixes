{"path":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","commits":[{"id":"e9a421afb32184cc61e8326108325225d58dfde0","date":1255858611,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    TopDocs hits;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","sourceNew":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","sourceOld":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    TopDocs hits;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","pathOld":"src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testPayloadNear().mjava","sourceNew":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","sourceOld":"  public void testPayloadNear() throws IOException {\n    SpanNearQuery q1, q2;\n    PayloadNearQuery query;\n    //SpanNearQuery(clauses, 10000, false)\n    q1 = spanNearQuery(\"field2\", \"twenty two\");\n    q2 = spanNearQuery(\"field2\", \"twenty three\");\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = q1;\n    clauses[1] = q2;\n    query = new PayloadNearQuery(clauses, 10, false); \n    //System.out.println(query.toString());\n    assertEquals(12, searcher.search(query, null, 100).totalHits);\n    /*\n    System.out.println(hits.totalHits);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      System.out.println(\"doc: \"+doc.doc+\", score: \"+doc.score);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["e9a421afb32184cc61e8326108325225d58dfde0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e9a421afb32184cc61e8326108325225d58dfde0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a421afb32184cc61e8326108325225d58dfde0"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e9a421afb32184cc61e8326108325225d58dfde0":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}