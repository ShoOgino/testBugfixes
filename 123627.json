{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","commits":[{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","pathOld":"/dev/null","sourceNew":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.addAttribute(PayloadAttribute.class);\n    \n    assertTrue(ts.incrementToken());    \n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e2169aa913b569633d459103a3f33f602568a0b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","sourceNew":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    \n    assertTrue(ts.incrementToken());    \n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = (PayloadAttribute) ts.addAttribute(PayloadAttribute.class);\n    \n    assertTrue(ts.incrementToken());    \n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2169aa913b569633d459103a3f33f602568a0b9","date":1254758477,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","sourceNew":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n\n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n    \n    assertTrue(ts.incrementToken());    \n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","bugFix":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#assertNext(TokenStream,String,int,float).mjava","sourceNew":null,"sourceOld":"  private void assertNext(TokenStream ts, String text, int positionIncrement, float boost) throws IOException {\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    PayloadAttribute payloadAtt = ts.addAttribute(PayloadAttribute.class);\n\n    assertTrue(ts.incrementToken());\n    assertEquals(text, termAtt.term());\n    assertEquals(positionIncrement, posIncrAtt.getPositionIncrement());\n    assertEquals(boost, payloadAtt.getPayload() == null ? 1f : PayloadHelper.decodeFloat(payloadAtt.getPayload().getData()), 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2169aa913b569633d459103a3f33f602568a0b9":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e2169aa913b569633d459103a3f33f602568a0b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e2169aa913b569633d459103a3f33f602568a0b9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["e2169aa913b569633d459103a3f33f602568a0b9"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}