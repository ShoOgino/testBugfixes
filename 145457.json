{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","sourceNew":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", document);\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","sourceOld":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", document);\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","sourceNew":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","sourceOld":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", document);\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","sourceNew":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.reusableTokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","sourceOld":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","sourceNew":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","sourceOld":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.reusableTokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.reusableTokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/PatternAnalyzerTest#check(PatternAnalyzer,String,String[]).mjava","sourceNew":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","sourceOld":"  /**\n   * Verify the analyzer analyzes to the expected contents. For PatternAnalyzer,\n   * several methods are verified:\n   * <ul>\n   * <li>Analysis with a normal Reader\n   * <li>Analysis with a FastStringReader\n   * <li>Analysis with a String\n   * </ul>\n   */\n  private void check(PatternAnalyzer analyzer, String document,\n      String expected[]) throws IOException {\n    // ordinary analysis of a Reader\n    assertAnalyzesTo(analyzer, document, expected);\n\n    // analysis with a \"FastStringReader\"\n    TokenStream ts = analyzer.tokenStream(\"dummy\",\n        new PatternAnalyzer.FastStringReader(document));\n    assertTokenStreamContents(ts, expected);\n\n    // analysis of a String, uses PatternAnalyzer.tokenStream(String, String)\n    TokenStream ts2 = analyzer.tokenStream(\"dummy\", new StringReader(document));\n    assertTokenStreamContents(ts2, expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf7efd82433f3f64684711c16edfd149db6af111":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["cf7efd82433f3f64684711c16edfd149db6af111"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}